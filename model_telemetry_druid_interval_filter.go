/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-16143
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// checks if the TelemetryDruidIntervalFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryDruidIntervalFilter{}

// TelemetryDruidIntervalFilter The Interval filter enables range filtering on columns that contain long millisecond values, with the boundaries specified as ISO 8601 time intervals. It is suitable for the __time column, long metric columns, and dimensions with values that can be parsed as long milliseconds. This filter converts the ISO 8601 intervals to long millisecond start/end ranges and translates to an OR of Bound filters on those millisecond ranges, with numeric comparison. The Bound filters will have left-closed and right-open matching (i.e., start <= time < end). The interval filter supports the use of extraction functions. If an extraction function is used with this filter, the extraction function should output values that are parseable as long milliseconds.
type TelemetryDruidIntervalFilter struct {
	Type string `json:"type"`
	// Input column or virtual column name to filter.
	Dimension string `json:"dimension"`
	// A JSON array containing ISO-8601 interval strings that defines the time ranges to filter on.
	Intervals            []string                          `json:"intervals"`
	ExtractionFn         *TelemetryDruidExtractionFunction `json:"extractionFn,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TelemetryDruidIntervalFilter TelemetryDruidIntervalFilter

// NewTelemetryDruidIntervalFilter instantiates a new TelemetryDruidIntervalFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryDruidIntervalFilter(type_ string, dimension string, intervals []string) *TelemetryDruidIntervalFilter {
	this := TelemetryDruidIntervalFilter{}
	this.Type = type_
	this.Dimension = dimension
	this.Intervals = intervals
	return &this
}

// NewTelemetryDruidIntervalFilterWithDefaults instantiates a new TelemetryDruidIntervalFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryDruidIntervalFilterWithDefaults() *TelemetryDruidIntervalFilter {
	this := TelemetryDruidIntervalFilter{}
	return &this
}

// GetType returns the Type field value
func (o *TelemetryDruidIntervalFilter) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidIntervalFilter) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TelemetryDruidIntervalFilter) SetType(v string) {
	o.Type = v
}

// GetDimension returns the Dimension field value
func (o *TelemetryDruidIntervalFilter) GetDimension() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Dimension
}

// GetDimensionOk returns a tuple with the Dimension field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidIntervalFilter) GetDimensionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dimension, true
}

// SetDimension sets field value
func (o *TelemetryDruidIntervalFilter) SetDimension(v string) {
	o.Dimension = v
}

// GetIntervals returns the Intervals field value
func (o *TelemetryDruidIntervalFilter) GetIntervals() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Intervals
}

// GetIntervalsOk returns a tuple with the Intervals field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidIntervalFilter) GetIntervalsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Intervals, true
}

// SetIntervals sets field value
func (o *TelemetryDruidIntervalFilter) SetIntervals(v []string) {
	o.Intervals = v
}

// GetExtractionFn returns the ExtractionFn field value if set, zero value otherwise.
func (o *TelemetryDruidIntervalFilter) GetExtractionFn() TelemetryDruidExtractionFunction {
	if o == nil || IsNil(o.ExtractionFn) {
		var ret TelemetryDruidExtractionFunction
		return ret
	}
	return *o.ExtractionFn
}

// GetExtractionFnOk returns a tuple with the ExtractionFn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidIntervalFilter) GetExtractionFnOk() (*TelemetryDruidExtractionFunction, bool) {
	if o == nil || IsNil(o.ExtractionFn) {
		return nil, false
	}
	return o.ExtractionFn, true
}

// HasExtractionFn returns a boolean if a field has been set.
func (o *TelemetryDruidIntervalFilter) HasExtractionFn() bool {
	if o != nil && !IsNil(o.ExtractionFn) {
		return true
	}

	return false
}

// SetExtractionFn gets a reference to the given TelemetryDruidExtractionFunction and assigns it to the ExtractionFn field.
func (o *TelemetryDruidIntervalFilter) SetExtractionFn(v TelemetryDruidExtractionFunction) {
	o.ExtractionFn = &v
}

func (o TelemetryDruidIntervalFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryDruidIntervalFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["dimension"] = o.Dimension
	toSerialize["intervals"] = o.Intervals
	if !IsNil(o.ExtractionFn) {
		toSerialize["extractionFn"] = o.ExtractionFn
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TelemetryDruidIntervalFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"dimension",
		"intervals",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTelemetryDruidIntervalFilter := _TelemetryDruidIntervalFilter{}

	err = json.Unmarshal(data, &varTelemetryDruidIntervalFilter)

	if err != nil {
		return err
	}

	*o = TelemetryDruidIntervalFilter(varTelemetryDruidIntervalFilter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "dimension")
		delete(additionalProperties, "intervals")
		delete(additionalProperties, "extractionFn")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTelemetryDruidIntervalFilter struct {
	value *TelemetryDruidIntervalFilter
	isSet bool
}

func (v NullableTelemetryDruidIntervalFilter) Get() *TelemetryDruidIntervalFilter {
	return v.value
}

func (v *NullableTelemetryDruidIntervalFilter) Set(val *TelemetryDruidIntervalFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidIntervalFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidIntervalFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidIntervalFilter(val *TelemetryDruidIntervalFilter) *NullableTelemetryDruidIntervalFilter {
	return &NullableTelemetryDruidIntervalFilter{value: val, isSet: true}
}

func (v NullableTelemetryDruidIntervalFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidIntervalFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
