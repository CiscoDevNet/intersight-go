/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-17956
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the ViewHealthStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewHealthStatus{}

// ViewHealthStatus Expose a Rest endpoint to return a High level, aggregated status of Intersight components for a given Intersight account user. Meant to inform the user if there's an issue with Intersight components that needs her attention. At this point, Aggregated status is reported for 'Licensing', 'Advisories' and 'Alarms' components.
type ViewHealthStatus struct {
	MoBaseMo
	AdditionalProperties map[string]interface{}
}

type _ViewHealthStatus ViewHealthStatus

// NewViewHealthStatus instantiates a new ViewHealthStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewHealthStatus(classId string, objectType string) *ViewHealthStatus {
	this := ViewHealthStatus{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewViewHealthStatusWithDefaults instantiates a new ViewHealthStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewHealthStatusWithDefaults() *ViewHealthStatus {
	this := ViewHealthStatus{}
	return &this
}

func (o ViewHealthStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewHealthStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ViewHealthStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	type ViewHealthStatusWithoutEmbeddedStruct struct {
	}

	varViewHealthStatusWithoutEmbeddedStruct := ViewHealthStatusWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varViewHealthStatusWithoutEmbeddedStruct)
	if err == nil {
		varViewHealthStatus := _ViewHealthStatus{}
		*o = ViewHealthStatus(varViewHealthStatus)
	} else {
		return err
	}

	varViewHealthStatus := _ViewHealthStatus{}

	err = json.Unmarshal(data, &varViewHealthStatus)
	if err == nil {
		o.MoBaseMo = varViewHealthStatus.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableViewHealthStatus struct {
	value *ViewHealthStatus
	isSet bool
}

func (v NullableViewHealthStatus) Get() *ViewHealthStatus {
	return v.value
}

func (v *NullableViewHealthStatus) Set(val *ViewHealthStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableViewHealthStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableViewHealthStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewHealthStatus(val *ViewHealthStatus) *NullableViewHealthStatus {
	return &NullableViewHealthStatus{value: val, isSet: true}
}

func (v NullableViewHealthStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewHealthStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
