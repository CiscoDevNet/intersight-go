/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-15830
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the MarketplaceUseCaseVersionResources type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MarketplaceUseCaseVersionResources{}

// MarketplaceUseCaseVersionResources A MO describing the resources that belong to a UseCaseVersion
type MarketplaceUseCaseVersionResources struct {
	MoBaseComplexType
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// A string ID for each use case
	ResourceId *string `json:"ResourceId,omitempty"`
	// A string resource type for each use case
	ResourceType         *string `json:"ResourceType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MarketplaceUseCaseVersionResources MarketplaceUseCaseVersionResources

// NewMarketplaceUseCaseVersionResources instantiates a new MarketplaceUseCaseVersionResources object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarketplaceUseCaseVersionResources(classId string, objectType string) *MarketplaceUseCaseVersionResources {
	this := MarketplaceUseCaseVersionResources{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewMarketplaceUseCaseVersionResourcesWithDefaults instantiates a new MarketplaceUseCaseVersionResources object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarketplaceUseCaseVersionResourcesWithDefaults() *MarketplaceUseCaseVersionResources {
	this := MarketplaceUseCaseVersionResources{}
	var classId string = "marketplace.UseCaseVersionResources"
	this.ClassId = classId
	var objectType string = "marketplace.UseCaseVersionResources"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *MarketplaceUseCaseVersionResources) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *MarketplaceUseCaseVersionResources) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *MarketplaceUseCaseVersionResources) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *MarketplaceUseCaseVersionResources) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *MarketplaceUseCaseVersionResources) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *MarketplaceUseCaseVersionResources) SetObjectType(v string) {
	o.ObjectType = v
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *MarketplaceUseCaseVersionResources) GetResourceId() string {
	if o == nil || IsNil(o.ResourceId) {
		var ret string
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketplaceUseCaseVersionResources) GetResourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceId) {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *MarketplaceUseCaseVersionResources) HasResourceId() bool {
	if o != nil && !IsNil(o.ResourceId) {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given string and assigns it to the ResourceId field.
func (o *MarketplaceUseCaseVersionResources) SetResourceId(v string) {
	o.ResourceId = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *MarketplaceUseCaseVersionResources) GetResourceType() string {
	if o == nil || IsNil(o.ResourceType) {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketplaceUseCaseVersionResources) GetResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *MarketplaceUseCaseVersionResources) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *MarketplaceUseCaseVersionResources) SetResourceType(v string) {
	o.ResourceType = &v
}

func (o MarketplaceUseCaseVersionResources) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MarketplaceUseCaseVersionResources) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	toSerialize["ClassId"] = o.ClassId
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.ResourceId) {
		toSerialize["ResourceId"] = o.ResourceId
	}
	if !IsNil(o.ResourceType) {
		toSerialize["ResourceType"] = o.ResourceType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MarketplaceUseCaseVersionResources) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	type MarketplaceUseCaseVersionResourcesWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// A string ID for each use case
		ResourceId *string `json:"ResourceId,omitempty"`
		// A string resource type for each use case
		ResourceType *string `json:"ResourceType,omitempty"`
	}

	varMarketplaceUseCaseVersionResourcesWithoutEmbeddedStruct := MarketplaceUseCaseVersionResourcesWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varMarketplaceUseCaseVersionResourcesWithoutEmbeddedStruct)
	if err == nil {
		varMarketplaceUseCaseVersionResources := _MarketplaceUseCaseVersionResources{}
		varMarketplaceUseCaseVersionResources.ClassId = varMarketplaceUseCaseVersionResourcesWithoutEmbeddedStruct.ClassId
		varMarketplaceUseCaseVersionResources.ObjectType = varMarketplaceUseCaseVersionResourcesWithoutEmbeddedStruct.ObjectType
		varMarketplaceUseCaseVersionResources.ResourceId = varMarketplaceUseCaseVersionResourcesWithoutEmbeddedStruct.ResourceId
		varMarketplaceUseCaseVersionResources.ResourceType = varMarketplaceUseCaseVersionResourcesWithoutEmbeddedStruct.ResourceType
		*o = MarketplaceUseCaseVersionResources(varMarketplaceUseCaseVersionResources)
	} else {
		return err
	}

	varMarketplaceUseCaseVersionResources := _MarketplaceUseCaseVersionResources{}

	err = json.Unmarshal(data, &varMarketplaceUseCaseVersionResources)
	if err == nil {
		o.MoBaseComplexType = varMarketplaceUseCaseVersionResources.MoBaseComplexType
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "ResourceId")
		delete(additionalProperties, "ResourceType")

		// remove fields from embedded structs
		reflectMoBaseComplexType := reflect.ValueOf(o.MoBaseComplexType)
		for i := 0; i < reflectMoBaseComplexType.Type().NumField(); i++ {
			t := reflectMoBaseComplexType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMarketplaceUseCaseVersionResources struct {
	value *MarketplaceUseCaseVersionResources
	isSet bool
}

func (v NullableMarketplaceUseCaseVersionResources) Get() *MarketplaceUseCaseVersionResources {
	return v.value
}

func (v *NullableMarketplaceUseCaseVersionResources) Set(val *MarketplaceUseCaseVersionResources) {
	v.value = val
	v.isSet = true
}

func (v NullableMarketplaceUseCaseVersionResources) IsSet() bool {
	return v.isSet
}

func (v *NullableMarketplaceUseCaseVersionResources) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarketplaceUseCaseVersionResources(val *MarketplaceUseCaseVersionResources) *NullableMarketplaceUseCaseVersionResources {
	return &NullableMarketplaceUseCaseVersionResources{value: val, isSet: true}
}

func (v NullableMarketplaceUseCaseVersionResources) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarketplaceUseCaseVersionResources) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
