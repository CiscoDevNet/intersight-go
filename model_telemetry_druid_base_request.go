/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-17769
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// checks if the TelemetryDruidBaseRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryDruidBaseRequest{}

// TelemetryDruidBaseRequest The base structure for all Druid requests.
type TelemetryDruidBaseRequest struct {
	QueryType            string `json:"queryType"`
	AdditionalProperties map[string]interface{}
}

type _TelemetryDruidBaseRequest TelemetryDruidBaseRequest

// NewTelemetryDruidBaseRequest instantiates a new TelemetryDruidBaseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryDruidBaseRequest(queryType string) *TelemetryDruidBaseRequest {
	this := TelemetryDruidBaseRequest{}
	this.QueryType = queryType
	return &this
}

// NewTelemetryDruidBaseRequestWithDefaults instantiates a new TelemetryDruidBaseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryDruidBaseRequestWithDefaults() *TelemetryDruidBaseRequest {
	this := TelemetryDruidBaseRequest{}
	return &this
}

// GetQueryType returns the QueryType field value
func (o *TelemetryDruidBaseRequest) GetQueryType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QueryType
}

// GetQueryTypeOk returns a tuple with the QueryType field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidBaseRequest) GetQueryTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QueryType, true
}

// SetQueryType sets field value
func (o *TelemetryDruidBaseRequest) SetQueryType(v string) {
	o.QueryType = v
}

func (o TelemetryDruidBaseRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryDruidBaseRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["queryType"] = o.QueryType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TelemetryDruidBaseRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"queryType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTelemetryDruidBaseRequest := _TelemetryDruidBaseRequest{}

	err = json.Unmarshal(data, &varTelemetryDruidBaseRequest)

	if err != nil {
		return err
	}

	*o = TelemetryDruidBaseRequest(varTelemetryDruidBaseRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "queryType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTelemetryDruidBaseRequest struct {
	value *TelemetryDruidBaseRequest
	isSet bool
}

func (v NullableTelemetryDruidBaseRequest) Get() *TelemetryDruidBaseRequest {
	return v.value
}

func (v *NullableTelemetryDruidBaseRequest) Set(val *TelemetryDruidBaseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidBaseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidBaseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidBaseRequest(val *TelemetryDruidBaseRequest) *NullableTelemetryDruidBaseRequest {
	return &NullableTelemetryDruidBaseRequest{value: val, isSet: true}
}

func (v NullableTelemetryDruidBaseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidBaseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
