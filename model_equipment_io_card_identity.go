/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-14968
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the EquipmentIoCardIdentity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EquipmentIoCardIdentity{}

// EquipmentIoCardIdentity IoCardIdentity Complex type referenced in ChassisIdentity concrete MO.
type EquipmentIoCardIdentity struct {
	MoBaseComplexType
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// MO Reference to equipmentIoCard MO in inventory service.
	IoCardMoid *string `json:"IoCardMoid,omitempty"`
	// IOM/MUX Module ID connected to the FI.
	ModuleId *int64 `json:"ModuleId,omitempty"`
	// MO Reference to networkElement MO in inventory service.
	NetworkElementMoid *string `json:"NetworkElementMoid,omitempty"`
	// Switch ID to which IOM is connected, ID can be either 1 or 2, equalent to A or B.
	SwitchId             *int64 `json:"SwitchId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EquipmentIoCardIdentity EquipmentIoCardIdentity

// NewEquipmentIoCardIdentity instantiates a new EquipmentIoCardIdentity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEquipmentIoCardIdentity(classId string, objectType string) *EquipmentIoCardIdentity {
	this := EquipmentIoCardIdentity{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewEquipmentIoCardIdentityWithDefaults instantiates a new EquipmentIoCardIdentity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEquipmentIoCardIdentityWithDefaults() *EquipmentIoCardIdentity {
	this := EquipmentIoCardIdentity{}
	var classId string = "equipment.IoCardIdentity"
	this.ClassId = classId
	var objectType string = "equipment.IoCardIdentity"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *EquipmentIoCardIdentity) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *EquipmentIoCardIdentity) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *EquipmentIoCardIdentity) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *EquipmentIoCardIdentity) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *EquipmentIoCardIdentity) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *EquipmentIoCardIdentity) SetObjectType(v string) {
	o.ObjectType = v
}

// GetIoCardMoid returns the IoCardMoid field value if set, zero value otherwise.
func (o *EquipmentIoCardIdentity) GetIoCardMoid() string {
	if o == nil || IsNil(o.IoCardMoid) {
		var ret string
		return ret
	}
	return *o.IoCardMoid
}

// GetIoCardMoidOk returns a tuple with the IoCardMoid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentIoCardIdentity) GetIoCardMoidOk() (*string, bool) {
	if o == nil || IsNil(o.IoCardMoid) {
		return nil, false
	}
	return o.IoCardMoid, true
}

// HasIoCardMoid returns a boolean if a field has been set.
func (o *EquipmentIoCardIdentity) HasIoCardMoid() bool {
	if o != nil && !IsNil(o.IoCardMoid) {
		return true
	}

	return false
}

// SetIoCardMoid gets a reference to the given string and assigns it to the IoCardMoid field.
func (o *EquipmentIoCardIdentity) SetIoCardMoid(v string) {
	o.IoCardMoid = &v
}

// GetModuleId returns the ModuleId field value if set, zero value otherwise.
func (o *EquipmentIoCardIdentity) GetModuleId() int64 {
	if o == nil || IsNil(o.ModuleId) {
		var ret int64
		return ret
	}
	return *o.ModuleId
}

// GetModuleIdOk returns a tuple with the ModuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentIoCardIdentity) GetModuleIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ModuleId) {
		return nil, false
	}
	return o.ModuleId, true
}

// HasModuleId returns a boolean if a field has been set.
func (o *EquipmentIoCardIdentity) HasModuleId() bool {
	if o != nil && !IsNil(o.ModuleId) {
		return true
	}

	return false
}

// SetModuleId gets a reference to the given int64 and assigns it to the ModuleId field.
func (o *EquipmentIoCardIdentity) SetModuleId(v int64) {
	o.ModuleId = &v
}

// GetNetworkElementMoid returns the NetworkElementMoid field value if set, zero value otherwise.
func (o *EquipmentIoCardIdentity) GetNetworkElementMoid() string {
	if o == nil || IsNil(o.NetworkElementMoid) {
		var ret string
		return ret
	}
	return *o.NetworkElementMoid
}

// GetNetworkElementMoidOk returns a tuple with the NetworkElementMoid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentIoCardIdentity) GetNetworkElementMoidOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkElementMoid) {
		return nil, false
	}
	return o.NetworkElementMoid, true
}

// HasNetworkElementMoid returns a boolean if a field has been set.
func (o *EquipmentIoCardIdentity) HasNetworkElementMoid() bool {
	if o != nil && !IsNil(o.NetworkElementMoid) {
		return true
	}

	return false
}

// SetNetworkElementMoid gets a reference to the given string and assigns it to the NetworkElementMoid field.
func (o *EquipmentIoCardIdentity) SetNetworkElementMoid(v string) {
	o.NetworkElementMoid = &v
}

// GetSwitchId returns the SwitchId field value if set, zero value otherwise.
func (o *EquipmentIoCardIdentity) GetSwitchId() int64 {
	if o == nil || IsNil(o.SwitchId) {
		var ret int64
		return ret
	}
	return *o.SwitchId
}

// GetSwitchIdOk returns a tuple with the SwitchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentIoCardIdentity) GetSwitchIdOk() (*int64, bool) {
	if o == nil || IsNil(o.SwitchId) {
		return nil, false
	}
	return o.SwitchId, true
}

// HasSwitchId returns a boolean if a field has been set.
func (o *EquipmentIoCardIdentity) HasSwitchId() bool {
	if o != nil && !IsNil(o.SwitchId) {
		return true
	}

	return false
}

// SetSwitchId gets a reference to the given int64 and assigns it to the SwitchId field.
func (o *EquipmentIoCardIdentity) SetSwitchId(v int64) {
	o.SwitchId = &v
}

func (o EquipmentIoCardIdentity) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EquipmentIoCardIdentity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	toSerialize["ClassId"] = o.ClassId
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.IoCardMoid) {
		toSerialize["IoCardMoid"] = o.IoCardMoid
	}
	if !IsNil(o.ModuleId) {
		toSerialize["ModuleId"] = o.ModuleId
	}
	if !IsNil(o.NetworkElementMoid) {
		toSerialize["NetworkElementMoid"] = o.NetworkElementMoid
	}
	if !IsNil(o.SwitchId) {
		toSerialize["SwitchId"] = o.SwitchId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EquipmentIoCardIdentity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	type EquipmentIoCardIdentityWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// MO Reference to equipmentIoCard MO in inventory service.
		IoCardMoid *string `json:"IoCardMoid,omitempty"`
		// IOM/MUX Module ID connected to the FI.
		ModuleId *int64 `json:"ModuleId,omitempty"`
		// MO Reference to networkElement MO in inventory service.
		NetworkElementMoid *string `json:"NetworkElementMoid,omitempty"`
		// Switch ID to which IOM is connected, ID can be either 1 or 2, equalent to A or B.
		SwitchId *int64 `json:"SwitchId,omitempty"`
	}

	varEquipmentIoCardIdentityWithoutEmbeddedStruct := EquipmentIoCardIdentityWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varEquipmentIoCardIdentityWithoutEmbeddedStruct)
	if err == nil {
		varEquipmentIoCardIdentity := _EquipmentIoCardIdentity{}
		varEquipmentIoCardIdentity.ClassId = varEquipmentIoCardIdentityWithoutEmbeddedStruct.ClassId
		varEquipmentIoCardIdentity.ObjectType = varEquipmentIoCardIdentityWithoutEmbeddedStruct.ObjectType
		varEquipmentIoCardIdentity.IoCardMoid = varEquipmentIoCardIdentityWithoutEmbeddedStruct.IoCardMoid
		varEquipmentIoCardIdentity.ModuleId = varEquipmentIoCardIdentityWithoutEmbeddedStruct.ModuleId
		varEquipmentIoCardIdentity.NetworkElementMoid = varEquipmentIoCardIdentityWithoutEmbeddedStruct.NetworkElementMoid
		varEquipmentIoCardIdentity.SwitchId = varEquipmentIoCardIdentityWithoutEmbeddedStruct.SwitchId
		*o = EquipmentIoCardIdentity(varEquipmentIoCardIdentity)
	} else {
		return err
	}

	varEquipmentIoCardIdentity := _EquipmentIoCardIdentity{}

	err = json.Unmarshal(data, &varEquipmentIoCardIdentity)
	if err == nil {
		o.MoBaseComplexType = varEquipmentIoCardIdentity.MoBaseComplexType
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "IoCardMoid")
		delete(additionalProperties, "ModuleId")
		delete(additionalProperties, "NetworkElementMoid")
		delete(additionalProperties, "SwitchId")

		// remove fields from embedded structs
		reflectMoBaseComplexType := reflect.ValueOf(o.MoBaseComplexType)
		for i := 0; i < reflectMoBaseComplexType.Type().NumField(); i++ {
			t := reflectMoBaseComplexType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEquipmentIoCardIdentity struct {
	value *EquipmentIoCardIdentity
	isSet bool
}

func (v NullableEquipmentIoCardIdentity) Get() *EquipmentIoCardIdentity {
	return v.value
}

func (v *NullableEquipmentIoCardIdentity) Set(val *EquipmentIoCardIdentity) {
	v.value = val
	v.isSet = true
}

func (v NullableEquipmentIoCardIdentity) IsSet() bool {
	return v.isSet
}

func (v *NullableEquipmentIoCardIdentity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEquipmentIoCardIdentity(val *EquipmentIoCardIdentity) *NullableEquipmentIoCardIdentity {
	return &NullableEquipmentIoCardIdentity{value: val, isSet: true}
}

func (v NullableEquipmentIoCardIdentity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEquipmentIoCardIdentity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
