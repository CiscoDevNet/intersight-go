/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-18534
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// StorageHitachiArrayResponse - The response body of a HTTP GET request for the 'storage.HitachiArray' resource. The value may be one of the following types. 1. When 'tag' is specified in the URL query, the response schema     is a summary of the tag usage. 1. When '$apply' is specified in the URL query, the response schema     is dynamically-generated schema based on the $apply value. 1. When '$count' is specified in the URL query, the response is     a simple object providing the count of the resources. 1. In all other cases, the response is a list of 'storage.HitachiArray' resources.
type StorageHitachiArrayResponse struct {
	MoAggregateTransform    *MoAggregateTransform
	MoDocumentCount         *MoDocumentCount
	MoTagSummary            *MoTagSummary
	StorageHitachiArrayList *StorageHitachiArrayList
}

// MoAggregateTransformAsStorageHitachiArrayResponse is a convenience function that returns MoAggregateTransform wrapped in StorageHitachiArrayResponse
func MoAggregateTransformAsStorageHitachiArrayResponse(v *MoAggregateTransform) StorageHitachiArrayResponse {
	return StorageHitachiArrayResponse{
		MoAggregateTransform: v,
	}
}

// MoDocumentCountAsStorageHitachiArrayResponse is a convenience function that returns MoDocumentCount wrapped in StorageHitachiArrayResponse
func MoDocumentCountAsStorageHitachiArrayResponse(v *MoDocumentCount) StorageHitachiArrayResponse {
	return StorageHitachiArrayResponse{
		MoDocumentCount: v,
	}
}

// MoTagSummaryAsStorageHitachiArrayResponse is a convenience function that returns MoTagSummary wrapped in StorageHitachiArrayResponse
func MoTagSummaryAsStorageHitachiArrayResponse(v *MoTagSummary) StorageHitachiArrayResponse {
	return StorageHitachiArrayResponse{
		MoTagSummary: v,
	}
}

// StorageHitachiArrayListAsStorageHitachiArrayResponse is a convenience function that returns StorageHitachiArrayList wrapped in StorageHitachiArrayResponse
func StorageHitachiArrayListAsStorageHitachiArrayResponse(v *StorageHitachiArrayList) StorageHitachiArrayResponse {
	return StorageHitachiArrayResponse{
		StorageHitachiArrayList: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *StorageHitachiArrayResponse) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'mo.AggregateTransform'
	if jsonDict["ObjectType"] == "mo.AggregateTransform" {
		// try to unmarshal JSON data into MoAggregateTransform
		err = json.Unmarshal(data, &dst.MoAggregateTransform)
		if err == nil {
			return nil // data stored in dst.MoAggregateTransform, return on the first match
		} else {
			dst.MoAggregateTransform = nil
			return fmt.Errorf("failed to unmarshal StorageHitachiArrayResponse as MoAggregateTransform: %s", err.Error())
		}
	}

	// check if the discriminator value is 'mo.DocumentCount'
	if jsonDict["ObjectType"] == "mo.DocumentCount" {
		// try to unmarshal JSON data into MoDocumentCount
		err = json.Unmarshal(data, &dst.MoDocumentCount)
		if err == nil {
			return nil // data stored in dst.MoDocumentCount, return on the first match
		} else {
			dst.MoDocumentCount = nil
			return fmt.Errorf("failed to unmarshal StorageHitachiArrayResponse as MoDocumentCount: %s", err.Error())
		}
	}

	// check if the discriminator value is 'mo.TagSummary'
	if jsonDict["ObjectType"] == "mo.TagSummary" {
		// try to unmarshal JSON data into MoTagSummary
		err = json.Unmarshal(data, &dst.MoTagSummary)
		if err == nil {
			return nil // data stored in dst.MoTagSummary, return on the first match
		} else {
			dst.MoTagSummary = nil
			return fmt.Errorf("failed to unmarshal StorageHitachiArrayResponse as MoTagSummary: %s", err.Error())
		}
	}

	// check if the discriminator value is 'storage.HitachiArray.List'
	if jsonDict["ObjectType"] == "storage.HitachiArray.List" {
		// try to unmarshal JSON data into StorageHitachiArrayList
		err = json.Unmarshal(data, &dst.StorageHitachiArrayList)
		if err == nil {
			return nil // data stored in dst.StorageHitachiArrayList, return on the first match
		} else {
			dst.StorageHitachiArrayList = nil
			return fmt.Errorf("failed to unmarshal StorageHitachiArrayResponse as StorageHitachiArrayList: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src StorageHitachiArrayResponse) MarshalJSON() ([]byte, error) {
	if src.MoAggregateTransform != nil {
		return json.Marshal(&src.MoAggregateTransform)
	}

	if src.MoDocumentCount != nil {
		return json.Marshal(&src.MoDocumentCount)
	}

	if src.MoTagSummary != nil {
		return json.Marshal(&src.MoTagSummary)
	}

	if src.StorageHitachiArrayList != nil {
		return json.Marshal(&src.StorageHitachiArrayList)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *StorageHitachiArrayResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.MoAggregateTransform != nil {
		return obj.MoAggregateTransform
	}

	if obj.MoDocumentCount != nil {
		return obj.MoDocumentCount
	}

	if obj.MoTagSummary != nil {
		return obj.MoTagSummary
	}

	if obj.StorageHitachiArrayList != nil {
		return obj.StorageHitachiArrayList
	}

	// all schemas are nil
	return nil
}

type NullableStorageHitachiArrayResponse struct {
	value *StorageHitachiArrayResponse
	isSet bool
}

func (v NullableStorageHitachiArrayResponse) Get() *StorageHitachiArrayResponse {
	return v.value
}

func (v *NullableStorageHitachiArrayResponse) Set(val *StorageHitachiArrayResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageHitachiArrayResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageHitachiArrayResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageHitachiArrayResponse(val *StorageHitachiArrayResponse) *NullableStorageHitachiArrayResponse {
	return &NullableStorageHitachiArrayResponse{value: val, isSet: true}
}

func (v NullableStorageHitachiArrayResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageHitachiArrayResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
