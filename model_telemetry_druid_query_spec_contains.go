/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-15473
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// checks if the TelemetryDruidQuerySpecContains type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryDruidQuerySpecContains{}

// TelemetryDruidQuerySpecContains A 'contains' query spec.
type TelemetryDruidQuerySpecContains struct {
	Type string `json:"type"`
	// A String value to search.
	Value string `json:"value"`
	// Whether the string comparison is case-sensitive or not.
	CaseSensitive        *bool `json:"caseSensitive,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TelemetryDruidQuerySpecContains TelemetryDruidQuerySpecContains

// NewTelemetryDruidQuerySpecContains instantiates a new TelemetryDruidQuerySpecContains object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryDruidQuerySpecContains(type_ string, value string) *TelemetryDruidQuerySpecContains {
	this := TelemetryDruidQuerySpecContains{}
	this.Type = type_
	this.Value = value
	return &this
}

// NewTelemetryDruidQuerySpecContainsWithDefaults instantiates a new TelemetryDruidQuerySpecContains object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryDruidQuerySpecContainsWithDefaults() *TelemetryDruidQuerySpecContains {
	this := TelemetryDruidQuerySpecContains{}
	return &this
}

// GetType returns the Type field value
func (o *TelemetryDruidQuerySpecContains) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidQuerySpecContains) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TelemetryDruidQuerySpecContains) SetType(v string) {
	o.Type = v
}

// GetValue returns the Value field value
func (o *TelemetryDruidQuerySpecContains) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidQuerySpecContains) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *TelemetryDruidQuerySpecContains) SetValue(v string) {
	o.Value = v
}

// GetCaseSensitive returns the CaseSensitive field value if set, zero value otherwise.
func (o *TelemetryDruidQuerySpecContains) GetCaseSensitive() bool {
	if o == nil || IsNil(o.CaseSensitive) {
		var ret bool
		return ret
	}
	return *o.CaseSensitive
}

// GetCaseSensitiveOk returns a tuple with the CaseSensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidQuerySpecContains) GetCaseSensitiveOk() (*bool, bool) {
	if o == nil || IsNil(o.CaseSensitive) {
		return nil, false
	}
	return o.CaseSensitive, true
}

// HasCaseSensitive returns a boolean if a field has been set.
func (o *TelemetryDruidQuerySpecContains) HasCaseSensitive() bool {
	if o != nil && !IsNil(o.CaseSensitive) {
		return true
	}

	return false
}

// SetCaseSensitive gets a reference to the given bool and assigns it to the CaseSensitive field.
func (o *TelemetryDruidQuerySpecContains) SetCaseSensitive(v bool) {
	o.CaseSensitive = &v
}

func (o TelemetryDruidQuerySpecContains) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryDruidQuerySpecContains) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["value"] = o.Value
	if !IsNil(o.CaseSensitive) {
		toSerialize["caseSensitive"] = o.CaseSensitive
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TelemetryDruidQuerySpecContains) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTelemetryDruidQuerySpecContains := _TelemetryDruidQuerySpecContains{}

	err = json.Unmarshal(data, &varTelemetryDruidQuerySpecContains)

	if err != nil {
		return err
	}

	*o = TelemetryDruidQuerySpecContains(varTelemetryDruidQuerySpecContains)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "value")
		delete(additionalProperties, "caseSensitive")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTelemetryDruidQuerySpecContains struct {
	value *TelemetryDruidQuerySpecContains
	isSet bool
}

func (v NullableTelemetryDruidQuerySpecContains) Get() *TelemetryDruidQuerySpecContains {
	return v.value
}

func (v *NullableTelemetryDruidQuerySpecContains) Set(val *TelemetryDruidQuerySpecContains) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidQuerySpecContains) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidQuerySpecContains) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidQuerySpecContains(val *TelemetryDruidQuerySpecContains) *NullableTelemetryDruidQuerySpecContains {
	return &NullableTelemetryDruidQuerySpecContains{value: val, isSet: true}
}

func (v NullableTelemetryDruidQuerySpecContains) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidQuerySpecContains) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
