/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-15473
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// checks if the TelemetryDruidAndFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryDruidAndFilter{}

// TelemetryDruidAndFilter A logical AND expression filter.
type TelemetryDruidAndFilter struct {
	// The filter type.
	Type                 string                 `json:"type"`
	Fields               []TelemetryDruidFilter `json:"fields"`
	AdditionalProperties map[string]interface{}
}

type _TelemetryDruidAndFilter TelemetryDruidAndFilter

// NewTelemetryDruidAndFilter instantiates a new TelemetryDruidAndFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryDruidAndFilter(type_ string, fields []TelemetryDruidFilter) *TelemetryDruidAndFilter {
	this := TelemetryDruidAndFilter{}
	this.Type = type_
	this.Fields = fields
	return &this
}

// NewTelemetryDruidAndFilterWithDefaults instantiates a new TelemetryDruidAndFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryDruidAndFilterWithDefaults() *TelemetryDruidAndFilter {
	this := TelemetryDruidAndFilter{}
	return &this
}

// GetType returns the Type field value
func (o *TelemetryDruidAndFilter) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidAndFilter) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TelemetryDruidAndFilter) SetType(v string) {
	o.Type = v
}

// GetFields returns the Fields field value
func (o *TelemetryDruidAndFilter) GetFields() []TelemetryDruidFilter {
	if o == nil {
		var ret []TelemetryDruidFilter
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidAndFilter) GetFieldsOk() ([]TelemetryDruidFilter, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fields, true
}

// SetFields sets field value
func (o *TelemetryDruidAndFilter) SetFields(v []TelemetryDruidFilter) {
	o.Fields = v
}

func (o TelemetryDruidAndFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryDruidAndFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["fields"] = o.Fields

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TelemetryDruidAndFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"fields",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTelemetryDruidAndFilter := _TelemetryDruidAndFilter{}

	err = json.Unmarshal(data, &varTelemetryDruidAndFilter)

	if err != nil {
		return err
	}

	*o = TelemetryDruidAndFilter(varTelemetryDruidAndFilter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "fields")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTelemetryDruidAndFilter struct {
	value *TelemetryDruidAndFilter
	isSet bool
}

func (v NullableTelemetryDruidAndFilter) Get() *TelemetryDruidAndFilter {
	return v.value
}

func (v *NullableTelemetryDruidAndFilter) Set(val *TelemetryDruidAndFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidAndFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidAndFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidAndFilter(val *TelemetryDruidAndFilter) *NullableTelemetryDruidAndFilter {
	return &NullableTelemetryDruidAndFilter{value: val, isSet: true}
}

func (v NullableTelemetryDruidAndFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidAndFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
