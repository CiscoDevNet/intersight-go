/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-17412
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"time"
)

// checks if the TelemetryDruidGroupByResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryDruidGroupByResult{}

// TelemetryDruidGroupByResult A time series result based on a provided groupBy query. Result can contain multiple dimensions and values.
type TelemetryDruidGroupByResult struct {
	// The ISO 8601 timestamp.
	Timestamp *time.Time `json:"timestamp,omitempty"`
	// The version of the Druid GroupBy Engine used in query.
	Version *string `json:"version,omitempty"`
	// Grouped aggregate dimension(s) with values.
	Event                map[string]interface{} `json:"event,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TelemetryDruidGroupByResult TelemetryDruidGroupByResult

// NewTelemetryDruidGroupByResult instantiates a new TelemetryDruidGroupByResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryDruidGroupByResult() *TelemetryDruidGroupByResult {
	this := TelemetryDruidGroupByResult{}
	return &this
}

// NewTelemetryDruidGroupByResultWithDefaults instantiates a new TelemetryDruidGroupByResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryDruidGroupByResultWithDefaults() *TelemetryDruidGroupByResult {
	this := TelemetryDruidGroupByResult{}
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *TelemetryDruidGroupByResult) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidGroupByResult) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *TelemetryDruidGroupByResult) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *TelemetryDruidGroupByResult) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *TelemetryDruidGroupByResult) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidGroupByResult) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *TelemetryDruidGroupByResult) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *TelemetryDruidGroupByResult) SetVersion(v string) {
	o.Version = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *TelemetryDruidGroupByResult) GetEvent() map[string]interface{} {
	if o == nil || IsNil(o.Event) {
		var ret map[string]interface{}
		return ret
	}
	return o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidGroupByResult) GetEventOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Event) {
		return map[string]interface{}{}, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *TelemetryDruidGroupByResult) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given map[string]interface{} and assigns it to the Event field.
func (o *TelemetryDruidGroupByResult) SetEvent(v map[string]interface{}) {
	o.Event = v
}

func (o TelemetryDruidGroupByResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryDruidGroupByResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TelemetryDruidGroupByResult) UnmarshalJSON(data []byte) (err error) {
	varTelemetryDruidGroupByResult := _TelemetryDruidGroupByResult{}

	err = json.Unmarshal(data, &varTelemetryDruidGroupByResult)

	if err != nil {
		return err
	}

	*o = TelemetryDruidGroupByResult(varTelemetryDruidGroupByResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "version")
		delete(additionalProperties, "event")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTelemetryDruidGroupByResult struct {
	value *TelemetryDruidGroupByResult
	isSet bool
}

func (v NullableTelemetryDruidGroupByResult) Get() *TelemetryDruidGroupByResult {
	return v.value
}

func (v *NullableTelemetryDruidGroupByResult) Set(val *TelemetryDruidGroupByResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidGroupByResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidGroupByResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidGroupByResult(val *TelemetryDruidGroupByResult) *NullableTelemetryDruidGroupByResult {
	return &NullableTelemetryDruidGroupByResult{value: val, isSet: true}
}

func (v NullableTelemetryDruidGroupByResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidGroupByResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
