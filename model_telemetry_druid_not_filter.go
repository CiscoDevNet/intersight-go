/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-14968
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// checks if the TelemetryDruidNotFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryDruidNotFilter{}

// TelemetryDruidNotFilter A logical NOT expression filter.
type TelemetryDruidNotFilter struct {
	// The filter type.
	Type string `json:"type"`
	// All filters except the \"spatial\" filter support extraction functions. An extraction function is defined by setting the \"extractionFn\" field on a filter. See Extraction function for more details on extraction functions. If specified, the extraction function will be used to transform input values before the filter is applied. The example below shows a selector filter combined with an extraction function. This filter will transform input values according to the values defined in the lookup map; transformed values will then be matched with the string \"bar_1\".
	ExtractionFn         map[string]interface{} `json:"extractionFn,omitempty"`
	Field                TelemetryDruidFilter   `json:"field"`
	AdditionalProperties map[string]interface{}
}

type _TelemetryDruidNotFilter TelemetryDruidNotFilter

// NewTelemetryDruidNotFilter instantiates a new TelemetryDruidNotFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryDruidNotFilter(type_ string, field TelemetryDruidFilter) *TelemetryDruidNotFilter {
	this := TelemetryDruidNotFilter{}
	this.Type = type_
	this.Field = field
	return &this
}

// NewTelemetryDruidNotFilterWithDefaults instantiates a new TelemetryDruidNotFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryDruidNotFilterWithDefaults() *TelemetryDruidNotFilter {
	this := TelemetryDruidNotFilter{}
	return &this
}

// GetType returns the Type field value
func (o *TelemetryDruidNotFilter) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidNotFilter) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TelemetryDruidNotFilter) SetType(v string) {
	o.Type = v
}

// GetExtractionFn returns the ExtractionFn field value if set, zero value otherwise.
func (o *TelemetryDruidNotFilter) GetExtractionFn() map[string]interface{} {
	if o == nil || IsNil(o.ExtractionFn) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtractionFn
}

// GetExtractionFnOk returns a tuple with the ExtractionFn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidNotFilter) GetExtractionFnOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtractionFn) {
		return map[string]interface{}{}, false
	}
	return o.ExtractionFn, true
}

// HasExtractionFn returns a boolean if a field has been set.
func (o *TelemetryDruidNotFilter) HasExtractionFn() bool {
	if o != nil && !IsNil(o.ExtractionFn) {
		return true
	}

	return false
}

// SetExtractionFn gets a reference to the given map[string]interface{} and assigns it to the ExtractionFn field.
func (o *TelemetryDruidNotFilter) SetExtractionFn(v map[string]interface{}) {
	o.ExtractionFn = v
}

// GetField returns the Field field value
func (o *TelemetryDruidNotFilter) GetField() TelemetryDruidFilter {
	if o == nil {
		var ret TelemetryDruidFilter
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidNotFilter) GetFieldOk() (*TelemetryDruidFilter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *TelemetryDruidNotFilter) SetField(v TelemetryDruidFilter) {
	o.Field = v
}

func (o TelemetryDruidNotFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryDruidNotFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.ExtractionFn) {
		toSerialize["extractionFn"] = o.ExtractionFn
	}
	toSerialize["field"] = o.Field

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TelemetryDruidNotFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"field",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTelemetryDruidNotFilter := _TelemetryDruidNotFilter{}

	err = json.Unmarshal(data, &varTelemetryDruidNotFilter)

	if err != nil {
		return err
	}

	*o = TelemetryDruidNotFilter(varTelemetryDruidNotFilter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "extractionFn")
		delete(additionalProperties, "field")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTelemetryDruidNotFilter struct {
	value *TelemetryDruidNotFilter
	isSet bool
}

func (v NullableTelemetryDruidNotFilter) Get() *TelemetryDruidNotFilter {
	return v.value
}

func (v *NullableTelemetryDruidNotFilter) Set(val *TelemetryDruidNotFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidNotFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidNotFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidNotFilter(val *TelemetryDruidNotFilter) *NullableTelemetryDruidNotFilter {
	return &NullableTelemetryDruidNotFilter{value: val, isSet: true}
}

func (v NullableTelemetryDruidNotFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidNotFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
