/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-2025091920
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// WorkloadWorkloadDeploymentRelationship - A relationship to the 'workload.WorkloadDeployment' resource, or the expanded 'workload.WorkloadDeployment' resource, or the 'null' value.
type WorkloadWorkloadDeploymentRelationship struct {
	MoMoRef                    *MoMoRef
	WorkloadWorkloadDeployment *WorkloadWorkloadDeployment
}

// MoMoRefAsWorkloadWorkloadDeploymentRelationship is a convenience function that returns MoMoRef wrapped in WorkloadWorkloadDeploymentRelationship
func MoMoRefAsWorkloadWorkloadDeploymentRelationship(v *MoMoRef) WorkloadWorkloadDeploymentRelationship {
	return WorkloadWorkloadDeploymentRelationship{
		MoMoRef: v,
	}
}

// WorkloadWorkloadDeploymentAsWorkloadWorkloadDeploymentRelationship is a convenience function that returns WorkloadWorkloadDeployment wrapped in WorkloadWorkloadDeploymentRelationship
func WorkloadWorkloadDeploymentAsWorkloadWorkloadDeploymentRelationship(v *WorkloadWorkloadDeployment) WorkloadWorkloadDeploymentRelationship {
	return WorkloadWorkloadDeploymentRelationship{
		WorkloadWorkloadDeployment: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *WorkloadWorkloadDeploymentRelationship) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'mo.MoRef'
	if jsonDict["ClassId"] == "mo.MoRef" {
		// try to unmarshal JSON data into MoMoRef
		err = json.Unmarshal(data, &dst.MoMoRef)
		if err == nil {
			return nil // data stored in dst.MoMoRef, return on the first match
		} else {
			dst.MoMoRef = nil
			return fmt.Errorf("failed to unmarshal WorkloadWorkloadDeploymentRelationship as MoMoRef: %s", err.Error())
		}
	}

	// check if the discriminator value is 'workload.WorkloadDeployment'
	if jsonDict["ClassId"] == "workload.WorkloadDeployment" {
		// try to unmarshal JSON data into WorkloadWorkloadDeployment
		err = json.Unmarshal(data, &dst.WorkloadWorkloadDeployment)
		if err == nil {
			return nil // data stored in dst.WorkloadWorkloadDeployment, return on the first match
		} else {
			dst.WorkloadWorkloadDeployment = nil
			return fmt.Errorf("failed to unmarshal WorkloadWorkloadDeploymentRelationship as WorkloadWorkloadDeployment: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src WorkloadWorkloadDeploymentRelationship) MarshalJSON() ([]byte, error) {
	if src.MoMoRef != nil {
		return json.Marshal(&src.MoMoRef)
	}

	if src.WorkloadWorkloadDeployment != nil {
		return json.Marshal(&src.WorkloadWorkloadDeployment)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *WorkloadWorkloadDeploymentRelationship) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.MoMoRef != nil {
		return obj.MoMoRef
	}

	if obj.WorkloadWorkloadDeployment != nil {
		return obj.WorkloadWorkloadDeployment
	}

	// all schemas are nil
	return nil
}

type NullableWorkloadWorkloadDeploymentRelationship struct {
	value *WorkloadWorkloadDeploymentRelationship
	isSet bool
}

func (v NullableWorkloadWorkloadDeploymentRelationship) Get() *WorkloadWorkloadDeploymentRelationship {
	return v.value
}

func (v *NullableWorkloadWorkloadDeploymentRelationship) Set(val *WorkloadWorkloadDeploymentRelationship) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkloadWorkloadDeploymentRelationship) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkloadWorkloadDeploymentRelationship) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkloadWorkloadDeploymentRelationship(val *WorkloadWorkloadDeploymentRelationship) *NullableWorkloadWorkloadDeploymentRelationship {
	return &NullableWorkloadWorkloadDeploymentRelationship{value: val, isSet: true}
}

func (v NullableWorkloadWorkloadDeploymentRelationship) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkloadWorkloadDeploymentRelationship) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
