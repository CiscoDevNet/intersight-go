/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-15473
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the FabricSwitchClusterProfile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FabricSwitchClusterProfile{}

// FabricSwitchClusterProfile This specifies the configuration policies for a cluster of switches.
type FabricSwitchClusterProfile struct {
	PolicyAbstractProfile
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType    string                      `json:"ObjectType"`
	ConfigContext NullablePolicyConfigContext `json:"ConfigContext,omitempty"`
	// Deploy status of the switch cluster profile indicating if deployment has been initiated on all the members of the cluster profile. * `None` - Switch profiles not deployed on either of the switches. * `Complete` - Both switch profiles of the cluster profile are deployed. * `Partial` - Only one of the switch profiles of the cluster profile is deployed.
	DeployStatus *string `json:"DeployStatus,omitempty"`
	// Values indicating the switches on which the cluster profile has been deployed. 0 indicates that the profile has not been deployed on any switch, 1 indicates that the profile has been deployed on A, 2 indicates that it is deployed on B and 3 indicates that it is deployed on both. * `None` - Switch profiles not deployed on either of the fabric interconnects. * `A` - Switch profiles deployed only on fabric interconnect A. * `B` - Switch profiles deployed only on fabric interconnect B. * `AB` - Switch profiles deployed on both fabric interconnect A and B.
	DeployedSwitches *string `json:"DeployedSwitches,omitempty"`
	// Number of switch profiles that are part of this cluster profile.
	SwitchProfilesCount *int64                                       `json:"SwitchProfilesCount,omitempty"`
	Organization        NullableOrganizationOrganizationRelationship `json:"Organization,omitempty"`
	// An array of relationships to fabricSwitchProfile resources.
	SwitchProfiles       []FabricSwitchProfileRelationship `json:"SwitchProfiles,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FabricSwitchClusterProfile FabricSwitchClusterProfile

// NewFabricSwitchClusterProfile instantiates a new FabricSwitchClusterProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFabricSwitchClusterProfile(classId string, objectType string) *FabricSwitchClusterProfile {
	this := FabricSwitchClusterProfile{}
	this.ClassId = classId
	this.ObjectType = objectType
	var type_ string = "instance"
	this.Type = &type_
	return &this
}

// NewFabricSwitchClusterProfileWithDefaults instantiates a new FabricSwitchClusterProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFabricSwitchClusterProfileWithDefaults() *FabricSwitchClusterProfile {
	this := FabricSwitchClusterProfile{}
	var classId string = "fabric.SwitchClusterProfile"
	this.ClassId = classId
	var objectType string = "fabric.SwitchClusterProfile"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *FabricSwitchClusterProfile) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *FabricSwitchClusterProfile) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *FabricSwitchClusterProfile) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *FabricSwitchClusterProfile) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *FabricSwitchClusterProfile) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *FabricSwitchClusterProfile) SetObjectType(v string) {
	o.ObjectType = v
}

// GetConfigContext returns the ConfigContext field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FabricSwitchClusterProfile) GetConfigContext() PolicyConfigContext {
	if o == nil || IsNil(o.ConfigContext.Get()) {
		var ret PolicyConfigContext
		return ret
	}
	return *o.ConfigContext.Get()
}

// GetConfigContextOk returns a tuple with the ConfigContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FabricSwitchClusterProfile) GetConfigContextOk() (*PolicyConfigContext, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConfigContext.Get(), o.ConfigContext.IsSet()
}

// HasConfigContext returns a boolean if a field has been set.
func (o *FabricSwitchClusterProfile) HasConfigContext() bool {
	if o != nil && o.ConfigContext.IsSet() {
		return true
	}

	return false
}

// SetConfigContext gets a reference to the given NullablePolicyConfigContext and assigns it to the ConfigContext field.
func (o *FabricSwitchClusterProfile) SetConfigContext(v PolicyConfigContext) {
	o.ConfigContext.Set(&v)
}

// SetConfigContextNil sets the value for ConfigContext to be an explicit nil
func (o *FabricSwitchClusterProfile) SetConfigContextNil() {
	o.ConfigContext.Set(nil)
}

// UnsetConfigContext ensures that no value is present for ConfigContext, not even an explicit nil
func (o *FabricSwitchClusterProfile) UnsetConfigContext() {
	o.ConfigContext.Unset()
}

// GetDeployStatus returns the DeployStatus field value if set, zero value otherwise.
func (o *FabricSwitchClusterProfile) GetDeployStatus() string {
	if o == nil || IsNil(o.DeployStatus) {
		var ret string
		return ret
	}
	return *o.DeployStatus
}

// GetDeployStatusOk returns a tuple with the DeployStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricSwitchClusterProfile) GetDeployStatusOk() (*string, bool) {
	if o == nil || IsNil(o.DeployStatus) {
		return nil, false
	}
	return o.DeployStatus, true
}

// HasDeployStatus returns a boolean if a field has been set.
func (o *FabricSwitchClusterProfile) HasDeployStatus() bool {
	if o != nil && !IsNil(o.DeployStatus) {
		return true
	}

	return false
}

// SetDeployStatus gets a reference to the given string and assigns it to the DeployStatus field.
func (o *FabricSwitchClusterProfile) SetDeployStatus(v string) {
	o.DeployStatus = &v
}

// GetDeployedSwitches returns the DeployedSwitches field value if set, zero value otherwise.
func (o *FabricSwitchClusterProfile) GetDeployedSwitches() string {
	if o == nil || IsNil(o.DeployedSwitches) {
		var ret string
		return ret
	}
	return *o.DeployedSwitches
}

// GetDeployedSwitchesOk returns a tuple with the DeployedSwitches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricSwitchClusterProfile) GetDeployedSwitchesOk() (*string, bool) {
	if o == nil || IsNil(o.DeployedSwitches) {
		return nil, false
	}
	return o.DeployedSwitches, true
}

// HasDeployedSwitches returns a boolean if a field has been set.
func (o *FabricSwitchClusterProfile) HasDeployedSwitches() bool {
	if o != nil && !IsNil(o.DeployedSwitches) {
		return true
	}

	return false
}

// SetDeployedSwitches gets a reference to the given string and assigns it to the DeployedSwitches field.
func (o *FabricSwitchClusterProfile) SetDeployedSwitches(v string) {
	o.DeployedSwitches = &v
}

// GetSwitchProfilesCount returns the SwitchProfilesCount field value if set, zero value otherwise.
func (o *FabricSwitchClusterProfile) GetSwitchProfilesCount() int64 {
	if o == nil || IsNil(o.SwitchProfilesCount) {
		var ret int64
		return ret
	}
	return *o.SwitchProfilesCount
}

// GetSwitchProfilesCountOk returns a tuple with the SwitchProfilesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricSwitchClusterProfile) GetSwitchProfilesCountOk() (*int64, bool) {
	if o == nil || IsNil(o.SwitchProfilesCount) {
		return nil, false
	}
	return o.SwitchProfilesCount, true
}

// HasSwitchProfilesCount returns a boolean if a field has been set.
func (o *FabricSwitchClusterProfile) HasSwitchProfilesCount() bool {
	if o != nil && !IsNil(o.SwitchProfilesCount) {
		return true
	}

	return false
}

// SetSwitchProfilesCount gets a reference to the given int64 and assigns it to the SwitchProfilesCount field.
func (o *FabricSwitchClusterProfile) SetSwitchProfilesCount(v int64) {
	o.SwitchProfilesCount = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FabricSwitchClusterProfile) GetOrganization() OrganizationOrganizationRelationship {
	if o == nil || IsNil(o.Organization.Get()) {
		var ret OrganizationOrganizationRelationship
		return ret
	}
	return *o.Organization.Get()
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FabricSwitchClusterProfile) GetOrganizationOk() (*OrganizationOrganizationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Organization.Get(), o.Organization.IsSet()
}

// HasOrganization returns a boolean if a field has been set.
func (o *FabricSwitchClusterProfile) HasOrganization() bool {
	if o != nil && o.Organization.IsSet() {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given NullableOrganizationOrganizationRelationship and assigns it to the Organization field.
func (o *FabricSwitchClusterProfile) SetOrganization(v OrganizationOrganizationRelationship) {
	o.Organization.Set(&v)
}

// SetOrganizationNil sets the value for Organization to be an explicit nil
func (o *FabricSwitchClusterProfile) SetOrganizationNil() {
	o.Organization.Set(nil)
}

// UnsetOrganization ensures that no value is present for Organization, not even an explicit nil
func (o *FabricSwitchClusterProfile) UnsetOrganization() {
	o.Organization.Unset()
}

// GetSwitchProfiles returns the SwitchProfiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FabricSwitchClusterProfile) GetSwitchProfiles() []FabricSwitchProfileRelationship {
	if o == nil {
		var ret []FabricSwitchProfileRelationship
		return ret
	}
	return o.SwitchProfiles
}

// GetSwitchProfilesOk returns a tuple with the SwitchProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FabricSwitchClusterProfile) GetSwitchProfilesOk() ([]FabricSwitchProfileRelationship, bool) {
	if o == nil || IsNil(o.SwitchProfiles) {
		return nil, false
	}
	return o.SwitchProfiles, true
}

// HasSwitchProfiles returns a boolean if a field has been set.
func (o *FabricSwitchClusterProfile) HasSwitchProfiles() bool {
	if o != nil && IsNil(o.SwitchProfiles) {
		return true
	}

	return false
}

// SetSwitchProfiles gets a reference to the given []FabricSwitchProfileRelationship and assigns it to the SwitchProfiles field.
func (o *FabricSwitchClusterProfile) SetSwitchProfiles(v []FabricSwitchProfileRelationship) {
	o.SwitchProfiles = v
}

func (o FabricSwitchClusterProfile) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FabricSwitchClusterProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedPolicyAbstractProfile, errPolicyAbstractProfile := json.Marshal(o.PolicyAbstractProfile)
	if errPolicyAbstractProfile != nil {
		return map[string]interface{}{}, errPolicyAbstractProfile
	}
	errPolicyAbstractProfile = json.Unmarshal([]byte(serializedPolicyAbstractProfile), &toSerialize)
	if errPolicyAbstractProfile != nil {
		return map[string]interface{}{}, errPolicyAbstractProfile
	}
	toSerialize["ClassId"] = o.ClassId
	toSerialize["ObjectType"] = o.ObjectType
	if o.ConfigContext.IsSet() {
		toSerialize["ConfigContext"] = o.ConfigContext.Get()
	}
	if !IsNil(o.DeployStatus) {
		toSerialize["DeployStatus"] = o.DeployStatus
	}
	if !IsNil(o.DeployedSwitches) {
		toSerialize["DeployedSwitches"] = o.DeployedSwitches
	}
	if !IsNil(o.SwitchProfilesCount) {
		toSerialize["SwitchProfilesCount"] = o.SwitchProfilesCount
	}
	if o.Organization.IsSet() {
		toSerialize["Organization"] = o.Organization.Get()
	}
	if o.SwitchProfiles != nil {
		toSerialize["SwitchProfiles"] = o.SwitchProfiles
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FabricSwitchClusterProfile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	type FabricSwitchClusterProfileWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType    string                      `json:"ObjectType"`
		ConfigContext NullablePolicyConfigContext `json:"ConfigContext,omitempty"`
		// Deploy status of the switch cluster profile indicating if deployment has been initiated on all the members of the cluster profile. * `None` - Switch profiles not deployed on either of the switches. * `Complete` - Both switch profiles of the cluster profile are deployed. * `Partial` - Only one of the switch profiles of the cluster profile is deployed.
		DeployStatus *string `json:"DeployStatus,omitempty"`
		// Values indicating the switches on which the cluster profile has been deployed. 0 indicates that the profile has not been deployed on any switch, 1 indicates that the profile has been deployed on A, 2 indicates that it is deployed on B and 3 indicates that it is deployed on both. * `None` - Switch profiles not deployed on either of the fabric interconnects. * `A` - Switch profiles deployed only on fabric interconnect A. * `B` - Switch profiles deployed only on fabric interconnect B. * `AB` - Switch profiles deployed on both fabric interconnect A and B.
		DeployedSwitches *string `json:"DeployedSwitches,omitempty"`
		// Number of switch profiles that are part of this cluster profile.
		SwitchProfilesCount *int64                                       `json:"SwitchProfilesCount,omitempty"`
		Organization        NullableOrganizationOrganizationRelationship `json:"Organization,omitempty"`
		// An array of relationships to fabricSwitchProfile resources.
		SwitchProfiles []FabricSwitchProfileRelationship `json:"SwitchProfiles,omitempty"`
	}

	varFabricSwitchClusterProfileWithoutEmbeddedStruct := FabricSwitchClusterProfileWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varFabricSwitchClusterProfileWithoutEmbeddedStruct)
	if err == nil {
		varFabricSwitchClusterProfile := _FabricSwitchClusterProfile{}
		varFabricSwitchClusterProfile.ClassId = varFabricSwitchClusterProfileWithoutEmbeddedStruct.ClassId
		varFabricSwitchClusterProfile.ObjectType = varFabricSwitchClusterProfileWithoutEmbeddedStruct.ObjectType
		varFabricSwitchClusterProfile.ConfigContext = varFabricSwitchClusterProfileWithoutEmbeddedStruct.ConfigContext
		varFabricSwitchClusterProfile.DeployStatus = varFabricSwitchClusterProfileWithoutEmbeddedStruct.DeployStatus
		varFabricSwitchClusterProfile.DeployedSwitches = varFabricSwitchClusterProfileWithoutEmbeddedStruct.DeployedSwitches
		varFabricSwitchClusterProfile.SwitchProfilesCount = varFabricSwitchClusterProfileWithoutEmbeddedStruct.SwitchProfilesCount
		varFabricSwitchClusterProfile.Organization = varFabricSwitchClusterProfileWithoutEmbeddedStruct.Organization
		varFabricSwitchClusterProfile.SwitchProfiles = varFabricSwitchClusterProfileWithoutEmbeddedStruct.SwitchProfiles
		*o = FabricSwitchClusterProfile(varFabricSwitchClusterProfile)
	} else {
		return err
	}

	varFabricSwitchClusterProfile := _FabricSwitchClusterProfile{}

	err = json.Unmarshal(data, &varFabricSwitchClusterProfile)
	if err == nil {
		o.PolicyAbstractProfile = varFabricSwitchClusterProfile.PolicyAbstractProfile
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "ConfigContext")
		delete(additionalProperties, "DeployStatus")
		delete(additionalProperties, "DeployedSwitches")
		delete(additionalProperties, "SwitchProfilesCount")
		delete(additionalProperties, "Organization")
		delete(additionalProperties, "SwitchProfiles")

		// remove fields from embedded structs
		reflectPolicyAbstractProfile := reflect.ValueOf(o.PolicyAbstractProfile)
		for i := 0; i < reflectPolicyAbstractProfile.Type().NumField(); i++ {
			t := reflectPolicyAbstractProfile.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFabricSwitchClusterProfile struct {
	value *FabricSwitchClusterProfile
	isSet bool
}

func (v NullableFabricSwitchClusterProfile) Get() *FabricSwitchClusterProfile {
	return v.value
}

func (v *NullableFabricSwitchClusterProfile) Set(val *FabricSwitchClusterProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableFabricSwitchClusterProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableFabricSwitchClusterProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFabricSwitchClusterProfile(val *FabricSwitchClusterProfile) *NullableFabricSwitchClusterProfile {
	return &NullableFabricSwitchClusterProfile{value: val, isSet: true}
}

func (v NullableFabricSwitchClusterProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFabricSwitchClusterProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
