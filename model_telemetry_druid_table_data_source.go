/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-18012
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// checks if the TelemetryDruidTableDataSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryDruidTableDataSource{}

// TelemetryDruidTableDataSource The table data source is the most common datasource type. They are split up into segments, distributed around the cluster, and queried in parallel.
type TelemetryDruidTableDataSource struct {
	// The type of data source.
	Type string `json:"type"`
	// The name of a data source.
	Name                 string `json:"name"`
	AdditionalProperties map[string]interface{}
}

type _TelemetryDruidTableDataSource TelemetryDruidTableDataSource

// NewTelemetryDruidTableDataSource instantiates a new TelemetryDruidTableDataSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryDruidTableDataSource(type_ string, name string) *TelemetryDruidTableDataSource {
	this := TelemetryDruidTableDataSource{}
	this.Type = type_
	this.Name = name
	return &this
}

// NewTelemetryDruidTableDataSourceWithDefaults instantiates a new TelemetryDruidTableDataSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryDruidTableDataSourceWithDefaults() *TelemetryDruidTableDataSource {
	this := TelemetryDruidTableDataSource{}
	return &this
}

// GetType returns the Type field value
func (o *TelemetryDruidTableDataSource) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidTableDataSource) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TelemetryDruidTableDataSource) SetType(v string) {
	o.Type = v
}

// GetName returns the Name field value
func (o *TelemetryDruidTableDataSource) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidTableDataSource) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TelemetryDruidTableDataSource) SetName(v string) {
	o.Name = v
}

func (o TelemetryDruidTableDataSource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryDruidTableDataSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["name"] = o.Name

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TelemetryDruidTableDataSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"name",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varTelemetryDruidTableDataSource := _TelemetryDruidTableDataSource{}

	err = json.Unmarshal(data, &varTelemetryDruidTableDataSource)

	if err != nil {
		return err
	}

	*o = TelemetryDruidTableDataSource(varTelemetryDruidTableDataSource)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTelemetryDruidTableDataSource struct {
	value *TelemetryDruidTableDataSource
	isSet bool
}

func (v NullableTelemetryDruidTableDataSource) Get() *TelemetryDruidTableDataSource {
	return v.value
}

func (v *NullableTelemetryDruidTableDataSource) Set(val *TelemetryDruidTableDataSource) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidTableDataSource) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidTableDataSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidTableDataSource(val *TelemetryDruidTableDataSource) *NullableTelemetryDruidTableDataSource {
	return &NullableTelemetryDruidTableDataSource{value: val, isSet: true}
}

func (v NullableTelemetryDruidTableDataSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidTableDataSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
