/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-16342
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// checks if the TelemetryDruidCountAggregator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryDruidCountAggregator{}

// TelemetryDruidCountAggregator Computes the count of Druid rows that match the filters. The count aggregator counts the number of Druid rows, which does not always reflect the number of raw events ingested. This is because Druid can be configured to roll up data at ingestion time To count the number of ingested rows of data, include a count aggregator at ingestion time, and a longSum aggregator at query time.
type TelemetryDruidCountAggregator struct {
	// The aggregator type.
	Type string `json:"type"`
	// the output name
	Name                 *string `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TelemetryDruidCountAggregator TelemetryDruidCountAggregator

// NewTelemetryDruidCountAggregator instantiates a new TelemetryDruidCountAggregator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryDruidCountAggregator(type_ string) *TelemetryDruidCountAggregator {
	this := TelemetryDruidCountAggregator{}
	this.Type = type_
	return &this
}

// NewTelemetryDruidCountAggregatorWithDefaults instantiates a new TelemetryDruidCountAggregator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryDruidCountAggregatorWithDefaults() *TelemetryDruidCountAggregator {
	this := TelemetryDruidCountAggregator{}
	return &this
}

// GetType returns the Type field value
func (o *TelemetryDruidCountAggregator) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidCountAggregator) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TelemetryDruidCountAggregator) SetType(v string) {
	o.Type = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TelemetryDruidCountAggregator) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidCountAggregator) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TelemetryDruidCountAggregator) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TelemetryDruidCountAggregator) SetName(v string) {
	o.Name = &v
}

func (o TelemetryDruidCountAggregator) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryDruidCountAggregator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TelemetryDruidCountAggregator) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTelemetryDruidCountAggregator := _TelemetryDruidCountAggregator{}

	err = json.Unmarshal(data, &varTelemetryDruidCountAggregator)

	if err != nil {
		return err
	}

	*o = TelemetryDruidCountAggregator(varTelemetryDruidCountAggregator)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTelemetryDruidCountAggregator struct {
	value *TelemetryDruidCountAggregator
	isSet bool
}

func (v NullableTelemetryDruidCountAggregator) Get() *TelemetryDruidCountAggregator {
	return v.value
}

func (v *NullableTelemetryDruidCountAggregator) Set(val *TelemetryDruidCountAggregator) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidCountAggregator) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidCountAggregator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidCountAggregator(val *TelemetryDruidCountAggregator) *NullableTelemetryDruidCountAggregator {
	return &NullableTelemetryDruidCountAggregator{value: val, isSet: true}
}

func (v NullableTelemetryDruidCountAggregator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidCountAggregator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
