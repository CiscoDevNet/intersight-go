/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-14968
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// checks if the TelemetryDruidHavingNumericFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryDruidHavingNumericFilter{}

// TelemetryDruidHavingNumericFilter The simplest having clause is a numeric filter. Numeric filters can be used as the base filters for more complex boolean expressions of filters.
type TelemetryDruidHavingNumericFilter struct {
	// The having filter type.
	Type string `json:"type"`
	// aggregate metric
	Aggregation          string  `json:"aggregation"`
	Value                float64 `json:"value"`
	AdditionalProperties map[string]interface{}
}

type _TelemetryDruidHavingNumericFilter TelemetryDruidHavingNumericFilter

// NewTelemetryDruidHavingNumericFilter instantiates a new TelemetryDruidHavingNumericFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryDruidHavingNumericFilter(type_ string, aggregation string, value float64) *TelemetryDruidHavingNumericFilter {
	this := TelemetryDruidHavingNumericFilter{}
	this.Type = type_
	this.Aggregation = aggregation
	this.Value = value
	return &this
}

// NewTelemetryDruidHavingNumericFilterWithDefaults instantiates a new TelemetryDruidHavingNumericFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryDruidHavingNumericFilterWithDefaults() *TelemetryDruidHavingNumericFilter {
	this := TelemetryDruidHavingNumericFilter{}
	return &this
}

// GetType returns the Type field value
func (o *TelemetryDruidHavingNumericFilter) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidHavingNumericFilter) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TelemetryDruidHavingNumericFilter) SetType(v string) {
	o.Type = v
}

// GetAggregation returns the Aggregation field value
func (o *TelemetryDruidHavingNumericFilter) GetAggregation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Aggregation
}

// GetAggregationOk returns a tuple with the Aggregation field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidHavingNumericFilter) GetAggregationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Aggregation, true
}

// SetAggregation sets field value
func (o *TelemetryDruidHavingNumericFilter) SetAggregation(v string) {
	o.Aggregation = v
}

// GetValue returns the Value field value
func (o *TelemetryDruidHavingNumericFilter) GetValue() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidHavingNumericFilter) GetValueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *TelemetryDruidHavingNumericFilter) SetValue(v float64) {
	o.Value = v
}

func (o TelemetryDruidHavingNumericFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryDruidHavingNumericFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["aggregation"] = o.Aggregation
	toSerialize["value"] = o.Value

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TelemetryDruidHavingNumericFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"aggregation",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTelemetryDruidHavingNumericFilter := _TelemetryDruidHavingNumericFilter{}

	err = json.Unmarshal(data, &varTelemetryDruidHavingNumericFilter)

	if err != nil {
		return err
	}

	*o = TelemetryDruidHavingNumericFilter(varTelemetryDruidHavingNumericFilter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "aggregation")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTelemetryDruidHavingNumericFilter struct {
	value *TelemetryDruidHavingNumericFilter
	isSet bool
}

func (v NullableTelemetryDruidHavingNumericFilter) Get() *TelemetryDruidHavingNumericFilter {
	return v.value
}

func (v *NullableTelemetryDruidHavingNumericFilter) Set(val *TelemetryDruidHavingNumericFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidHavingNumericFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidHavingNumericFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidHavingNumericFilter(val *TelemetryDruidHavingNumericFilter) *NullableTelemetryDruidHavingNumericFilter {
	return &NullableTelemetryDruidHavingNumericFilter{value: val, isSet: true}
}

func (v NullableTelemetryDruidHavingNumericFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidHavingNumericFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
