/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-14968
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// checks if the TelemetryDruidInsensitiveContainsSearchSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryDruidInsensitiveContainsSearchSpec{}

// TelemetryDruidInsensitiveContainsSearchSpec The specification for a Druid 'insensitive_contains' search
type TelemetryDruidInsensitiveContainsSearchSpec struct {
	Type string `json:"type"`
	// The value to match.  If any part of a dimension value contains the value specified in this search query spec, regardless of case, a \"match\" occurs.
	Value                string `json:"value"`
	AdditionalProperties map[string]interface{}
}

type _TelemetryDruidInsensitiveContainsSearchSpec TelemetryDruidInsensitiveContainsSearchSpec

// NewTelemetryDruidInsensitiveContainsSearchSpec instantiates a new TelemetryDruidInsensitiveContainsSearchSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryDruidInsensitiveContainsSearchSpec(type_ string, value string) *TelemetryDruidInsensitiveContainsSearchSpec {
	this := TelemetryDruidInsensitiveContainsSearchSpec{}
	this.Type = type_
	this.Value = value
	return &this
}

// NewTelemetryDruidInsensitiveContainsSearchSpecWithDefaults instantiates a new TelemetryDruidInsensitiveContainsSearchSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryDruidInsensitiveContainsSearchSpecWithDefaults() *TelemetryDruidInsensitiveContainsSearchSpec {
	this := TelemetryDruidInsensitiveContainsSearchSpec{}
	return &this
}

// GetType returns the Type field value
func (o *TelemetryDruidInsensitiveContainsSearchSpec) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidInsensitiveContainsSearchSpec) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TelemetryDruidInsensitiveContainsSearchSpec) SetType(v string) {
	o.Type = v
}

// GetValue returns the Value field value
func (o *TelemetryDruidInsensitiveContainsSearchSpec) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidInsensitiveContainsSearchSpec) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *TelemetryDruidInsensitiveContainsSearchSpec) SetValue(v string) {
	o.Value = v
}

func (o TelemetryDruidInsensitiveContainsSearchSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryDruidInsensitiveContainsSearchSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["value"] = o.Value

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TelemetryDruidInsensitiveContainsSearchSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTelemetryDruidInsensitiveContainsSearchSpec := _TelemetryDruidInsensitiveContainsSearchSpec{}

	err = json.Unmarshal(data, &varTelemetryDruidInsensitiveContainsSearchSpec)

	if err != nil {
		return err
	}

	*o = TelemetryDruidInsensitiveContainsSearchSpec(varTelemetryDruidInsensitiveContainsSearchSpec)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTelemetryDruidInsensitiveContainsSearchSpec struct {
	value *TelemetryDruidInsensitiveContainsSearchSpec
	isSet bool
}

func (v NullableTelemetryDruidInsensitiveContainsSearchSpec) Get() *TelemetryDruidInsensitiveContainsSearchSpec {
	return v.value
}

func (v *NullableTelemetryDruidInsensitiveContainsSearchSpec) Set(val *TelemetryDruidInsensitiveContainsSearchSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidInsensitiveContainsSearchSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidInsensitiveContainsSearchSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidInsensitiveContainsSearchSpec(val *TelemetryDruidInsensitiveContainsSearchSpec) *NullableTelemetryDruidInsensitiveContainsSearchSpec {
	return &NullableTelemetryDruidInsensitiveContainsSearchSpec{value: val, isSet: true}
}

func (v NullableTelemetryDruidInsensitiveContainsSearchSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidInsensitiveContainsSearchSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
