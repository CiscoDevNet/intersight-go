/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-17769
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the CatalystsdwanVedgeDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalystsdwanVedgeDevice{}

// CatalystsdwanVedgeDevice Details for the Catalyst SDWAN Vedge entities.
type CatalystsdwanVedgeDevice struct {
	CatalystsdwanInventoryEntity
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The Catalyst SDWAN device config status message.
	ConfigStatusMessage *string `json:"ConfigStatusMessage,omitempty"`
	// UUID for the Catalyst SDWAN Vedge Device.
	DeviceId *string `json:"DeviceId,omitempty"`
	// The Catalyst SDWAN device model.
	DeviceModel *string `json:"DeviceModel,omitempty"`
	// The Catalyst SDWAN device state.
	DeviceState *string `json:"DeviceState,omitempty"`
	// The Catalyst SDWAN device type.
	DeviceType *string `json:"DeviceType,omitempty"`
	// The Catalyst SDWAN device host name.
	HostName *string `json:"HostName,omitempty"`
	// The Catalyst SDWAN device platform family.
	PlatformFamily *string `json:"PlatformFamily,omitempty"`
	// The Catalyst SDWAN device reachability.
	Reachability *string `json:"Reachability,omitempty"`
	// The Catalyst SDWAN device serial number.
	SerialNumber *string `json:"SerialNumber,omitempty"`
	// The Catalyst SDWAN device site id.
	SiteId *string `json:"SiteId,omitempty"`
	// The Catalyst SDWAN device site name.
	SiteName *string `json:"SiteName,omitempty"`
	// The Catalyst SDWAN device sp organization name.
	SpOrganizationName *string `json:"SpOrganizationName,omitempty"`
	// The Catalyst SDWAN device system IP.
	SystemIp *string `json:"SystemIp,omitempty"`
	// The Catalyst SDWAN device validity.
	Validity *string `json:"Validity,omitempty"`
	// The Catalyst SDWAN device version.
	Version              *string `json:"Version,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CatalystsdwanVedgeDevice CatalystsdwanVedgeDevice

// NewCatalystsdwanVedgeDevice instantiates a new CatalystsdwanVedgeDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalystsdwanVedgeDevice(classId string, objectType string) *CatalystsdwanVedgeDevice {
	this := CatalystsdwanVedgeDevice{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewCatalystsdwanVedgeDeviceWithDefaults instantiates a new CatalystsdwanVedgeDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalystsdwanVedgeDeviceWithDefaults() *CatalystsdwanVedgeDevice {
	this := CatalystsdwanVedgeDevice{}
	var classId string = "catalystsdwan.VedgeDevice"
	this.ClassId = classId
	var objectType string = "catalystsdwan.VedgeDevice"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *CatalystsdwanVedgeDevice) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *CatalystsdwanVedgeDevice) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *CatalystsdwanVedgeDevice) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *CatalystsdwanVedgeDevice) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *CatalystsdwanVedgeDevice) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *CatalystsdwanVedgeDevice) SetObjectType(v string) {
	o.ObjectType = v
}

// GetConfigStatusMessage returns the ConfigStatusMessage field value if set, zero value otherwise.
func (o *CatalystsdwanVedgeDevice) GetConfigStatusMessage() string {
	if o == nil || IsNil(o.ConfigStatusMessage) {
		var ret string
		return ret
	}
	return *o.ConfigStatusMessage
}

// GetConfigStatusMessageOk returns a tuple with the ConfigStatusMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalystsdwanVedgeDevice) GetConfigStatusMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigStatusMessage) {
		return nil, false
	}
	return o.ConfigStatusMessage, true
}

// HasConfigStatusMessage returns a boolean if a field has been set.
func (o *CatalystsdwanVedgeDevice) HasConfigStatusMessage() bool {
	if o != nil && !IsNil(o.ConfigStatusMessage) {
		return true
	}

	return false
}

// SetConfigStatusMessage gets a reference to the given string and assigns it to the ConfigStatusMessage field.
func (o *CatalystsdwanVedgeDevice) SetConfigStatusMessage(v string) {
	o.ConfigStatusMessage = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *CatalystsdwanVedgeDevice) GetDeviceId() string {
	if o == nil || IsNil(o.DeviceId) {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalystsdwanVedgeDevice) GetDeviceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *CatalystsdwanVedgeDevice) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *CatalystsdwanVedgeDevice) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetDeviceModel returns the DeviceModel field value if set, zero value otherwise.
func (o *CatalystsdwanVedgeDevice) GetDeviceModel() string {
	if o == nil || IsNil(o.DeviceModel) {
		var ret string
		return ret
	}
	return *o.DeviceModel
}

// GetDeviceModelOk returns a tuple with the DeviceModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalystsdwanVedgeDevice) GetDeviceModelOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceModel) {
		return nil, false
	}
	return o.DeviceModel, true
}

// HasDeviceModel returns a boolean if a field has been set.
func (o *CatalystsdwanVedgeDevice) HasDeviceModel() bool {
	if o != nil && !IsNil(o.DeviceModel) {
		return true
	}

	return false
}

// SetDeviceModel gets a reference to the given string and assigns it to the DeviceModel field.
func (o *CatalystsdwanVedgeDevice) SetDeviceModel(v string) {
	o.DeviceModel = &v
}

// GetDeviceState returns the DeviceState field value if set, zero value otherwise.
func (o *CatalystsdwanVedgeDevice) GetDeviceState() string {
	if o == nil || IsNil(o.DeviceState) {
		var ret string
		return ret
	}
	return *o.DeviceState
}

// GetDeviceStateOk returns a tuple with the DeviceState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalystsdwanVedgeDevice) GetDeviceStateOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceState) {
		return nil, false
	}
	return o.DeviceState, true
}

// HasDeviceState returns a boolean if a field has been set.
func (o *CatalystsdwanVedgeDevice) HasDeviceState() bool {
	if o != nil && !IsNil(o.DeviceState) {
		return true
	}

	return false
}

// SetDeviceState gets a reference to the given string and assigns it to the DeviceState field.
func (o *CatalystsdwanVedgeDevice) SetDeviceState(v string) {
	o.DeviceState = &v
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise.
func (o *CatalystsdwanVedgeDevice) GetDeviceType() string {
	if o == nil || IsNil(o.DeviceType) {
		var ret string
		return ret
	}
	return *o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalystsdwanVedgeDevice) GetDeviceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceType) {
		return nil, false
	}
	return o.DeviceType, true
}

// HasDeviceType returns a boolean if a field has been set.
func (o *CatalystsdwanVedgeDevice) HasDeviceType() bool {
	if o != nil && !IsNil(o.DeviceType) {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given string and assigns it to the DeviceType field.
func (o *CatalystsdwanVedgeDevice) SetDeviceType(v string) {
	o.DeviceType = &v
}

// GetHostName returns the HostName field value if set, zero value otherwise.
func (o *CatalystsdwanVedgeDevice) GetHostName() string {
	if o == nil || IsNil(o.HostName) {
		var ret string
		return ret
	}
	return *o.HostName
}

// GetHostNameOk returns a tuple with the HostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalystsdwanVedgeDevice) GetHostNameOk() (*string, bool) {
	if o == nil || IsNil(o.HostName) {
		return nil, false
	}
	return o.HostName, true
}

// HasHostName returns a boolean if a field has been set.
func (o *CatalystsdwanVedgeDevice) HasHostName() bool {
	if o != nil && !IsNil(o.HostName) {
		return true
	}

	return false
}

// SetHostName gets a reference to the given string and assigns it to the HostName field.
func (o *CatalystsdwanVedgeDevice) SetHostName(v string) {
	o.HostName = &v
}

// GetPlatformFamily returns the PlatformFamily field value if set, zero value otherwise.
func (o *CatalystsdwanVedgeDevice) GetPlatformFamily() string {
	if o == nil || IsNil(o.PlatformFamily) {
		var ret string
		return ret
	}
	return *o.PlatformFamily
}

// GetPlatformFamilyOk returns a tuple with the PlatformFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalystsdwanVedgeDevice) GetPlatformFamilyOk() (*string, bool) {
	if o == nil || IsNil(o.PlatformFamily) {
		return nil, false
	}
	return o.PlatformFamily, true
}

// HasPlatformFamily returns a boolean if a field has been set.
func (o *CatalystsdwanVedgeDevice) HasPlatformFamily() bool {
	if o != nil && !IsNil(o.PlatformFamily) {
		return true
	}

	return false
}

// SetPlatformFamily gets a reference to the given string and assigns it to the PlatformFamily field.
func (o *CatalystsdwanVedgeDevice) SetPlatformFamily(v string) {
	o.PlatformFamily = &v
}

// GetReachability returns the Reachability field value if set, zero value otherwise.
func (o *CatalystsdwanVedgeDevice) GetReachability() string {
	if o == nil || IsNil(o.Reachability) {
		var ret string
		return ret
	}
	return *o.Reachability
}

// GetReachabilityOk returns a tuple with the Reachability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalystsdwanVedgeDevice) GetReachabilityOk() (*string, bool) {
	if o == nil || IsNil(o.Reachability) {
		return nil, false
	}
	return o.Reachability, true
}

// HasReachability returns a boolean if a field has been set.
func (o *CatalystsdwanVedgeDevice) HasReachability() bool {
	if o != nil && !IsNil(o.Reachability) {
		return true
	}

	return false
}

// SetReachability gets a reference to the given string and assigns it to the Reachability field.
func (o *CatalystsdwanVedgeDevice) SetReachability(v string) {
	o.Reachability = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *CatalystsdwanVedgeDevice) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalystsdwanVedgeDevice) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *CatalystsdwanVedgeDevice) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *CatalystsdwanVedgeDevice) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *CatalystsdwanVedgeDevice) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalystsdwanVedgeDevice) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *CatalystsdwanVedgeDevice) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *CatalystsdwanVedgeDevice) SetSiteId(v string) {
	o.SiteId = &v
}

// GetSiteName returns the SiteName field value if set, zero value otherwise.
func (o *CatalystsdwanVedgeDevice) GetSiteName() string {
	if o == nil || IsNil(o.SiteName) {
		var ret string
		return ret
	}
	return *o.SiteName
}

// GetSiteNameOk returns a tuple with the SiteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalystsdwanVedgeDevice) GetSiteNameOk() (*string, bool) {
	if o == nil || IsNil(o.SiteName) {
		return nil, false
	}
	return o.SiteName, true
}

// HasSiteName returns a boolean if a field has been set.
func (o *CatalystsdwanVedgeDevice) HasSiteName() bool {
	if o != nil && !IsNil(o.SiteName) {
		return true
	}

	return false
}

// SetSiteName gets a reference to the given string and assigns it to the SiteName field.
func (o *CatalystsdwanVedgeDevice) SetSiteName(v string) {
	o.SiteName = &v
}

// GetSpOrganizationName returns the SpOrganizationName field value if set, zero value otherwise.
func (o *CatalystsdwanVedgeDevice) GetSpOrganizationName() string {
	if o == nil || IsNil(o.SpOrganizationName) {
		var ret string
		return ret
	}
	return *o.SpOrganizationName
}

// GetSpOrganizationNameOk returns a tuple with the SpOrganizationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalystsdwanVedgeDevice) GetSpOrganizationNameOk() (*string, bool) {
	if o == nil || IsNil(o.SpOrganizationName) {
		return nil, false
	}
	return o.SpOrganizationName, true
}

// HasSpOrganizationName returns a boolean if a field has been set.
func (o *CatalystsdwanVedgeDevice) HasSpOrganizationName() bool {
	if o != nil && !IsNil(o.SpOrganizationName) {
		return true
	}

	return false
}

// SetSpOrganizationName gets a reference to the given string and assigns it to the SpOrganizationName field.
func (o *CatalystsdwanVedgeDevice) SetSpOrganizationName(v string) {
	o.SpOrganizationName = &v
}

// GetSystemIp returns the SystemIp field value if set, zero value otherwise.
func (o *CatalystsdwanVedgeDevice) GetSystemIp() string {
	if o == nil || IsNil(o.SystemIp) {
		var ret string
		return ret
	}
	return *o.SystemIp
}

// GetSystemIpOk returns a tuple with the SystemIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalystsdwanVedgeDevice) GetSystemIpOk() (*string, bool) {
	if o == nil || IsNil(o.SystemIp) {
		return nil, false
	}
	return o.SystemIp, true
}

// HasSystemIp returns a boolean if a field has been set.
func (o *CatalystsdwanVedgeDevice) HasSystemIp() bool {
	if o != nil && !IsNil(o.SystemIp) {
		return true
	}

	return false
}

// SetSystemIp gets a reference to the given string and assigns it to the SystemIp field.
func (o *CatalystsdwanVedgeDevice) SetSystemIp(v string) {
	o.SystemIp = &v
}

// GetValidity returns the Validity field value if set, zero value otherwise.
func (o *CatalystsdwanVedgeDevice) GetValidity() string {
	if o == nil || IsNil(o.Validity) {
		var ret string
		return ret
	}
	return *o.Validity
}

// GetValidityOk returns a tuple with the Validity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalystsdwanVedgeDevice) GetValidityOk() (*string, bool) {
	if o == nil || IsNil(o.Validity) {
		return nil, false
	}
	return o.Validity, true
}

// HasValidity returns a boolean if a field has been set.
func (o *CatalystsdwanVedgeDevice) HasValidity() bool {
	if o != nil && !IsNil(o.Validity) {
		return true
	}

	return false
}

// SetValidity gets a reference to the given string and assigns it to the Validity field.
func (o *CatalystsdwanVedgeDevice) SetValidity(v string) {
	o.Validity = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *CatalystsdwanVedgeDevice) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalystsdwanVedgeDevice) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *CatalystsdwanVedgeDevice) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *CatalystsdwanVedgeDevice) SetVersion(v string) {
	o.Version = &v
}

func (o CatalystsdwanVedgeDevice) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalystsdwanVedgeDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedCatalystsdwanInventoryEntity, errCatalystsdwanInventoryEntity := json.Marshal(o.CatalystsdwanInventoryEntity)
	if errCatalystsdwanInventoryEntity != nil {
		return map[string]interface{}{}, errCatalystsdwanInventoryEntity
	}
	errCatalystsdwanInventoryEntity = json.Unmarshal([]byte(serializedCatalystsdwanInventoryEntity), &toSerialize)
	if errCatalystsdwanInventoryEntity != nil {
		return map[string]interface{}{}, errCatalystsdwanInventoryEntity
	}
	toSerialize["ClassId"] = o.ClassId
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.ConfigStatusMessage) {
		toSerialize["ConfigStatusMessage"] = o.ConfigStatusMessage
	}
	if !IsNil(o.DeviceId) {
		toSerialize["DeviceId"] = o.DeviceId
	}
	if !IsNil(o.DeviceModel) {
		toSerialize["DeviceModel"] = o.DeviceModel
	}
	if !IsNil(o.DeviceState) {
		toSerialize["DeviceState"] = o.DeviceState
	}
	if !IsNil(o.DeviceType) {
		toSerialize["DeviceType"] = o.DeviceType
	}
	if !IsNil(o.HostName) {
		toSerialize["HostName"] = o.HostName
	}
	if !IsNil(o.PlatformFamily) {
		toSerialize["PlatformFamily"] = o.PlatformFamily
	}
	if !IsNil(o.Reachability) {
		toSerialize["Reachability"] = o.Reachability
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["SerialNumber"] = o.SerialNumber
	}
	if !IsNil(o.SiteId) {
		toSerialize["SiteId"] = o.SiteId
	}
	if !IsNil(o.SiteName) {
		toSerialize["SiteName"] = o.SiteName
	}
	if !IsNil(o.SpOrganizationName) {
		toSerialize["SpOrganizationName"] = o.SpOrganizationName
	}
	if !IsNil(o.SystemIp) {
		toSerialize["SystemIp"] = o.SystemIp
	}
	if !IsNil(o.Validity) {
		toSerialize["Validity"] = o.Validity
	}
	if !IsNil(o.Version) {
		toSerialize["Version"] = o.Version
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CatalystsdwanVedgeDevice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	type CatalystsdwanVedgeDeviceWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The Catalyst SDWAN device config status message.
		ConfigStatusMessage *string `json:"ConfigStatusMessage,omitempty"`
		// UUID for the Catalyst SDWAN Vedge Device.
		DeviceId *string `json:"DeviceId,omitempty"`
		// The Catalyst SDWAN device model.
		DeviceModel *string `json:"DeviceModel,omitempty"`
		// The Catalyst SDWAN device state.
		DeviceState *string `json:"DeviceState,omitempty"`
		// The Catalyst SDWAN device type.
		DeviceType *string `json:"DeviceType,omitempty"`
		// The Catalyst SDWAN device host name.
		HostName *string `json:"HostName,omitempty"`
		// The Catalyst SDWAN device platform family.
		PlatformFamily *string `json:"PlatformFamily,omitempty"`
		// The Catalyst SDWAN device reachability.
		Reachability *string `json:"Reachability,omitempty"`
		// The Catalyst SDWAN device serial number.
		SerialNumber *string `json:"SerialNumber,omitempty"`
		// The Catalyst SDWAN device site id.
		SiteId *string `json:"SiteId,omitempty"`
		// The Catalyst SDWAN device site name.
		SiteName *string `json:"SiteName,omitempty"`
		// The Catalyst SDWAN device sp organization name.
		SpOrganizationName *string `json:"SpOrganizationName,omitempty"`
		// The Catalyst SDWAN device system IP.
		SystemIp *string `json:"SystemIp,omitempty"`
		// The Catalyst SDWAN device validity.
		Validity *string `json:"Validity,omitempty"`
		// The Catalyst SDWAN device version.
		Version *string `json:"Version,omitempty"`
	}

	varCatalystsdwanVedgeDeviceWithoutEmbeddedStruct := CatalystsdwanVedgeDeviceWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varCatalystsdwanVedgeDeviceWithoutEmbeddedStruct)
	if err == nil {
		varCatalystsdwanVedgeDevice := _CatalystsdwanVedgeDevice{}
		varCatalystsdwanVedgeDevice.ClassId = varCatalystsdwanVedgeDeviceWithoutEmbeddedStruct.ClassId
		varCatalystsdwanVedgeDevice.ObjectType = varCatalystsdwanVedgeDeviceWithoutEmbeddedStruct.ObjectType
		varCatalystsdwanVedgeDevice.ConfigStatusMessage = varCatalystsdwanVedgeDeviceWithoutEmbeddedStruct.ConfigStatusMessage
		varCatalystsdwanVedgeDevice.DeviceId = varCatalystsdwanVedgeDeviceWithoutEmbeddedStruct.DeviceId
		varCatalystsdwanVedgeDevice.DeviceModel = varCatalystsdwanVedgeDeviceWithoutEmbeddedStruct.DeviceModel
		varCatalystsdwanVedgeDevice.DeviceState = varCatalystsdwanVedgeDeviceWithoutEmbeddedStruct.DeviceState
		varCatalystsdwanVedgeDevice.DeviceType = varCatalystsdwanVedgeDeviceWithoutEmbeddedStruct.DeviceType
		varCatalystsdwanVedgeDevice.HostName = varCatalystsdwanVedgeDeviceWithoutEmbeddedStruct.HostName
		varCatalystsdwanVedgeDevice.PlatformFamily = varCatalystsdwanVedgeDeviceWithoutEmbeddedStruct.PlatformFamily
		varCatalystsdwanVedgeDevice.Reachability = varCatalystsdwanVedgeDeviceWithoutEmbeddedStruct.Reachability
		varCatalystsdwanVedgeDevice.SerialNumber = varCatalystsdwanVedgeDeviceWithoutEmbeddedStruct.SerialNumber
		varCatalystsdwanVedgeDevice.SiteId = varCatalystsdwanVedgeDeviceWithoutEmbeddedStruct.SiteId
		varCatalystsdwanVedgeDevice.SiteName = varCatalystsdwanVedgeDeviceWithoutEmbeddedStruct.SiteName
		varCatalystsdwanVedgeDevice.SpOrganizationName = varCatalystsdwanVedgeDeviceWithoutEmbeddedStruct.SpOrganizationName
		varCatalystsdwanVedgeDevice.SystemIp = varCatalystsdwanVedgeDeviceWithoutEmbeddedStruct.SystemIp
		varCatalystsdwanVedgeDevice.Validity = varCatalystsdwanVedgeDeviceWithoutEmbeddedStruct.Validity
		varCatalystsdwanVedgeDevice.Version = varCatalystsdwanVedgeDeviceWithoutEmbeddedStruct.Version
		*o = CatalystsdwanVedgeDevice(varCatalystsdwanVedgeDevice)
	} else {
		return err
	}

	varCatalystsdwanVedgeDevice := _CatalystsdwanVedgeDevice{}

	err = json.Unmarshal(data, &varCatalystsdwanVedgeDevice)
	if err == nil {
		o.CatalystsdwanInventoryEntity = varCatalystsdwanVedgeDevice.CatalystsdwanInventoryEntity
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "ConfigStatusMessage")
		delete(additionalProperties, "DeviceId")
		delete(additionalProperties, "DeviceModel")
		delete(additionalProperties, "DeviceState")
		delete(additionalProperties, "DeviceType")
		delete(additionalProperties, "HostName")
		delete(additionalProperties, "PlatformFamily")
		delete(additionalProperties, "Reachability")
		delete(additionalProperties, "SerialNumber")
		delete(additionalProperties, "SiteId")
		delete(additionalProperties, "SiteName")
		delete(additionalProperties, "SpOrganizationName")
		delete(additionalProperties, "SystemIp")
		delete(additionalProperties, "Validity")
		delete(additionalProperties, "Version")

		// remove fields from embedded structs
		reflectCatalystsdwanInventoryEntity := reflect.ValueOf(o.CatalystsdwanInventoryEntity)
		for i := 0; i < reflectCatalystsdwanInventoryEntity.Type().NumField(); i++ {
			t := reflectCatalystsdwanInventoryEntity.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCatalystsdwanVedgeDevice struct {
	value *CatalystsdwanVedgeDevice
	isSet bool
}

func (v NullableCatalystsdwanVedgeDevice) Get() *CatalystsdwanVedgeDevice {
	return v.value
}

func (v *NullableCatalystsdwanVedgeDevice) Set(val *CatalystsdwanVedgeDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalystsdwanVedgeDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalystsdwanVedgeDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalystsdwanVedgeDevice(val *CatalystsdwanVedgeDevice) *NullableCatalystsdwanVedgeDevice {
	return &NullableCatalystsdwanVedgeDevice{value: val, isSet: true}
}

func (v NullableCatalystsdwanVedgeDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalystsdwanVedgeDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
