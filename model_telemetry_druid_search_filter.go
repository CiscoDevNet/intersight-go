/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-2025071017
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// checks if the TelemetryDruidSearchFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryDruidSearchFilter{}

// TelemetryDruidSearchFilter You can use search filters to filter on partial string matches.
type TelemetryDruidSearchFilter struct {
	Type string `json:"type"`
	// Input column or virtual column name to filter.
	Dimension            string                            `json:"dimension"`
	Query                TelemetryDruidQuerySpec           `json:"query"`
	ExtractionFn         *TelemetryDruidExtractionFunction `json:"extractionFn,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TelemetryDruidSearchFilter TelemetryDruidSearchFilter

// NewTelemetryDruidSearchFilter instantiates a new TelemetryDruidSearchFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryDruidSearchFilter(type_ string, dimension string, query TelemetryDruidQuerySpec) *TelemetryDruidSearchFilter {
	this := TelemetryDruidSearchFilter{}
	this.Type = type_
	this.Dimension = dimension
	this.Query = query
	return &this
}

// NewTelemetryDruidSearchFilterWithDefaults instantiates a new TelemetryDruidSearchFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryDruidSearchFilterWithDefaults() *TelemetryDruidSearchFilter {
	this := TelemetryDruidSearchFilter{}
	return &this
}

// GetType returns the Type field value
func (o *TelemetryDruidSearchFilter) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidSearchFilter) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TelemetryDruidSearchFilter) SetType(v string) {
	o.Type = v
}

// GetDimension returns the Dimension field value
func (o *TelemetryDruidSearchFilter) GetDimension() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Dimension
}

// GetDimensionOk returns a tuple with the Dimension field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidSearchFilter) GetDimensionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dimension, true
}

// SetDimension sets field value
func (o *TelemetryDruidSearchFilter) SetDimension(v string) {
	o.Dimension = v
}

// GetQuery returns the Query field value
func (o *TelemetryDruidSearchFilter) GetQuery() TelemetryDruidQuerySpec {
	if o == nil {
		var ret TelemetryDruidQuerySpec
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidSearchFilter) GetQueryOk() (*TelemetryDruidQuerySpec, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *TelemetryDruidSearchFilter) SetQuery(v TelemetryDruidQuerySpec) {
	o.Query = v
}

// GetExtractionFn returns the ExtractionFn field value if set, zero value otherwise.
func (o *TelemetryDruidSearchFilter) GetExtractionFn() TelemetryDruidExtractionFunction {
	if o == nil || IsNil(o.ExtractionFn) {
		var ret TelemetryDruidExtractionFunction
		return ret
	}
	return *o.ExtractionFn
}

// GetExtractionFnOk returns a tuple with the ExtractionFn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidSearchFilter) GetExtractionFnOk() (*TelemetryDruidExtractionFunction, bool) {
	if o == nil || IsNil(o.ExtractionFn) {
		return nil, false
	}
	return o.ExtractionFn, true
}

// HasExtractionFn returns a boolean if a field has been set.
func (o *TelemetryDruidSearchFilter) HasExtractionFn() bool {
	if o != nil && !IsNil(o.ExtractionFn) {
		return true
	}

	return false
}

// SetExtractionFn gets a reference to the given TelemetryDruidExtractionFunction and assigns it to the ExtractionFn field.
func (o *TelemetryDruidSearchFilter) SetExtractionFn(v TelemetryDruidExtractionFunction) {
	o.ExtractionFn = &v
}

func (o TelemetryDruidSearchFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryDruidSearchFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["dimension"] = o.Dimension
	toSerialize["query"] = o.Query
	if !IsNil(o.ExtractionFn) {
		toSerialize["extractionFn"] = o.ExtractionFn
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TelemetryDruidSearchFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"dimension",
		"query",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varTelemetryDruidSearchFilter := _TelemetryDruidSearchFilter{}

	err = json.Unmarshal(data, &varTelemetryDruidSearchFilter)

	if err != nil {
		return err
	}

	*o = TelemetryDruidSearchFilter(varTelemetryDruidSearchFilter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "dimension")
		delete(additionalProperties, "query")
		delete(additionalProperties, "extractionFn")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTelemetryDruidSearchFilter struct {
	value *TelemetryDruidSearchFilter
	isSet bool
}

func (v NullableTelemetryDruidSearchFilter) Get() *TelemetryDruidSearchFilter {
	return v.value
}

func (v *NullableTelemetryDruidSearchFilter) Set(val *TelemetryDruidSearchFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidSearchFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidSearchFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidSearchFilter(val *TelemetryDruidSearchFilter) *NullableTelemetryDruidSearchFilter {
	return &NullableTelemetryDruidSearchFilter{value: val, isSet: true}
}

func (v NullableTelemetryDruidSearchFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidSearchFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
