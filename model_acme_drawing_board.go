/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-15830
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the AcmeDrawingBoard type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AcmeDrawingBoard{}

// AcmeDrawingBoard Drawing Boards uses a associated object.
type AcmeDrawingBoard struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The description of the drawing board.
	Descr *string `json:"Descr,omitempty"`
	// The name of the drawing board.
	Name *string `json:"Name,omitempty"`
	// An array of relationships to moBaseMo resources.
	ArrayOfAssociatedObjects []MoBaseMoRelationship       `json:"ArrayOfAssociatedObjects,omitempty"`
	AssociatedObject         NullableMoBaseMoRelationship `json:"AssociatedObject,omitempty"`
	AdditionalProperties     map[string]interface{}
}

type _AcmeDrawingBoard AcmeDrawingBoard

// NewAcmeDrawingBoard instantiates a new AcmeDrawingBoard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAcmeDrawingBoard(classId string, objectType string) *AcmeDrawingBoard {
	this := AcmeDrawingBoard{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewAcmeDrawingBoardWithDefaults instantiates a new AcmeDrawingBoard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAcmeDrawingBoardWithDefaults() *AcmeDrawingBoard {
	this := AcmeDrawingBoard{}
	var classId string = "acme.DrawingBoard"
	this.ClassId = classId
	var objectType string = "acme.DrawingBoard"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *AcmeDrawingBoard) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *AcmeDrawingBoard) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *AcmeDrawingBoard) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *AcmeDrawingBoard) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *AcmeDrawingBoard) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *AcmeDrawingBoard) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDescr returns the Descr field value if set, zero value otherwise.
func (o *AcmeDrawingBoard) GetDescr() string {
	if o == nil || IsNil(o.Descr) {
		var ret string
		return ret
	}
	return *o.Descr
}

// GetDescrOk returns a tuple with the Descr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcmeDrawingBoard) GetDescrOk() (*string, bool) {
	if o == nil || IsNil(o.Descr) {
		return nil, false
	}
	return o.Descr, true
}

// HasDescr returns a boolean if a field has been set.
func (o *AcmeDrawingBoard) HasDescr() bool {
	if o != nil && !IsNil(o.Descr) {
		return true
	}

	return false
}

// SetDescr gets a reference to the given string and assigns it to the Descr field.
func (o *AcmeDrawingBoard) SetDescr(v string) {
	o.Descr = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AcmeDrawingBoard) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcmeDrawingBoard) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AcmeDrawingBoard) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AcmeDrawingBoard) SetName(v string) {
	o.Name = &v
}

// GetArrayOfAssociatedObjects returns the ArrayOfAssociatedObjects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AcmeDrawingBoard) GetArrayOfAssociatedObjects() []MoBaseMoRelationship {
	if o == nil {
		var ret []MoBaseMoRelationship
		return ret
	}
	return o.ArrayOfAssociatedObjects
}

// GetArrayOfAssociatedObjectsOk returns a tuple with the ArrayOfAssociatedObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AcmeDrawingBoard) GetArrayOfAssociatedObjectsOk() ([]MoBaseMoRelationship, bool) {
	if o == nil || IsNil(o.ArrayOfAssociatedObjects) {
		return nil, false
	}
	return o.ArrayOfAssociatedObjects, true
}

// HasArrayOfAssociatedObjects returns a boolean if a field has been set.
func (o *AcmeDrawingBoard) HasArrayOfAssociatedObjects() bool {
	if o != nil && IsNil(o.ArrayOfAssociatedObjects) {
		return true
	}

	return false
}

// SetArrayOfAssociatedObjects gets a reference to the given []MoBaseMoRelationship and assigns it to the ArrayOfAssociatedObjects field.
func (o *AcmeDrawingBoard) SetArrayOfAssociatedObjects(v []MoBaseMoRelationship) {
	o.ArrayOfAssociatedObjects = v
}

// GetAssociatedObject returns the AssociatedObject field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AcmeDrawingBoard) GetAssociatedObject() MoBaseMoRelationship {
	if o == nil || IsNil(o.AssociatedObject.Get()) {
		var ret MoBaseMoRelationship
		return ret
	}
	return *o.AssociatedObject.Get()
}

// GetAssociatedObjectOk returns a tuple with the AssociatedObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AcmeDrawingBoard) GetAssociatedObjectOk() (*MoBaseMoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssociatedObject.Get(), o.AssociatedObject.IsSet()
}

// HasAssociatedObject returns a boolean if a field has been set.
func (o *AcmeDrawingBoard) HasAssociatedObject() bool {
	if o != nil && o.AssociatedObject.IsSet() {
		return true
	}

	return false
}

// SetAssociatedObject gets a reference to the given NullableMoBaseMoRelationship and assigns it to the AssociatedObject field.
func (o *AcmeDrawingBoard) SetAssociatedObject(v MoBaseMoRelationship) {
	o.AssociatedObject.Set(&v)
}

// SetAssociatedObjectNil sets the value for AssociatedObject to be an explicit nil
func (o *AcmeDrawingBoard) SetAssociatedObjectNil() {
	o.AssociatedObject.Set(nil)
}

// UnsetAssociatedObject ensures that no value is present for AssociatedObject, not even an explicit nil
func (o *AcmeDrawingBoard) UnsetAssociatedObject() {
	o.AssociatedObject.Unset()
}

func (o AcmeDrawingBoard) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AcmeDrawingBoard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	toSerialize["ClassId"] = o.ClassId
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Descr) {
		toSerialize["Descr"] = o.Descr
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if o.ArrayOfAssociatedObjects != nil {
		toSerialize["ArrayOfAssociatedObjects"] = o.ArrayOfAssociatedObjects
	}
	if o.AssociatedObject.IsSet() {
		toSerialize["AssociatedObject"] = o.AssociatedObject.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AcmeDrawingBoard) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	type AcmeDrawingBoardWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The description of the drawing board.
		Descr *string `json:"Descr,omitempty"`
		// The name of the drawing board.
		Name *string `json:"Name,omitempty"`
		// An array of relationships to moBaseMo resources.
		ArrayOfAssociatedObjects []MoBaseMoRelationship       `json:"ArrayOfAssociatedObjects,omitempty"`
		AssociatedObject         NullableMoBaseMoRelationship `json:"AssociatedObject,omitempty"`
	}

	varAcmeDrawingBoardWithoutEmbeddedStruct := AcmeDrawingBoardWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varAcmeDrawingBoardWithoutEmbeddedStruct)
	if err == nil {
		varAcmeDrawingBoard := _AcmeDrawingBoard{}
		varAcmeDrawingBoard.ClassId = varAcmeDrawingBoardWithoutEmbeddedStruct.ClassId
		varAcmeDrawingBoard.ObjectType = varAcmeDrawingBoardWithoutEmbeddedStruct.ObjectType
		varAcmeDrawingBoard.Descr = varAcmeDrawingBoardWithoutEmbeddedStruct.Descr
		varAcmeDrawingBoard.Name = varAcmeDrawingBoardWithoutEmbeddedStruct.Name
		varAcmeDrawingBoard.ArrayOfAssociatedObjects = varAcmeDrawingBoardWithoutEmbeddedStruct.ArrayOfAssociatedObjects
		varAcmeDrawingBoard.AssociatedObject = varAcmeDrawingBoardWithoutEmbeddedStruct.AssociatedObject
		*o = AcmeDrawingBoard(varAcmeDrawingBoard)
	} else {
		return err
	}

	varAcmeDrawingBoard := _AcmeDrawingBoard{}

	err = json.Unmarshal(data, &varAcmeDrawingBoard)
	if err == nil {
		o.MoBaseMo = varAcmeDrawingBoard.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Descr")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "ArrayOfAssociatedObjects")
		delete(additionalProperties, "AssociatedObject")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAcmeDrawingBoard struct {
	value *AcmeDrawingBoard
	isSet bool
}

func (v NullableAcmeDrawingBoard) Get() *AcmeDrawingBoard {
	return v.value
}

func (v *NullableAcmeDrawingBoard) Set(val *AcmeDrawingBoard) {
	v.value = val
	v.isSet = true
}

func (v NullableAcmeDrawingBoard) IsSet() bool {
	return v.isSet
}

func (v *NullableAcmeDrawingBoard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAcmeDrawingBoard(val *AcmeDrawingBoard) *NullableAcmeDrawingBoard {
	return &NullableAcmeDrawingBoard{value: val, isSet: true}
}

func (v NullableAcmeDrawingBoard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAcmeDrawingBoard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
