/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-14968
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// checks if the TelemetryDruidRegexFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryDruidRegexFilter{}

// TelemetryDruidRegexFilter The selector filter matches a specific dimension with a specific value. Selector filters can be used as the base filters for more complex Boolean expressions of filters.
type TelemetryDruidRegexFilter struct {
	// The filter type.
	Type string `json:"type"`
	// All filters except the \"spatial\" filter support extraction functions. An extraction function is defined by setting the \"extractionFn\" field on a filter. See Extraction function for more details on extraction functions. If specified, the extraction function will be used to transform input values before the filter is applied. The example below shows a selector filter combined with an extraction function. This filter will transform input values according to the values defined in the lookup map; transformed values will then be matched with the string \"bar_1\".
	ExtractionFn         map[string]interface{} `json:"extractionFn,omitempty"`
	Dimension            string                 `json:"dimension"`
	Pattern              string                 `json:"pattern"`
	AdditionalProperties map[string]interface{}
}

type _TelemetryDruidRegexFilter TelemetryDruidRegexFilter

// NewTelemetryDruidRegexFilter instantiates a new TelemetryDruidRegexFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryDruidRegexFilter(type_ string, dimension string, pattern string) *TelemetryDruidRegexFilter {
	this := TelemetryDruidRegexFilter{}
	this.Type = type_
	this.Dimension = dimension
	this.Pattern = pattern
	return &this
}

// NewTelemetryDruidRegexFilterWithDefaults instantiates a new TelemetryDruidRegexFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryDruidRegexFilterWithDefaults() *TelemetryDruidRegexFilter {
	this := TelemetryDruidRegexFilter{}
	return &this
}

// GetType returns the Type field value
func (o *TelemetryDruidRegexFilter) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidRegexFilter) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TelemetryDruidRegexFilter) SetType(v string) {
	o.Type = v
}

// GetExtractionFn returns the ExtractionFn field value if set, zero value otherwise.
func (o *TelemetryDruidRegexFilter) GetExtractionFn() map[string]interface{} {
	if o == nil || IsNil(o.ExtractionFn) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtractionFn
}

// GetExtractionFnOk returns a tuple with the ExtractionFn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidRegexFilter) GetExtractionFnOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtractionFn) {
		return map[string]interface{}{}, false
	}
	return o.ExtractionFn, true
}

// HasExtractionFn returns a boolean if a field has been set.
func (o *TelemetryDruidRegexFilter) HasExtractionFn() bool {
	if o != nil && !IsNil(o.ExtractionFn) {
		return true
	}

	return false
}

// SetExtractionFn gets a reference to the given map[string]interface{} and assigns it to the ExtractionFn field.
func (o *TelemetryDruidRegexFilter) SetExtractionFn(v map[string]interface{}) {
	o.ExtractionFn = v
}

// GetDimension returns the Dimension field value
func (o *TelemetryDruidRegexFilter) GetDimension() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Dimension
}

// GetDimensionOk returns a tuple with the Dimension field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidRegexFilter) GetDimensionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dimension, true
}

// SetDimension sets field value
func (o *TelemetryDruidRegexFilter) SetDimension(v string) {
	o.Dimension = v
}

// GetPattern returns the Pattern field value
func (o *TelemetryDruidRegexFilter) GetPattern() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidRegexFilter) GetPatternOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pattern, true
}

// SetPattern sets field value
func (o *TelemetryDruidRegexFilter) SetPattern(v string) {
	o.Pattern = v
}

func (o TelemetryDruidRegexFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryDruidRegexFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.ExtractionFn) {
		toSerialize["extractionFn"] = o.ExtractionFn
	}
	toSerialize["dimension"] = o.Dimension
	toSerialize["pattern"] = o.Pattern

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TelemetryDruidRegexFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"dimension",
		"pattern",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTelemetryDruidRegexFilter := _TelemetryDruidRegexFilter{}

	err = json.Unmarshal(data, &varTelemetryDruidRegexFilter)

	if err != nil {
		return err
	}

	*o = TelemetryDruidRegexFilter(varTelemetryDruidRegexFilter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "extractionFn")
		delete(additionalProperties, "dimension")
		delete(additionalProperties, "pattern")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTelemetryDruidRegexFilter struct {
	value *TelemetryDruidRegexFilter
	isSet bool
}

func (v NullableTelemetryDruidRegexFilter) Get() *TelemetryDruidRegexFilter {
	return v.value
}

func (v *NullableTelemetryDruidRegexFilter) Set(val *TelemetryDruidRegexFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidRegexFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidRegexFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidRegexFilter(val *TelemetryDruidRegexFilter) *NullableTelemetryDruidRegexFilter {
	return &NullableTelemetryDruidRegexFilter{value: val, isSet: true}
}

func (v NullableTelemetryDruidRegexFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidRegexFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
