/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-16143
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// checks if the TelemetryDruidPeriodGranularity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryDruidPeriodGranularity{}

// TelemetryDruidPeriodGranularity Period granularities are specified as arbitrary period combinations of years, months, weeks, hours, minutes and seconds (e.g., P2W, P3M, PT1H30M, PT0.750S) in ISO8601 format. They support specifying a time zone which determines where period boundaries start as well as the timezone of the returned timestamps. By default, years start on the first of January, months start on the first of the month and weeks start on Mondays unless an origin is specified. Time zone is optional (defaults to UTC). Origin is optional (defaults to 1970-01-01T00:00:00 in the given time zone).
type TelemetryDruidPeriodGranularity struct {
	// the type of granularity.
	Type string `json:"type"`
	// The period in ISO 8601 format. Examples are P2W, P3M, PT1H30M, PT0.750S.
	Period string `json:"period"`
	// An optional value specifying the time zone. Standard [IANA time zones](http://joda-time.sourceforge.net/timezones.html) are supported.
	TimeZone             *string `json:"timeZone,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TelemetryDruidPeriodGranularity TelemetryDruidPeriodGranularity

// NewTelemetryDruidPeriodGranularity instantiates a new TelemetryDruidPeriodGranularity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryDruidPeriodGranularity(type_ string, period string) *TelemetryDruidPeriodGranularity {
	this := TelemetryDruidPeriodGranularity{}
	this.Type = type_
	this.Period = period
	return &this
}

// NewTelemetryDruidPeriodGranularityWithDefaults instantiates a new TelemetryDruidPeriodGranularity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryDruidPeriodGranularityWithDefaults() *TelemetryDruidPeriodGranularity {
	this := TelemetryDruidPeriodGranularity{}
	return &this
}

// GetType returns the Type field value
func (o *TelemetryDruidPeriodGranularity) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidPeriodGranularity) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TelemetryDruidPeriodGranularity) SetType(v string) {
	o.Type = v
}

// GetPeriod returns the Period field value
func (o *TelemetryDruidPeriodGranularity) GetPeriod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Period
}

// GetPeriodOk returns a tuple with the Period field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidPeriodGranularity) GetPeriodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Period, true
}

// SetPeriod sets field value
func (o *TelemetryDruidPeriodGranularity) SetPeriod(v string) {
	o.Period = v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *TelemetryDruidPeriodGranularity) GetTimeZone() string {
	if o == nil || IsNil(o.TimeZone) {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidPeriodGranularity) GetTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.TimeZone) {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *TelemetryDruidPeriodGranularity) HasTimeZone() bool {
	if o != nil && !IsNil(o.TimeZone) {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *TelemetryDruidPeriodGranularity) SetTimeZone(v string) {
	o.TimeZone = &v
}

func (o TelemetryDruidPeriodGranularity) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryDruidPeriodGranularity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["period"] = o.Period
	if !IsNil(o.TimeZone) {
		toSerialize["timeZone"] = o.TimeZone
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TelemetryDruidPeriodGranularity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"period",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTelemetryDruidPeriodGranularity := _TelemetryDruidPeriodGranularity{}

	err = json.Unmarshal(data, &varTelemetryDruidPeriodGranularity)

	if err != nil {
		return err
	}

	*o = TelemetryDruidPeriodGranularity(varTelemetryDruidPeriodGranularity)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "period")
		delete(additionalProperties, "timeZone")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTelemetryDruidPeriodGranularity struct {
	value *TelemetryDruidPeriodGranularity
	isSet bool
}

func (v NullableTelemetryDruidPeriodGranularity) Get() *TelemetryDruidPeriodGranularity {
	return v.value
}

func (v *NullableTelemetryDruidPeriodGranularity) Set(val *TelemetryDruidPeriodGranularity) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidPeriodGranularity) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidPeriodGranularity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidPeriodGranularity(val *TelemetryDruidPeriodGranularity) *NullableTelemetryDruidPeriodGranularity {
	return &NullableTelemetryDruidPeriodGranularity{value: val, isSet: true}
}

func (v NullableTelemetryDruidPeriodGranularity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidPeriodGranularity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
