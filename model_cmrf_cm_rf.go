/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-17412
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the CmrfCmRf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CmrfCmRf{}

// CmrfCmRf A reference to a REST resource from a complex type, uniquely identified by object type and Moid. CMRF is a short term workaround until MoRef properties of complex types can be supported. CMRF means complex type managed object reference and is unique enough that it can be removed easily later. The long term solution is to support for relationships stanza under complextypes. Deprecated.
type CmrfCmRf struct {
	MoBaseComplexType
	// The Moid of the referenced REST resource.
	Moid                 *string `json:"Moid,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CmrfCmRf CmrfCmRf

// NewCmrfCmRf instantiates a new CmrfCmRf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCmrfCmRf(classId string, objectType string) *CmrfCmRf {
	this := CmrfCmRf{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewCmrfCmRfWithDefaults instantiates a new CmrfCmRf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCmrfCmRfWithDefaults() *CmrfCmRf {
	this := CmrfCmRf{}
	return &this
}

// GetMoid returns the Moid field value if set, zero value otherwise.
func (o *CmrfCmRf) GetMoid() string {
	if o == nil || IsNil(o.Moid) {
		var ret string
		return ret
	}
	return *o.Moid
}

// GetMoidOk returns a tuple with the Moid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmrfCmRf) GetMoidOk() (*string, bool) {
	if o == nil || IsNil(o.Moid) {
		return nil, false
	}
	return o.Moid, true
}

// HasMoid returns a boolean if a field has been set.
func (o *CmrfCmRf) HasMoid() bool {
	if o != nil && !IsNil(o.Moid) {
		return true
	}

	return false
}

// SetMoid gets a reference to the given string and assigns it to the Moid field.
func (o *CmrfCmRf) SetMoid(v string) {
	o.Moid = &v
}

func (o CmrfCmRf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CmrfCmRf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	if !IsNil(o.Moid) {
		toSerialize["Moid"] = o.Moid
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CmrfCmRf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	type CmrfCmRfWithoutEmbeddedStruct struct {
		// The Moid of the referenced REST resource.
		Moid *string `json:"Moid,omitempty"`
	}

	varCmrfCmRfWithoutEmbeddedStruct := CmrfCmRfWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varCmrfCmRfWithoutEmbeddedStruct)
	if err == nil {
		varCmrfCmRf := _CmrfCmRf{}
		varCmrfCmRf.Moid = varCmrfCmRfWithoutEmbeddedStruct.Moid
		*o = CmrfCmRf(varCmrfCmRf)
	} else {
		return err
	}

	varCmrfCmRf := _CmrfCmRf{}

	err = json.Unmarshal(data, &varCmrfCmRf)
	if err == nil {
		o.MoBaseComplexType = varCmrfCmRf.MoBaseComplexType
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "Moid")

		// remove fields from embedded structs
		reflectMoBaseComplexType := reflect.ValueOf(o.MoBaseComplexType)
		for i := 0; i < reflectMoBaseComplexType.Type().NumField(); i++ {
			t := reflectMoBaseComplexType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCmrfCmRf struct {
	value *CmrfCmRf
	isSet bool
}

func (v NullableCmrfCmRf) Get() *CmrfCmRf {
	return v.value
}

func (v *NullableCmrfCmRf) Set(val *CmrfCmRf) {
	v.value = val
	v.isSet = true
}

func (v NullableCmrfCmRf) IsSet() bool {
	return v.isSet
}

func (v *NullableCmrfCmRf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCmrfCmRf(val *CmrfCmRf) *NullableCmrfCmRf {
	return &NullableCmrfCmRf{value: val, isSet: true}
}

func (v NullableCmrfCmRf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCmrfCmRf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
