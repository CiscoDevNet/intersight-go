/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-2024112619
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// TelemetryDruidQuerySpec - struct for TelemetryDruidQuerySpec
type TelemetryDruidQuerySpec struct {
	TelemetryDruidQuerySpecContains            *TelemetryDruidQuerySpecContains
	TelemetryDruidQuerySpecFragment            *TelemetryDruidQuerySpecFragment
	TelemetryDruidQuerySpecInsensitiveContains *TelemetryDruidQuerySpecInsensitiveContains
}

// TelemetryDruidQuerySpecContainsAsTelemetryDruidQuerySpec is a convenience function that returns TelemetryDruidQuerySpecContains wrapped in TelemetryDruidQuerySpec
func TelemetryDruidQuerySpecContainsAsTelemetryDruidQuerySpec(v *TelemetryDruidQuerySpecContains) TelemetryDruidQuerySpec {
	return TelemetryDruidQuerySpec{
		TelemetryDruidQuerySpecContains: v,
	}
}

// TelemetryDruidQuerySpecFragmentAsTelemetryDruidQuerySpec is a convenience function that returns TelemetryDruidQuerySpecFragment wrapped in TelemetryDruidQuerySpec
func TelemetryDruidQuerySpecFragmentAsTelemetryDruidQuerySpec(v *TelemetryDruidQuerySpecFragment) TelemetryDruidQuerySpec {
	return TelemetryDruidQuerySpec{
		TelemetryDruidQuerySpecFragment: v,
	}
}

// TelemetryDruidQuerySpecInsensitiveContainsAsTelemetryDruidQuerySpec is a convenience function that returns TelemetryDruidQuerySpecInsensitiveContains wrapped in TelemetryDruidQuerySpec
func TelemetryDruidQuerySpecInsensitiveContainsAsTelemetryDruidQuerySpec(v *TelemetryDruidQuerySpecInsensitiveContains) TelemetryDruidQuerySpec {
	return TelemetryDruidQuerySpec{
		TelemetryDruidQuerySpecInsensitiveContains: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *TelemetryDruidQuerySpec) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'contains'
	if jsonDict["type"] == "contains" {
		// try to unmarshal JSON data into TelemetryDruidQuerySpecContains
		err = json.Unmarshal(data, &dst.TelemetryDruidQuerySpecContains)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidQuerySpecContains, return on the first match
		} else {
			dst.TelemetryDruidQuerySpecContains = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidQuerySpec as TelemetryDruidQuerySpecContains: %s", err.Error())
		}
	}

	// check if the discriminator value is 'fragment'
	if jsonDict["type"] == "fragment" {
		// try to unmarshal JSON data into TelemetryDruidQuerySpecFragment
		err = json.Unmarshal(data, &dst.TelemetryDruidQuerySpecFragment)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidQuerySpecFragment, return on the first match
		} else {
			dst.TelemetryDruidQuerySpecFragment = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidQuerySpec as TelemetryDruidQuerySpecFragment: %s", err.Error())
		}
	}

	// check if the discriminator value is 'insensitive_contains'
	if jsonDict["type"] == "insensitive_contains" {
		// try to unmarshal JSON data into TelemetryDruidQuerySpecInsensitiveContains
		err = json.Unmarshal(data, &dst.TelemetryDruidQuerySpecInsensitiveContains)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidQuerySpecInsensitiveContains, return on the first match
		} else {
			dst.TelemetryDruidQuerySpecInsensitiveContains = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidQuerySpec as TelemetryDruidQuerySpecInsensitiveContains: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.DruidQuerySpecContains'
	if jsonDict["type"] == "telemetry.DruidQuerySpecContains" {
		// try to unmarshal JSON data into TelemetryDruidQuerySpecContains
		err = json.Unmarshal(data, &dst.TelemetryDruidQuerySpecContains)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidQuerySpecContains, return on the first match
		} else {
			dst.TelemetryDruidQuerySpecContains = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidQuerySpec as TelemetryDruidQuerySpecContains: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.DruidQuerySpecFragment'
	if jsonDict["type"] == "telemetry.DruidQuerySpecFragment" {
		// try to unmarshal JSON data into TelemetryDruidQuerySpecFragment
		err = json.Unmarshal(data, &dst.TelemetryDruidQuerySpecFragment)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidQuerySpecFragment, return on the first match
		} else {
			dst.TelemetryDruidQuerySpecFragment = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidQuerySpec as TelemetryDruidQuerySpecFragment: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.DruidQuerySpecInsensitiveContains'
	if jsonDict["type"] == "telemetry.DruidQuerySpecInsensitiveContains" {
		// try to unmarshal JSON data into TelemetryDruidQuerySpecInsensitiveContains
		err = json.Unmarshal(data, &dst.TelemetryDruidQuerySpecInsensitiveContains)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidQuerySpecInsensitiveContains, return on the first match
		} else {
			dst.TelemetryDruidQuerySpecInsensitiveContains = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidQuerySpec as TelemetryDruidQuerySpecInsensitiveContains: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TelemetryDruidQuerySpec) MarshalJSON() ([]byte, error) {
	if src.TelemetryDruidQuerySpecContains != nil {
		return json.Marshal(&src.TelemetryDruidQuerySpecContains)
	}

	if src.TelemetryDruidQuerySpecFragment != nil {
		return json.Marshal(&src.TelemetryDruidQuerySpecFragment)
	}

	if src.TelemetryDruidQuerySpecInsensitiveContains != nil {
		return json.Marshal(&src.TelemetryDruidQuerySpecInsensitiveContains)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TelemetryDruidQuerySpec) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.TelemetryDruidQuerySpecContains != nil {
		return obj.TelemetryDruidQuerySpecContains
	}

	if obj.TelemetryDruidQuerySpecFragment != nil {
		return obj.TelemetryDruidQuerySpecFragment
	}

	if obj.TelemetryDruidQuerySpecInsensitiveContains != nil {
		return obj.TelemetryDruidQuerySpecInsensitiveContains
	}

	// all schemas are nil
	return nil
}

type NullableTelemetryDruidQuerySpec struct {
	value *TelemetryDruidQuerySpec
	isSet bool
}

func (v NullableTelemetryDruidQuerySpec) Get() *TelemetryDruidQuerySpec {
	return v.value
}

func (v *NullableTelemetryDruidQuerySpec) Set(val *TelemetryDruidQuerySpec) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidQuerySpec) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidQuerySpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidQuerySpec(val *TelemetryDruidQuerySpec) *NullableTelemetryDruidQuerySpec {
	return &NullableTelemetryDruidQuerySpec{value: val, isSet: true}
}

func (v NullableTelemetryDruidQuerySpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidQuerySpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
