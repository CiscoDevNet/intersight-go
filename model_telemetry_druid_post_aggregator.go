/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-2025041004
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// TelemetryDruidPostAggregator - struct for TelemetryDruidPostAggregator
type TelemetryDruidPostAggregator struct {
	TelemetryDruidArithmeticPostAggregator            *TelemetryDruidArithmeticPostAggregator
	TelemetryDruidConstantPostAggregator              *TelemetryDruidConstantPostAggregator
	TelemetryDruidExpressionPostAggregator            *TelemetryDruidExpressionPostAggregator
	TelemetryDruidFieldAccessorPostAggregator         *TelemetryDruidFieldAccessorPostAggregator
	TelemetryDruidGreatestLeastPostAggregator         *TelemetryDruidGreatestLeastPostAggregator
	TelemetryDruidHyperUniquePostAggregator           *TelemetryDruidHyperUniquePostAggregator
	TelemetryDruidThetaSketchEstimatePostAggregator   *TelemetryDruidThetaSketchEstimatePostAggregator
	TelemetryDruidThetaSketchOperationsPostAggregator *TelemetryDruidThetaSketchOperationsPostAggregator
}

// TelemetryDruidArithmeticPostAggregatorAsTelemetryDruidPostAggregator is a convenience function that returns TelemetryDruidArithmeticPostAggregator wrapped in TelemetryDruidPostAggregator
func TelemetryDruidArithmeticPostAggregatorAsTelemetryDruidPostAggregator(v *TelemetryDruidArithmeticPostAggregator) TelemetryDruidPostAggregator {
	return TelemetryDruidPostAggregator{
		TelemetryDruidArithmeticPostAggregator: v,
	}
}

// TelemetryDruidConstantPostAggregatorAsTelemetryDruidPostAggregator is a convenience function that returns TelemetryDruidConstantPostAggregator wrapped in TelemetryDruidPostAggregator
func TelemetryDruidConstantPostAggregatorAsTelemetryDruidPostAggregator(v *TelemetryDruidConstantPostAggregator) TelemetryDruidPostAggregator {
	return TelemetryDruidPostAggregator{
		TelemetryDruidConstantPostAggregator: v,
	}
}

// TelemetryDruidExpressionPostAggregatorAsTelemetryDruidPostAggregator is a convenience function that returns TelemetryDruidExpressionPostAggregator wrapped in TelemetryDruidPostAggregator
func TelemetryDruidExpressionPostAggregatorAsTelemetryDruidPostAggregator(v *TelemetryDruidExpressionPostAggregator) TelemetryDruidPostAggregator {
	return TelemetryDruidPostAggregator{
		TelemetryDruidExpressionPostAggregator: v,
	}
}

// TelemetryDruidFieldAccessorPostAggregatorAsTelemetryDruidPostAggregator is a convenience function that returns TelemetryDruidFieldAccessorPostAggregator wrapped in TelemetryDruidPostAggregator
func TelemetryDruidFieldAccessorPostAggregatorAsTelemetryDruidPostAggregator(v *TelemetryDruidFieldAccessorPostAggregator) TelemetryDruidPostAggregator {
	return TelemetryDruidPostAggregator{
		TelemetryDruidFieldAccessorPostAggregator: v,
	}
}

// TelemetryDruidGreatestLeastPostAggregatorAsTelemetryDruidPostAggregator is a convenience function that returns TelemetryDruidGreatestLeastPostAggregator wrapped in TelemetryDruidPostAggregator
func TelemetryDruidGreatestLeastPostAggregatorAsTelemetryDruidPostAggregator(v *TelemetryDruidGreatestLeastPostAggregator) TelemetryDruidPostAggregator {
	return TelemetryDruidPostAggregator{
		TelemetryDruidGreatestLeastPostAggregator: v,
	}
}

// TelemetryDruidHyperUniquePostAggregatorAsTelemetryDruidPostAggregator is a convenience function that returns TelemetryDruidHyperUniquePostAggregator wrapped in TelemetryDruidPostAggregator
func TelemetryDruidHyperUniquePostAggregatorAsTelemetryDruidPostAggregator(v *TelemetryDruidHyperUniquePostAggregator) TelemetryDruidPostAggregator {
	return TelemetryDruidPostAggregator{
		TelemetryDruidHyperUniquePostAggregator: v,
	}
}

// TelemetryDruidThetaSketchEstimatePostAggregatorAsTelemetryDruidPostAggregator is a convenience function that returns TelemetryDruidThetaSketchEstimatePostAggregator wrapped in TelemetryDruidPostAggregator
func TelemetryDruidThetaSketchEstimatePostAggregatorAsTelemetryDruidPostAggregator(v *TelemetryDruidThetaSketchEstimatePostAggregator) TelemetryDruidPostAggregator {
	return TelemetryDruidPostAggregator{
		TelemetryDruidThetaSketchEstimatePostAggregator: v,
	}
}

// TelemetryDruidThetaSketchOperationsPostAggregatorAsTelemetryDruidPostAggregator is a convenience function that returns TelemetryDruidThetaSketchOperationsPostAggregator wrapped in TelemetryDruidPostAggregator
func TelemetryDruidThetaSketchOperationsPostAggregatorAsTelemetryDruidPostAggregator(v *TelemetryDruidThetaSketchOperationsPostAggregator) TelemetryDruidPostAggregator {
	return TelemetryDruidPostAggregator{
		TelemetryDruidThetaSketchOperationsPostAggregator: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *TelemetryDruidPostAggregator) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'arithmetic'
	if jsonDict["type"] == "arithmetic" {
		// try to unmarshal JSON data into TelemetryDruidArithmeticPostAggregator
		err = json.Unmarshal(data, &dst.TelemetryDruidArithmeticPostAggregator)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidArithmeticPostAggregator, return on the first match
		} else {
			dst.TelemetryDruidArithmeticPostAggregator = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidPostAggregator as TelemetryDruidArithmeticPostAggregator: %s", err.Error())
		}
	}

	// check if the discriminator value is 'constant'
	if jsonDict["type"] == "constant" {
		// try to unmarshal JSON data into TelemetryDruidConstantPostAggregator
		err = json.Unmarshal(data, &dst.TelemetryDruidConstantPostAggregator)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidConstantPostAggregator, return on the first match
		} else {
			dst.TelemetryDruidConstantPostAggregator = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidPostAggregator as TelemetryDruidConstantPostAggregator: %s", err.Error())
		}
	}

	// check if the discriminator value is 'doubleGreatest'
	if jsonDict["type"] == "doubleGreatest" {
		// try to unmarshal JSON data into TelemetryDruidGreatestLeastPostAggregator
		err = json.Unmarshal(data, &dst.TelemetryDruidGreatestLeastPostAggregator)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidGreatestLeastPostAggregator, return on the first match
		} else {
			dst.TelemetryDruidGreatestLeastPostAggregator = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidPostAggregator as TelemetryDruidGreatestLeastPostAggregator: %s", err.Error())
		}
	}

	// check if the discriminator value is 'doubleLeast'
	if jsonDict["type"] == "doubleLeast" {
		// try to unmarshal JSON data into TelemetryDruidGreatestLeastPostAggregator
		err = json.Unmarshal(data, &dst.TelemetryDruidGreatestLeastPostAggregator)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidGreatestLeastPostAggregator, return on the first match
		} else {
			dst.TelemetryDruidGreatestLeastPostAggregator = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidPostAggregator as TelemetryDruidGreatestLeastPostAggregator: %s", err.Error())
		}
	}

	// check if the discriminator value is 'expression'
	if jsonDict["type"] == "expression" {
		// try to unmarshal JSON data into TelemetryDruidExpressionPostAggregator
		err = json.Unmarshal(data, &dst.TelemetryDruidExpressionPostAggregator)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExpressionPostAggregator, return on the first match
		} else {
			dst.TelemetryDruidExpressionPostAggregator = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidPostAggregator as TelemetryDruidExpressionPostAggregator: %s", err.Error())
		}
	}

	// check if the discriminator value is 'fieldAccess'
	if jsonDict["type"] == "fieldAccess" {
		// try to unmarshal JSON data into TelemetryDruidFieldAccessorPostAggregator
		err = json.Unmarshal(data, &dst.TelemetryDruidFieldAccessorPostAggregator)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidFieldAccessorPostAggregator, return on the first match
		} else {
			dst.TelemetryDruidFieldAccessorPostAggregator = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidPostAggregator as TelemetryDruidFieldAccessorPostAggregator: %s", err.Error())
		}
	}

	// check if the discriminator value is 'finalizingFieldAccess'
	if jsonDict["type"] == "finalizingFieldAccess" {
		// try to unmarshal JSON data into TelemetryDruidFieldAccessorPostAggregator
		err = json.Unmarshal(data, &dst.TelemetryDruidFieldAccessorPostAggregator)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidFieldAccessorPostAggregator, return on the first match
		} else {
			dst.TelemetryDruidFieldAccessorPostAggregator = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidPostAggregator as TelemetryDruidFieldAccessorPostAggregator: %s", err.Error())
		}
	}

	// check if the discriminator value is 'hyperUniqueCardinality'
	if jsonDict["type"] == "hyperUniqueCardinality" {
		// try to unmarshal JSON data into TelemetryDruidHyperUniquePostAggregator
		err = json.Unmarshal(data, &dst.TelemetryDruidHyperUniquePostAggregator)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidHyperUniquePostAggregator, return on the first match
		} else {
			dst.TelemetryDruidHyperUniquePostAggregator = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidPostAggregator as TelemetryDruidHyperUniquePostAggregator: %s", err.Error())
		}
	}

	// check if the discriminator value is 'longGreatest'
	if jsonDict["type"] == "longGreatest" {
		// try to unmarshal JSON data into TelemetryDruidGreatestLeastPostAggregator
		err = json.Unmarshal(data, &dst.TelemetryDruidGreatestLeastPostAggregator)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidGreatestLeastPostAggregator, return on the first match
		} else {
			dst.TelemetryDruidGreatestLeastPostAggregator = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidPostAggregator as TelemetryDruidGreatestLeastPostAggregator: %s", err.Error())
		}
	}

	// check if the discriminator value is 'longLeast'
	if jsonDict["type"] == "longLeast" {
		// try to unmarshal JSON data into TelemetryDruidGreatestLeastPostAggregator
		err = json.Unmarshal(data, &dst.TelemetryDruidGreatestLeastPostAggregator)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidGreatestLeastPostAggregator, return on the first match
		} else {
			dst.TelemetryDruidGreatestLeastPostAggregator = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidPostAggregator as TelemetryDruidGreatestLeastPostAggregator: %s", err.Error())
		}
	}

	// check if the discriminator value is 'thetaSketchEstimate'
	if jsonDict["type"] == "thetaSketchEstimate" {
		// try to unmarshal JSON data into TelemetryDruidThetaSketchEstimatePostAggregator
		err = json.Unmarshal(data, &dst.TelemetryDruidThetaSketchEstimatePostAggregator)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidThetaSketchEstimatePostAggregator, return on the first match
		} else {
			dst.TelemetryDruidThetaSketchEstimatePostAggregator = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidPostAggregator as TelemetryDruidThetaSketchEstimatePostAggregator: %s", err.Error())
		}
	}

	// check if the discriminator value is 'thetaSketchSetOp'
	if jsonDict["type"] == "thetaSketchSetOp" {
		// try to unmarshal JSON data into TelemetryDruidThetaSketchOperationsPostAggregator
		err = json.Unmarshal(data, &dst.TelemetryDruidThetaSketchOperationsPostAggregator)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidThetaSketchOperationsPostAggregator, return on the first match
		} else {
			dst.TelemetryDruidThetaSketchOperationsPostAggregator = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidPostAggregator as TelemetryDruidThetaSketchOperationsPostAggregator: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.DruidArithmeticPostAggregator'
	if jsonDict["type"] == "telemetry.DruidArithmeticPostAggregator" {
		// try to unmarshal JSON data into TelemetryDruidArithmeticPostAggregator
		err = json.Unmarshal(data, &dst.TelemetryDruidArithmeticPostAggregator)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidArithmeticPostAggregator, return on the first match
		} else {
			dst.TelemetryDruidArithmeticPostAggregator = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidPostAggregator as TelemetryDruidArithmeticPostAggregator: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.DruidConstantPostAggregator'
	if jsonDict["type"] == "telemetry.DruidConstantPostAggregator" {
		// try to unmarshal JSON data into TelemetryDruidConstantPostAggregator
		err = json.Unmarshal(data, &dst.TelemetryDruidConstantPostAggregator)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidConstantPostAggregator, return on the first match
		} else {
			dst.TelemetryDruidConstantPostAggregator = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidPostAggregator as TelemetryDruidConstantPostAggregator: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.DruidExpressionPostAggregator'
	if jsonDict["type"] == "telemetry.DruidExpressionPostAggregator" {
		// try to unmarshal JSON data into TelemetryDruidExpressionPostAggregator
		err = json.Unmarshal(data, &dst.TelemetryDruidExpressionPostAggregator)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExpressionPostAggregator, return on the first match
		} else {
			dst.TelemetryDruidExpressionPostAggregator = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidPostAggregator as TelemetryDruidExpressionPostAggregator: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.DruidFieldAccessorPostAggregator'
	if jsonDict["type"] == "telemetry.DruidFieldAccessorPostAggregator" {
		// try to unmarshal JSON data into TelemetryDruidFieldAccessorPostAggregator
		err = json.Unmarshal(data, &dst.TelemetryDruidFieldAccessorPostAggregator)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidFieldAccessorPostAggregator, return on the first match
		} else {
			dst.TelemetryDruidFieldAccessorPostAggregator = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidPostAggregator as TelemetryDruidFieldAccessorPostAggregator: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.DruidGreatestLeastPostAggregator'
	if jsonDict["type"] == "telemetry.DruidGreatestLeastPostAggregator" {
		// try to unmarshal JSON data into TelemetryDruidGreatestLeastPostAggregator
		err = json.Unmarshal(data, &dst.TelemetryDruidGreatestLeastPostAggregator)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidGreatestLeastPostAggregator, return on the first match
		} else {
			dst.TelemetryDruidGreatestLeastPostAggregator = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidPostAggregator as TelemetryDruidGreatestLeastPostAggregator: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.DruidHyperUniquePostAggregator'
	if jsonDict["type"] == "telemetry.DruidHyperUniquePostAggregator" {
		// try to unmarshal JSON data into TelemetryDruidHyperUniquePostAggregator
		err = json.Unmarshal(data, &dst.TelemetryDruidHyperUniquePostAggregator)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidHyperUniquePostAggregator, return on the first match
		} else {
			dst.TelemetryDruidHyperUniquePostAggregator = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidPostAggregator as TelemetryDruidHyperUniquePostAggregator: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.DruidThetaSketchEstimatePostAggregator'
	if jsonDict["type"] == "telemetry.DruidThetaSketchEstimatePostAggregator" {
		// try to unmarshal JSON data into TelemetryDruidThetaSketchEstimatePostAggregator
		err = json.Unmarshal(data, &dst.TelemetryDruidThetaSketchEstimatePostAggregator)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidThetaSketchEstimatePostAggregator, return on the first match
		} else {
			dst.TelemetryDruidThetaSketchEstimatePostAggregator = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidPostAggregator as TelemetryDruidThetaSketchEstimatePostAggregator: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.DruidThetaSketchOperationsPostAggregator'
	if jsonDict["type"] == "telemetry.DruidThetaSketchOperationsPostAggregator" {
		// try to unmarshal JSON data into TelemetryDruidThetaSketchOperationsPostAggregator
		err = json.Unmarshal(data, &dst.TelemetryDruidThetaSketchOperationsPostAggregator)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidThetaSketchOperationsPostAggregator, return on the first match
		} else {
			dst.TelemetryDruidThetaSketchOperationsPostAggregator = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidPostAggregator as TelemetryDruidThetaSketchOperationsPostAggregator: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TelemetryDruidPostAggregator) MarshalJSON() ([]byte, error) {
	if src.TelemetryDruidArithmeticPostAggregator != nil {
		return json.Marshal(&src.TelemetryDruidArithmeticPostAggregator)
	}

	if src.TelemetryDruidConstantPostAggregator != nil {
		return json.Marshal(&src.TelemetryDruidConstantPostAggregator)
	}

	if src.TelemetryDruidExpressionPostAggregator != nil {
		return json.Marshal(&src.TelemetryDruidExpressionPostAggregator)
	}

	if src.TelemetryDruidFieldAccessorPostAggregator != nil {
		return json.Marshal(&src.TelemetryDruidFieldAccessorPostAggregator)
	}

	if src.TelemetryDruidGreatestLeastPostAggregator != nil {
		return json.Marshal(&src.TelemetryDruidGreatestLeastPostAggregator)
	}

	if src.TelemetryDruidHyperUniquePostAggregator != nil {
		return json.Marshal(&src.TelemetryDruidHyperUniquePostAggregator)
	}

	if src.TelemetryDruidThetaSketchEstimatePostAggregator != nil {
		return json.Marshal(&src.TelemetryDruidThetaSketchEstimatePostAggregator)
	}

	if src.TelemetryDruidThetaSketchOperationsPostAggregator != nil {
		return json.Marshal(&src.TelemetryDruidThetaSketchOperationsPostAggregator)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TelemetryDruidPostAggregator) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.TelemetryDruidArithmeticPostAggregator != nil {
		return obj.TelemetryDruidArithmeticPostAggregator
	}

	if obj.TelemetryDruidConstantPostAggregator != nil {
		return obj.TelemetryDruidConstantPostAggregator
	}

	if obj.TelemetryDruidExpressionPostAggregator != nil {
		return obj.TelemetryDruidExpressionPostAggregator
	}

	if obj.TelemetryDruidFieldAccessorPostAggregator != nil {
		return obj.TelemetryDruidFieldAccessorPostAggregator
	}

	if obj.TelemetryDruidGreatestLeastPostAggregator != nil {
		return obj.TelemetryDruidGreatestLeastPostAggregator
	}

	if obj.TelemetryDruidHyperUniquePostAggregator != nil {
		return obj.TelemetryDruidHyperUniquePostAggregator
	}

	if obj.TelemetryDruidThetaSketchEstimatePostAggregator != nil {
		return obj.TelemetryDruidThetaSketchEstimatePostAggregator
	}

	if obj.TelemetryDruidThetaSketchOperationsPostAggregator != nil {
		return obj.TelemetryDruidThetaSketchOperationsPostAggregator
	}

	// all schemas are nil
	return nil
}

type NullableTelemetryDruidPostAggregator struct {
	value *TelemetryDruidPostAggregator
	isSet bool
}

func (v NullableTelemetryDruidPostAggregator) Get() *TelemetryDruidPostAggregator {
	return v.value
}

func (v *NullableTelemetryDruidPostAggregator) Set(val *TelemetryDruidPostAggregator) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidPostAggregator) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidPostAggregator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidPostAggregator(val *TelemetryDruidPostAggregator) *NullableTelemetryDruidPostAggregator {
	return &NullableTelemetryDruidPostAggregator{value: val, isSet: true}
}

func (v NullableTelemetryDruidPostAggregator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidPostAggregator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
