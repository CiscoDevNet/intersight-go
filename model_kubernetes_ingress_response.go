/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// KubernetesIngressResponse - The response body of a HTTP GET request for the 'kubernetes.Ingress' resource. The value may be one of the following types. 1. When 'tag' is specified in the URL query, the response schema     is a summary of the tag usage. 1. When '$apply' is specified in the URL query, the response schema     is dynamically-generated schema based on the $apply value. 1. When '$count' is specified in the URL query, the response is     a simple object providing the count of the resources. 1. In all other cases, the response is a list of 'kubernetes.Ingress' resources.
type KubernetesIngressResponse struct {
	KubernetesIngressList *KubernetesIngressList
	MoAggregateTransform  *MoAggregateTransform
	MoDocumentCount       *MoDocumentCount
	MoTagSummary          *MoTagSummary
}

// KubernetesIngressListAsKubernetesIngressResponse is a convenience function that returns KubernetesIngressList wrapped in KubernetesIngressResponse
func KubernetesIngressListAsKubernetesIngressResponse(v *KubernetesIngressList) KubernetesIngressResponse {
	return KubernetesIngressResponse{
		KubernetesIngressList: v,
	}
}

// MoAggregateTransformAsKubernetesIngressResponse is a convenience function that returns MoAggregateTransform wrapped in KubernetesIngressResponse
func MoAggregateTransformAsKubernetesIngressResponse(v *MoAggregateTransform) KubernetesIngressResponse {
	return KubernetesIngressResponse{
		MoAggregateTransform: v,
	}
}

// MoDocumentCountAsKubernetesIngressResponse is a convenience function that returns MoDocumentCount wrapped in KubernetesIngressResponse
func MoDocumentCountAsKubernetesIngressResponse(v *MoDocumentCount) KubernetesIngressResponse {
	return KubernetesIngressResponse{
		MoDocumentCount: v,
	}
}

// MoTagSummaryAsKubernetesIngressResponse is a convenience function that returns MoTagSummary wrapped in KubernetesIngressResponse
func MoTagSummaryAsKubernetesIngressResponse(v *MoTagSummary) KubernetesIngressResponse {
	return KubernetesIngressResponse{
		MoTagSummary: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *KubernetesIngressResponse) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'kubernetes.Ingress.List'
	if jsonDict["ObjectType"] == "kubernetes.Ingress.List" {
		// try to unmarshal JSON data into KubernetesIngressList
		err = json.Unmarshal(data, &dst.KubernetesIngressList)
		if err == nil {
			return nil // data stored in dst.KubernetesIngressList, return on the first match
		} else {
			dst.KubernetesIngressList = nil
			return fmt.Errorf("failed to unmarshal KubernetesIngressResponse as KubernetesIngressList: %s", err.Error())
		}
	}

	// check if the discriminator value is 'mo.AggregateTransform'
	if jsonDict["ObjectType"] == "mo.AggregateTransform" {
		// try to unmarshal JSON data into MoAggregateTransform
		err = json.Unmarshal(data, &dst.MoAggregateTransform)
		if err == nil {
			return nil // data stored in dst.MoAggregateTransform, return on the first match
		} else {
			dst.MoAggregateTransform = nil
			return fmt.Errorf("failed to unmarshal KubernetesIngressResponse as MoAggregateTransform: %s", err.Error())
		}
	}

	// check if the discriminator value is 'mo.DocumentCount'
	if jsonDict["ObjectType"] == "mo.DocumentCount" {
		// try to unmarshal JSON data into MoDocumentCount
		err = json.Unmarshal(data, &dst.MoDocumentCount)
		if err == nil {
			return nil // data stored in dst.MoDocumentCount, return on the first match
		} else {
			dst.MoDocumentCount = nil
			return fmt.Errorf("failed to unmarshal KubernetesIngressResponse as MoDocumentCount: %s", err.Error())
		}
	}

	// check if the discriminator value is 'mo.TagSummary'
	if jsonDict["ObjectType"] == "mo.TagSummary" {
		// try to unmarshal JSON data into MoTagSummary
		err = json.Unmarshal(data, &dst.MoTagSummary)
		if err == nil {
			return nil // data stored in dst.MoTagSummary, return on the first match
		} else {
			dst.MoTagSummary = nil
			return fmt.Errorf("failed to unmarshal KubernetesIngressResponse as MoTagSummary: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src KubernetesIngressResponse) MarshalJSON() ([]byte, error) {
	if src.KubernetesIngressList != nil {
		return json.Marshal(&src.KubernetesIngressList)
	}

	if src.MoAggregateTransform != nil {
		return json.Marshal(&src.MoAggregateTransform)
	}

	if src.MoDocumentCount != nil {
		return json.Marshal(&src.MoDocumentCount)
	}

	if src.MoTagSummary != nil {
		return json.Marshal(&src.MoTagSummary)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *KubernetesIngressResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.KubernetesIngressList != nil {
		return obj.KubernetesIngressList
	}

	if obj.MoAggregateTransform != nil {
		return obj.MoAggregateTransform
	}

	if obj.MoDocumentCount != nil {
		return obj.MoDocumentCount
	}

	if obj.MoTagSummary != nil {
		return obj.MoTagSummary
	}

	// all schemas are nil
	return nil
}

type NullableKubernetesIngressResponse struct {
	value *KubernetesIngressResponse
	isSet bool
}

func (v NullableKubernetesIngressResponse) Get() *KubernetesIngressResponse {
	return v.value
}

func (v *NullableKubernetesIngressResponse) Set(val *KubernetesIngressResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesIngressResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesIngressResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesIngressResponse(val *KubernetesIngressResponse) *NullableKubernetesIngressResponse {
	return &NullableKubernetesIngressResponse{value: val, isSet: true}
}

func (v NullableKubernetesIngressResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesIngressResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
