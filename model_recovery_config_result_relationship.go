/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-18012
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// RecoveryConfigResultRelationship - A relationship to the 'recovery.ConfigResult' resource, or the expanded 'recovery.ConfigResult' resource, or the 'null' value.
type RecoveryConfigResultRelationship struct {
	MoMoRef              *MoMoRef
	RecoveryConfigResult *RecoveryConfigResult
}

// MoMoRefAsRecoveryConfigResultRelationship is a convenience function that returns MoMoRef wrapped in RecoveryConfigResultRelationship
func MoMoRefAsRecoveryConfigResultRelationship(v *MoMoRef) RecoveryConfigResultRelationship {
	return RecoveryConfigResultRelationship{
		MoMoRef: v,
	}
}

// RecoveryConfigResultAsRecoveryConfigResultRelationship is a convenience function that returns RecoveryConfigResult wrapped in RecoveryConfigResultRelationship
func RecoveryConfigResultAsRecoveryConfigResultRelationship(v *RecoveryConfigResult) RecoveryConfigResultRelationship {
	return RecoveryConfigResultRelationship{
		RecoveryConfigResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *RecoveryConfigResultRelationship) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'mo.MoRef'
	if jsonDict["ClassId"] == "mo.MoRef" {
		// try to unmarshal JSON data into MoMoRef
		err = json.Unmarshal(data, &dst.MoMoRef)
		if err == nil {
			return nil // data stored in dst.MoMoRef, return on the first match
		} else {
			dst.MoMoRef = nil
			return fmt.Errorf("failed to unmarshal RecoveryConfigResultRelationship as MoMoRef: %s", err.Error())
		}
	}

	// check if the discriminator value is 'recovery.ConfigResult'
	if jsonDict["ClassId"] == "recovery.ConfigResult" {
		// try to unmarshal JSON data into RecoveryConfigResult
		err = json.Unmarshal(data, &dst.RecoveryConfigResult)
		if err == nil {
			return nil // data stored in dst.RecoveryConfigResult, return on the first match
		} else {
			dst.RecoveryConfigResult = nil
			return fmt.Errorf("failed to unmarshal RecoveryConfigResultRelationship as RecoveryConfigResult: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RecoveryConfigResultRelationship) MarshalJSON() ([]byte, error) {
	if src.MoMoRef != nil {
		return json.Marshal(&src.MoMoRef)
	}

	if src.RecoveryConfigResult != nil {
		return json.Marshal(&src.RecoveryConfigResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RecoveryConfigResultRelationship) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.MoMoRef != nil {
		return obj.MoMoRef
	}

	if obj.RecoveryConfigResult != nil {
		return obj.RecoveryConfigResult
	}

	// all schemas are nil
	return nil
}

type NullableRecoveryConfigResultRelationship struct {
	value *RecoveryConfigResultRelationship
	isSet bool
}

func (v NullableRecoveryConfigResultRelationship) Get() *RecoveryConfigResultRelationship {
	return v.value
}

func (v *NullableRecoveryConfigResultRelationship) Set(val *RecoveryConfigResultRelationship) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoveryConfigResultRelationship) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoveryConfigResultRelationship) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoveryConfigResultRelationship(val *RecoveryConfigResultRelationship) *NullableRecoveryConfigResultRelationship {
	return &NullableRecoveryConfigResultRelationship{value: val, isSet: true}
}

func (v NullableRecoveryConfigResultRelationship) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoveryConfigResultRelationship) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
