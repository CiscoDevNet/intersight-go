/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-17227
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// StorageNetAppScheduleResponse - The response body of a HTTP GET request for the 'storage.NetAppSchedule' resource. The value may be one of the following types. 1. When 'tag' is specified in the URL query, the response schema     is a summary of the tag usage. 1. When '$apply' is specified in the URL query, the response schema     is dynamically-generated schema based on the $apply value. 1. When '$count' is specified in the URL query, the response is     a simple object providing the count of the resources. 1. In all other cases, the response is a list of 'storage.NetAppSchedule' resources.
type StorageNetAppScheduleResponse struct {
	MoAggregateTransform      *MoAggregateTransform
	MoDocumentCount           *MoDocumentCount
	MoTagSummary              *MoTagSummary
	StorageNetAppScheduleList *StorageNetAppScheduleList
}

// MoAggregateTransformAsStorageNetAppScheduleResponse is a convenience function that returns MoAggregateTransform wrapped in StorageNetAppScheduleResponse
func MoAggregateTransformAsStorageNetAppScheduleResponse(v *MoAggregateTransform) StorageNetAppScheduleResponse {
	return StorageNetAppScheduleResponse{
		MoAggregateTransform: v,
	}
}

// MoDocumentCountAsStorageNetAppScheduleResponse is a convenience function that returns MoDocumentCount wrapped in StorageNetAppScheduleResponse
func MoDocumentCountAsStorageNetAppScheduleResponse(v *MoDocumentCount) StorageNetAppScheduleResponse {
	return StorageNetAppScheduleResponse{
		MoDocumentCount: v,
	}
}

// MoTagSummaryAsStorageNetAppScheduleResponse is a convenience function that returns MoTagSummary wrapped in StorageNetAppScheduleResponse
func MoTagSummaryAsStorageNetAppScheduleResponse(v *MoTagSummary) StorageNetAppScheduleResponse {
	return StorageNetAppScheduleResponse{
		MoTagSummary: v,
	}
}

// StorageNetAppScheduleListAsStorageNetAppScheduleResponse is a convenience function that returns StorageNetAppScheduleList wrapped in StorageNetAppScheduleResponse
func StorageNetAppScheduleListAsStorageNetAppScheduleResponse(v *StorageNetAppScheduleList) StorageNetAppScheduleResponse {
	return StorageNetAppScheduleResponse{
		StorageNetAppScheduleList: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *StorageNetAppScheduleResponse) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'mo.AggregateTransform'
	if jsonDict["ObjectType"] == "mo.AggregateTransform" {
		// try to unmarshal JSON data into MoAggregateTransform
		err = json.Unmarshal(data, &dst.MoAggregateTransform)
		if err == nil {
			return nil // data stored in dst.MoAggregateTransform, return on the first match
		} else {
			dst.MoAggregateTransform = nil
			return fmt.Errorf("failed to unmarshal StorageNetAppScheduleResponse as MoAggregateTransform: %s", err.Error())
		}
	}

	// check if the discriminator value is 'mo.DocumentCount'
	if jsonDict["ObjectType"] == "mo.DocumentCount" {
		// try to unmarshal JSON data into MoDocumentCount
		err = json.Unmarshal(data, &dst.MoDocumentCount)
		if err == nil {
			return nil // data stored in dst.MoDocumentCount, return on the first match
		} else {
			dst.MoDocumentCount = nil
			return fmt.Errorf("failed to unmarshal StorageNetAppScheduleResponse as MoDocumentCount: %s", err.Error())
		}
	}

	// check if the discriminator value is 'mo.TagSummary'
	if jsonDict["ObjectType"] == "mo.TagSummary" {
		// try to unmarshal JSON data into MoTagSummary
		err = json.Unmarshal(data, &dst.MoTagSummary)
		if err == nil {
			return nil // data stored in dst.MoTagSummary, return on the first match
		} else {
			dst.MoTagSummary = nil
			return fmt.Errorf("failed to unmarshal StorageNetAppScheduleResponse as MoTagSummary: %s", err.Error())
		}
	}

	// check if the discriminator value is 'storage.NetAppSchedule.List'
	if jsonDict["ObjectType"] == "storage.NetAppSchedule.List" {
		// try to unmarshal JSON data into StorageNetAppScheduleList
		err = json.Unmarshal(data, &dst.StorageNetAppScheduleList)
		if err == nil {
			return nil // data stored in dst.StorageNetAppScheduleList, return on the first match
		} else {
			dst.StorageNetAppScheduleList = nil
			return fmt.Errorf("failed to unmarshal StorageNetAppScheduleResponse as StorageNetAppScheduleList: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src StorageNetAppScheduleResponse) MarshalJSON() ([]byte, error) {
	if src.MoAggregateTransform != nil {
		return json.Marshal(&src.MoAggregateTransform)
	}

	if src.MoDocumentCount != nil {
		return json.Marshal(&src.MoDocumentCount)
	}

	if src.MoTagSummary != nil {
		return json.Marshal(&src.MoTagSummary)
	}

	if src.StorageNetAppScheduleList != nil {
		return json.Marshal(&src.StorageNetAppScheduleList)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *StorageNetAppScheduleResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.MoAggregateTransform != nil {
		return obj.MoAggregateTransform
	}

	if obj.MoDocumentCount != nil {
		return obj.MoDocumentCount
	}

	if obj.MoTagSummary != nil {
		return obj.MoTagSummary
	}

	if obj.StorageNetAppScheduleList != nil {
		return obj.StorageNetAppScheduleList
	}

	// all schemas are nil
	return nil
}

type NullableStorageNetAppScheduleResponse struct {
	value *StorageNetAppScheduleResponse
	isSet bool
}

func (v NullableStorageNetAppScheduleResponse) Get() *StorageNetAppScheduleResponse {
	return v.value
}

func (v *NullableStorageNetAppScheduleResponse) Set(val *StorageNetAppScheduleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageNetAppScheduleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageNetAppScheduleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageNetAppScheduleResponse(val *StorageNetAppScheduleResponse) *NullableStorageNetAppScheduleResponse {
	return &NullableStorageNetAppScheduleResponse{value: val, isSet: true}
}

func (v NullableStorageNetAppScheduleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageNetAppScheduleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
