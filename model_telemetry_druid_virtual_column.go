/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-2025071017
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// TelemetryDruidVirtualColumn - struct for TelemetryDruidVirtualColumn
type TelemetryDruidVirtualColumn struct {
	TelemetryDruidExpressionVirtualColumn   *TelemetryDruidExpressionVirtualColumn
	TelemetryDruidListFilteredVirtualColumn *TelemetryDruidListFilteredVirtualColumn
	TelemetryNestedFieldVirtualColumn       *TelemetryNestedFieldVirtualColumn
}

// TelemetryDruidExpressionVirtualColumnAsTelemetryDruidVirtualColumn is a convenience function that returns TelemetryDruidExpressionVirtualColumn wrapped in TelemetryDruidVirtualColumn
func TelemetryDruidExpressionVirtualColumnAsTelemetryDruidVirtualColumn(v *TelemetryDruidExpressionVirtualColumn) TelemetryDruidVirtualColumn {
	return TelemetryDruidVirtualColumn{
		TelemetryDruidExpressionVirtualColumn: v,
	}
}

// TelemetryDruidListFilteredVirtualColumnAsTelemetryDruidVirtualColumn is a convenience function that returns TelemetryDruidListFilteredVirtualColumn wrapped in TelemetryDruidVirtualColumn
func TelemetryDruidListFilteredVirtualColumnAsTelemetryDruidVirtualColumn(v *TelemetryDruidListFilteredVirtualColumn) TelemetryDruidVirtualColumn {
	return TelemetryDruidVirtualColumn{
		TelemetryDruidListFilteredVirtualColumn: v,
	}
}

// TelemetryNestedFieldVirtualColumnAsTelemetryDruidVirtualColumn is a convenience function that returns TelemetryNestedFieldVirtualColumn wrapped in TelemetryDruidVirtualColumn
func TelemetryNestedFieldVirtualColumnAsTelemetryDruidVirtualColumn(v *TelemetryNestedFieldVirtualColumn) TelemetryDruidVirtualColumn {
	return TelemetryDruidVirtualColumn{
		TelemetryNestedFieldVirtualColumn: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *TelemetryDruidVirtualColumn) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'expression'
	if jsonDict["type"] == "expression" {
		// try to unmarshal JSON data into TelemetryDruidExpressionVirtualColumn
		err = json.Unmarshal(data, &dst.TelemetryDruidExpressionVirtualColumn)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExpressionVirtualColumn, return on the first match
		} else {
			dst.TelemetryDruidExpressionVirtualColumn = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidVirtualColumn as TelemetryDruidExpressionVirtualColumn: %s", err.Error())
		}
	}

	// check if the discriminator value is 'mv-filtered'
	if jsonDict["type"] == "mv-filtered" {
		// try to unmarshal JSON data into TelemetryDruidListFilteredVirtualColumn
		err = json.Unmarshal(data, &dst.TelemetryDruidListFilteredVirtualColumn)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidListFilteredVirtualColumn, return on the first match
		} else {
			dst.TelemetryDruidListFilteredVirtualColumn = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidVirtualColumn as TelemetryDruidListFilteredVirtualColumn: %s", err.Error())
		}
	}

	// check if the discriminator value is 'nested-field'
	if jsonDict["type"] == "nested-field" {
		// try to unmarshal JSON data into TelemetryNestedFieldVirtualColumn
		err = json.Unmarshal(data, &dst.TelemetryNestedFieldVirtualColumn)
		if err == nil {
			return nil // data stored in dst.TelemetryNestedFieldVirtualColumn, return on the first match
		} else {
			dst.TelemetryNestedFieldVirtualColumn = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidVirtualColumn as TelemetryNestedFieldVirtualColumn: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.DruidExpressionVirtualColumn'
	if jsonDict["type"] == "telemetry.DruidExpressionVirtualColumn" {
		// try to unmarshal JSON data into TelemetryDruidExpressionVirtualColumn
		err = json.Unmarshal(data, &dst.TelemetryDruidExpressionVirtualColumn)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExpressionVirtualColumn, return on the first match
		} else {
			dst.TelemetryDruidExpressionVirtualColumn = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidVirtualColumn as TelemetryDruidExpressionVirtualColumn: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.DruidListFilteredVirtualColumn'
	if jsonDict["type"] == "telemetry.DruidListFilteredVirtualColumn" {
		// try to unmarshal JSON data into TelemetryDruidListFilteredVirtualColumn
		err = json.Unmarshal(data, &dst.TelemetryDruidListFilteredVirtualColumn)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidListFilteredVirtualColumn, return on the first match
		} else {
			dst.TelemetryDruidListFilteredVirtualColumn = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidVirtualColumn as TelemetryDruidListFilteredVirtualColumn: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.NestedFieldVirtualColumn'
	if jsonDict["type"] == "telemetry.NestedFieldVirtualColumn" {
		// try to unmarshal JSON data into TelemetryNestedFieldVirtualColumn
		err = json.Unmarshal(data, &dst.TelemetryNestedFieldVirtualColumn)
		if err == nil {
			return nil // data stored in dst.TelemetryNestedFieldVirtualColumn, return on the first match
		} else {
			dst.TelemetryNestedFieldVirtualColumn = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidVirtualColumn as TelemetryNestedFieldVirtualColumn: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TelemetryDruidVirtualColumn) MarshalJSON() ([]byte, error) {
	if src.TelemetryDruidExpressionVirtualColumn != nil {
		return json.Marshal(&src.TelemetryDruidExpressionVirtualColumn)
	}

	if src.TelemetryDruidListFilteredVirtualColumn != nil {
		return json.Marshal(&src.TelemetryDruidListFilteredVirtualColumn)
	}

	if src.TelemetryNestedFieldVirtualColumn != nil {
		return json.Marshal(&src.TelemetryNestedFieldVirtualColumn)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TelemetryDruidVirtualColumn) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.TelemetryDruidExpressionVirtualColumn != nil {
		return obj.TelemetryDruidExpressionVirtualColumn
	}

	if obj.TelemetryDruidListFilteredVirtualColumn != nil {
		return obj.TelemetryDruidListFilteredVirtualColumn
	}

	if obj.TelemetryNestedFieldVirtualColumn != nil {
		return obj.TelemetryNestedFieldVirtualColumn
	}

	// all schemas are nil
	return nil
}

type NullableTelemetryDruidVirtualColumn struct {
	value *TelemetryDruidVirtualColumn
	isSet bool
}

func (v NullableTelemetryDruidVirtualColumn) Get() *TelemetryDruidVirtualColumn {
	return v.value
}

func (v *NullableTelemetryDruidVirtualColumn) Set(val *TelemetryDruidVirtualColumn) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidVirtualColumn) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidVirtualColumn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidVirtualColumn(val *TelemetryDruidVirtualColumn) *NullableTelemetryDruidVirtualColumn {
	return &NullableTelemetryDruidVirtualColumn{value: val, isSet: true}
}

func (v NullableTelemetryDruidVirtualColumn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidVirtualColumn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
