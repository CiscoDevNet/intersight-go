/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-15830
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the NetworkVethernet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkVethernet{}

// NetworkVethernet Vethernet configured on a Fabric Interconnect.
type NetworkVethernet struct {
	InventoryBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Description for the vNIC.
	Description *string `json:"Description,omitempty"`
	// Vethernet Identifier on a Fabric Interconnect.
	VethId                  *int64                                      `json:"VethId,omitempty"`
	AdapterHostEthInterface NullableAdapterHostEthInterfaceRelationship `json:"AdapterHostEthInterface,omitempty"`
	NetworkElement          NullableNetworkElementRelationship          `json:"NetworkElement,omitempty"`
	RegisteredDevice        NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties    map[string]interface{}
}

type _NetworkVethernet NetworkVethernet

// NewNetworkVethernet instantiates a new NetworkVethernet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkVethernet(classId string, objectType string) *NetworkVethernet {
	this := NetworkVethernet{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewNetworkVethernetWithDefaults instantiates a new NetworkVethernet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkVethernetWithDefaults() *NetworkVethernet {
	this := NetworkVethernet{}
	var classId string = "network.Vethernet"
	this.ClassId = classId
	var objectType string = "network.Vethernet"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *NetworkVethernet) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *NetworkVethernet) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *NetworkVethernet) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *NetworkVethernet) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *NetworkVethernet) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *NetworkVethernet) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *NetworkVethernet) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVethernet) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *NetworkVethernet) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *NetworkVethernet) SetDescription(v string) {
	o.Description = &v
}

// GetVethId returns the VethId field value if set, zero value otherwise.
func (o *NetworkVethernet) GetVethId() int64 {
	if o == nil || IsNil(o.VethId) {
		var ret int64
		return ret
	}
	return *o.VethId
}

// GetVethIdOk returns a tuple with the VethId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVethernet) GetVethIdOk() (*int64, bool) {
	if o == nil || IsNil(o.VethId) {
		return nil, false
	}
	return o.VethId, true
}

// HasVethId returns a boolean if a field has been set.
func (o *NetworkVethernet) HasVethId() bool {
	if o != nil && !IsNil(o.VethId) {
		return true
	}

	return false
}

// SetVethId gets a reference to the given int64 and assigns it to the VethId field.
func (o *NetworkVethernet) SetVethId(v int64) {
	o.VethId = &v
}

// GetAdapterHostEthInterface returns the AdapterHostEthInterface field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkVethernet) GetAdapterHostEthInterface() AdapterHostEthInterfaceRelationship {
	if o == nil || IsNil(o.AdapterHostEthInterface.Get()) {
		var ret AdapterHostEthInterfaceRelationship
		return ret
	}
	return *o.AdapterHostEthInterface.Get()
}

// GetAdapterHostEthInterfaceOk returns a tuple with the AdapterHostEthInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkVethernet) GetAdapterHostEthInterfaceOk() (*AdapterHostEthInterfaceRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdapterHostEthInterface.Get(), o.AdapterHostEthInterface.IsSet()
}

// HasAdapterHostEthInterface returns a boolean if a field has been set.
func (o *NetworkVethernet) HasAdapterHostEthInterface() bool {
	if o != nil && o.AdapterHostEthInterface.IsSet() {
		return true
	}

	return false
}

// SetAdapterHostEthInterface gets a reference to the given NullableAdapterHostEthInterfaceRelationship and assigns it to the AdapterHostEthInterface field.
func (o *NetworkVethernet) SetAdapterHostEthInterface(v AdapterHostEthInterfaceRelationship) {
	o.AdapterHostEthInterface.Set(&v)
}

// SetAdapterHostEthInterfaceNil sets the value for AdapterHostEthInterface to be an explicit nil
func (o *NetworkVethernet) SetAdapterHostEthInterfaceNil() {
	o.AdapterHostEthInterface.Set(nil)
}

// UnsetAdapterHostEthInterface ensures that no value is present for AdapterHostEthInterface, not even an explicit nil
func (o *NetworkVethernet) UnsetAdapterHostEthInterface() {
	o.AdapterHostEthInterface.Unset()
}

// GetNetworkElement returns the NetworkElement field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkVethernet) GetNetworkElement() NetworkElementRelationship {
	if o == nil || IsNil(o.NetworkElement.Get()) {
		var ret NetworkElementRelationship
		return ret
	}
	return *o.NetworkElement.Get()
}

// GetNetworkElementOk returns a tuple with the NetworkElement field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkVethernet) GetNetworkElementOk() (*NetworkElementRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetworkElement.Get(), o.NetworkElement.IsSet()
}

// HasNetworkElement returns a boolean if a field has been set.
func (o *NetworkVethernet) HasNetworkElement() bool {
	if o != nil && o.NetworkElement.IsSet() {
		return true
	}

	return false
}

// SetNetworkElement gets a reference to the given NullableNetworkElementRelationship and assigns it to the NetworkElement field.
func (o *NetworkVethernet) SetNetworkElement(v NetworkElementRelationship) {
	o.NetworkElement.Set(&v)
}

// SetNetworkElementNil sets the value for NetworkElement to be an explicit nil
func (o *NetworkVethernet) SetNetworkElementNil() {
	o.NetworkElement.Set(nil)
}

// UnsetNetworkElement ensures that no value is present for NetworkElement, not even an explicit nil
func (o *NetworkVethernet) UnsetNetworkElement() {
	o.NetworkElement.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkVethernet) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkVethernet) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *NetworkVethernet) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *NetworkVethernet) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *NetworkVethernet) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *NetworkVethernet) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o NetworkVethernet) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkVethernet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedInventoryBase, errInventoryBase := json.Marshal(o.InventoryBase)
	if errInventoryBase != nil {
		return map[string]interface{}{}, errInventoryBase
	}
	errInventoryBase = json.Unmarshal([]byte(serializedInventoryBase), &toSerialize)
	if errInventoryBase != nil {
		return map[string]interface{}{}, errInventoryBase
	}
	toSerialize["ClassId"] = o.ClassId
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.VethId) {
		toSerialize["VethId"] = o.VethId
	}
	if o.AdapterHostEthInterface.IsSet() {
		toSerialize["AdapterHostEthInterface"] = o.AdapterHostEthInterface.Get()
	}
	if o.NetworkElement.IsSet() {
		toSerialize["NetworkElement"] = o.NetworkElement.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NetworkVethernet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	type NetworkVethernetWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Description for the vNIC.
		Description *string `json:"Description,omitempty"`
		// Vethernet Identifier on a Fabric Interconnect.
		VethId                  *int64                                      `json:"VethId,omitempty"`
		AdapterHostEthInterface NullableAdapterHostEthInterfaceRelationship `json:"AdapterHostEthInterface,omitempty"`
		NetworkElement          NullableNetworkElementRelationship          `json:"NetworkElement,omitempty"`
		RegisteredDevice        NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varNetworkVethernetWithoutEmbeddedStruct := NetworkVethernetWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varNetworkVethernetWithoutEmbeddedStruct)
	if err == nil {
		varNetworkVethernet := _NetworkVethernet{}
		varNetworkVethernet.ClassId = varNetworkVethernetWithoutEmbeddedStruct.ClassId
		varNetworkVethernet.ObjectType = varNetworkVethernetWithoutEmbeddedStruct.ObjectType
		varNetworkVethernet.Description = varNetworkVethernetWithoutEmbeddedStruct.Description
		varNetworkVethernet.VethId = varNetworkVethernetWithoutEmbeddedStruct.VethId
		varNetworkVethernet.AdapterHostEthInterface = varNetworkVethernetWithoutEmbeddedStruct.AdapterHostEthInterface
		varNetworkVethernet.NetworkElement = varNetworkVethernetWithoutEmbeddedStruct.NetworkElement
		varNetworkVethernet.RegisteredDevice = varNetworkVethernetWithoutEmbeddedStruct.RegisteredDevice
		*o = NetworkVethernet(varNetworkVethernet)
	} else {
		return err
	}

	varNetworkVethernet := _NetworkVethernet{}

	err = json.Unmarshal(data, &varNetworkVethernet)
	if err == nil {
		o.InventoryBase = varNetworkVethernet.InventoryBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "VethId")
		delete(additionalProperties, "AdapterHostEthInterface")
		delete(additionalProperties, "NetworkElement")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectInventoryBase := reflect.ValueOf(o.InventoryBase)
		for i := 0; i < reflectInventoryBase.Type().NumField(); i++ {
			t := reflectInventoryBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworkVethernet struct {
	value *NetworkVethernet
	isSet bool
}

func (v NullableNetworkVethernet) Get() *NetworkVethernet {
	return v.value
}

func (v *NullableNetworkVethernet) Set(val *NetworkVethernet) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkVethernet) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkVethernet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkVethernet(val *NetworkVethernet) *NullableNetworkVethernet {
	return &NullableNetworkVethernet{value: val, isSet: true}
}

func (v NullableNetworkVethernet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkVethernet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
