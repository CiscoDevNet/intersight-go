/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-18012
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// checks if the TelemetryDruidUnionDataSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryDruidUnionDataSource{}

// TelemetryDruidUnionDataSource This data source unions two or more table data sources. Note that the data sources being unioned should have the same schema.
type TelemetryDruidUnionDataSource struct {
	// The type of data source.
	Type string `json:"type"`
	// A list of data sources.
	DataSources          []string `json:"dataSources"`
	AdditionalProperties map[string]interface{}
}

type _TelemetryDruidUnionDataSource TelemetryDruidUnionDataSource

// NewTelemetryDruidUnionDataSource instantiates a new TelemetryDruidUnionDataSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryDruidUnionDataSource(type_ string, dataSources []string) *TelemetryDruidUnionDataSource {
	this := TelemetryDruidUnionDataSource{}
	this.Type = type_
	this.DataSources = dataSources
	return &this
}

// NewTelemetryDruidUnionDataSourceWithDefaults instantiates a new TelemetryDruidUnionDataSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryDruidUnionDataSourceWithDefaults() *TelemetryDruidUnionDataSource {
	this := TelemetryDruidUnionDataSource{}
	return &this
}

// GetType returns the Type field value
func (o *TelemetryDruidUnionDataSource) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidUnionDataSource) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TelemetryDruidUnionDataSource) SetType(v string) {
	o.Type = v
}

// GetDataSources returns the DataSources field value
func (o *TelemetryDruidUnionDataSource) GetDataSources() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DataSources
}

// GetDataSourcesOk returns a tuple with the DataSources field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidUnionDataSource) GetDataSourcesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataSources, true
}

// SetDataSources sets field value
func (o *TelemetryDruidUnionDataSource) SetDataSources(v []string) {
	o.DataSources = v
}

func (o TelemetryDruidUnionDataSource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryDruidUnionDataSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["dataSources"] = o.DataSources

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TelemetryDruidUnionDataSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"dataSources",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varTelemetryDruidUnionDataSource := _TelemetryDruidUnionDataSource{}

	err = json.Unmarshal(data, &varTelemetryDruidUnionDataSource)

	if err != nil {
		return err
	}

	*o = TelemetryDruidUnionDataSource(varTelemetryDruidUnionDataSource)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "dataSources")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTelemetryDruidUnionDataSource struct {
	value *TelemetryDruidUnionDataSource
	isSet bool
}

func (v NullableTelemetryDruidUnionDataSource) Get() *TelemetryDruidUnionDataSource {
	return v.value
}

func (v *NullableTelemetryDruidUnionDataSource) Set(val *TelemetryDruidUnionDataSource) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidUnionDataSource) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidUnionDataSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidUnionDataSource(val *TelemetryDruidUnionDataSource) *NullableTelemetryDruidUnionDataSource {
	return &NullableTelemetryDruidUnionDataSource{value: val, isSet: true}
}

func (v NullableTelemetryDruidUnionDataSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidUnionDataSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
