/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-18369
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// checks if the TelemetryDruidExtractionFunctionCascade type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryDruidExtractionFunctionCascade{}

// TelemetryDruidExtractionFunctionCascade Provides chained execution of extraction functions. A property of extractionFns contains an array of any extraction functions, which is executed in the array index order.
type TelemetryDruidExtractionFunctionCascade struct {
	Type                 string                             `json:"type"`
	ExtractionFns        []TelemetryDruidExtractionFunction `json:"extractionFns,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TelemetryDruidExtractionFunctionCascade TelemetryDruidExtractionFunctionCascade

// NewTelemetryDruidExtractionFunctionCascade instantiates a new TelemetryDruidExtractionFunctionCascade object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryDruidExtractionFunctionCascade(type_ string) *TelemetryDruidExtractionFunctionCascade {
	this := TelemetryDruidExtractionFunctionCascade{}
	this.Type = type_
	return &this
}

// NewTelemetryDruidExtractionFunctionCascadeWithDefaults instantiates a new TelemetryDruidExtractionFunctionCascade object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryDruidExtractionFunctionCascadeWithDefaults() *TelemetryDruidExtractionFunctionCascade {
	this := TelemetryDruidExtractionFunctionCascade{}
	return &this
}

// GetType returns the Type field value
func (o *TelemetryDruidExtractionFunctionCascade) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidExtractionFunctionCascade) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TelemetryDruidExtractionFunctionCascade) SetType(v string) {
	o.Type = v
}

// GetExtractionFns returns the ExtractionFns field value if set, zero value otherwise.
func (o *TelemetryDruidExtractionFunctionCascade) GetExtractionFns() []TelemetryDruidExtractionFunction {
	if o == nil || IsNil(o.ExtractionFns) {
		var ret []TelemetryDruidExtractionFunction
		return ret
	}
	return o.ExtractionFns
}

// GetExtractionFnsOk returns a tuple with the ExtractionFns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidExtractionFunctionCascade) GetExtractionFnsOk() ([]TelemetryDruidExtractionFunction, bool) {
	if o == nil || IsNil(o.ExtractionFns) {
		return nil, false
	}
	return o.ExtractionFns, true
}

// HasExtractionFns returns a boolean if a field has been set.
func (o *TelemetryDruidExtractionFunctionCascade) HasExtractionFns() bool {
	if o != nil && !IsNil(o.ExtractionFns) {
		return true
	}

	return false
}

// SetExtractionFns gets a reference to the given []TelemetryDruidExtractionFunction and assigns it to the ExtractionFns field.
func (o *TelemetryDruidExtractionFunctionCascade) SetExtractionFns(v []TelemetryDruidExtractionFunction) {
	o.ExtractionFns = v
}

func (o TelemetryDruidExtractionFunctionCascade) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryDruidExtractionFunctionCascade) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.ExtractionFns) {
		toSerialize["extractionFns"] = o.ExtractionFns
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TelemetryDruidExtractionFunctionCascade) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varTelemetryDruidExtractionFunctionCascade := _TelemetryDruidExtractionFunctionCascade{}

	err = json.Unmarshal(data, &varTelemetryDruidExtractionFunctionCascade)

	if err != nil {
		return err
	}

	*o = TelemetryDruidExtractionFunctionCascade(varTelemetryDruidExtractionFunctionCascade)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "extractionFns")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTelemetryDruidExtractionFunctionCascade struct {
	value *TelemetryDruidExtractionFunctionCascade
	isSet bool
}

func (v NullableTelemetryDruidExtractionFunctionCascade) Get() *TelemetryDruidExtractionFunctionCascade {
	return v.value
}

func (v *NullableTelemetryDruidExtractionFunctionCascade) Set(val *TelemetryDruidExtractionFunctionCascade) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidExtractionFunctionCascade) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidExtractionFunctionCascade) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidExtractionFunctionCascade(val *TelemetryDruidExtractionFunctionCascade) *NullableTelemetryDruidExtractionFunctionCascade {
	return &NullableTelemetryDruidExtractionFunctionCascade{value: val, isSet: true}
}

func (v NullableTelemetryDruidExtractionFunctionCascade) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidExtractionFunctionCascade) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
