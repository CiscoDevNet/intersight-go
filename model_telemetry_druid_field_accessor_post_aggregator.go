/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-2025071017
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// checks if the TelemetryDruidFieldAccessorPostAggregator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryDruidFieldAccessorPostAggregator{}

// TelemetryDruidFieldAccessorPostAggregator These post-aggregators return the value produced by the specified aggregator. 'fieldName' refers to the output name of the aggregator given in the aggregations portion of the query. For complex aggregators, like \"cardinality\" and \"hyperUnique\", the type of the post-aggregator determines what the post-aggregator will return. Use type \"fieldAccess\" to return the raw aggregation object, or use type \"finalizingFieldAccess\" to return a finalized value, such as an estimated cardinality.
type TelemetryDruidFieldAccessorPostAggregator struct {
	// The post-aggregator type.
	Type string `json:"type"`
	// Fields processed by post aggregator
	Fields []TelemetryDruidPostAggregator `json:"fields,omitempty"`
	// Output name for the post-aggregator.
	Name *string `json:"name,omitempty"`
	// Name of the metric column.
	FieldName            *string `json:"fieldName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TelemetryDruidFieldAccessorPostAggregator TelemetryDruidFieldAccessorPostAggregator

// NewTelemetryDruidFieldAccessorPostAggregator instantiates a new TelemetryDruidFieldAccessorPostAggregator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryDruidFieldAccessorPostAggregator(type_ string) *TelemetryDruidFieldAccessorPostAggregator {
	this := TelemetryDruidFieldAccessorPostAggregator{}
	this.Type = type_
	return &this
}

// NewTelemetryDruidFieldAccessorPostAggregatorWithDefaults instantiates a new TelemetryDruidFieldAccessorPostAggregator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryDruidFieldAccessorPostAggregatorWithDefaults() *TelemetryDruidFieldAccessorPostAggregator {
	this := TelemetryDruidFieldAccessorPostAggregator{}
	return &this
}

// GetType returns the Type field value
func (o *TelemetryDruidFieldAccessorPostAggregator) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidFieldAccessorPostAggregator) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TelemetryDruidFieldAccessorPostAggregator) SetType(v string) {
	o.Type = v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *TelemetryDruidFieldAccessorPostAggregator) GetFields() []TelemetryDruidPostAggregator {
	if o == nil || IsNil(o.Fields) {
		var ret []TelemetryDruidPostAggregator
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidFieldAccessorPostAggregator) GetFieldsOk() ([]TelemetryDruidPostAggregator, bool) {
	if o == nil || IsNil(o.Fields) {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *TelemetryDruidFieldAccessorPostAggregator) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given []TelemetryDruidPostAggregator and assigns it to the Fields field.
func (o *TelemetryDruidFieldAccessorPostAggregator) SetFields(v []TelemetryDruidPostAggregator) {
	o.Fields = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TelemetryDruidFieldAccessorPostAggregator) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidFieldAccessorPostAggregator) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TelemetryDruidFieldAccessorPostAggregator) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TelemetryDruidFieldAccessorPostAggregator) SetName(v string) {
	o.Name = &v
}

// GetFieldName returns the FieldName field value if set, zero value otherwise.
func (o *TelemetryDruidFieldAccessorPostAggregator) GetFieldName() string {
	if o == nil || IsNil(o.FieldName) {
		var ret string
		return ret
	}
	return *o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidFieldAccessorPostAggregator) GetFieldNameOk() (*string, bool) {
	if o == nil || IsNil(o.FieldName) {
		return nil, false
	}
	return o.FieldName, true
}

// HasFieldName returns a boolean if a field has been set.
func (o *TelemetryDruidFieldAccessorPostAggregator) HasFieldName() bool {
	if o != nil && !IsNil(o.FieldName) {
		return true
	}

	return false
}

// SetFieldName gets a reference to the given string and assigns it to the FieldName field.
func (o *TelemetryDruidFieldAccessorPostAggregator) SetFieldName(v string) {
	o.FieldName = &v
}

func (o TelemetryDruidFieldAccessorPostAggregator) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryDruidFieldAccessorPostAggregator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.FieldName) {
		toSerialize["fieldName"] = o.FieldName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TelemetryDruidFieldAccessorPostAggregator) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varTelemetryDruidFieldAccessorPostAggregator := _TelemetryDruidFieldAccessorPostAggregator{}

	err = json.Unmarshal(data, &varTelemetryDruidFieldAccessorPostAggregator)

	if err != nil {
		return err
	}

	*o = TelemetryDruidFieldAccessorPostAggregator(varTelemetryDruidFieldAccessorPostAggregator)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "fields")
		delete(additionalProperties, "name")
		delete(additionalProperties, "fieldName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTelemetryDruidFieldAccessorPostAggregator struct {
	value *TelemetryDruidFieldAccessorPostAggregator
	isSet bool
}

func (v NullableTelemetryDruidFieldAccessorPostAggregator) Get() *TelemetryDruidFieldAccessorPostAggregator {
	return v.value
}

func (v *NullableTelemetryDruidFieldAccessorPostAggregator) Set(val *TelemetryDruidFieldAccessorPostAggregator) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidFieldAccessorPostAggregator) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidFieldAccessorPostAggregator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidFieldAccessorPostAggregator(val *TelemetryDruidFieldAccessorPostAggregator) *NullableTelemetryDruidFieldAccessorPostAggregator {
	return &NullableTelemetryDruidFieldAccessorPostAggregator{value: val, isSet: true}
}

func (v NullableTelemetryDruidFieldAccessorPostAggregator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidFieldAccessorPostAggregator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
