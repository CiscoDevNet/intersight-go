/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-2024120409
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the TelemetryDruidDurationGranularity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryDruidDurationGranularity{}

// TelemetryDruidDurationGranularity Duration granularities are specified as an exact duration in milliseconds and timestamps are returned as UTC. Duration granularity values are in milliseconds. They also support specifying an optional origin, which defines where to start counting time buckets from (defaults to 1970-01-01T00:00:00Z).
type TelemetryDruidDurationGranularity struct {
	// the type of granularity.
	Type string `json:"type"`
	// The duration in milliseconds.
	Duration int64 `json:"duration"`
	// An optional value specifying when to start counting time buckets from. The default value is 1970-01-01T00:00:00Z.
	Origin               *time.Time `json:"origin,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TelemetryDruidDurationGranularity TelemetryDruidDurationGranularity

// NewTelemetryDruidDurationGranularity instantiates a new TelemetryDruidDurationGranularity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryDruidDurationGranularity(type_ string, duration int64) *TelemetryDruidDurationGranularity {
	this := TelemetryDruidDurationGranularity{}
	this.Type = type_
	this.Duration = duration
	return &this
}

// NewTelemetryDruidDurationGranularityWithDefaults instantiates a new TelemetryDruidDurationGranularity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryDruidDurationGranularityWithDefaults() *TelemetryDruidDurationGranularity {
	this := TelemetryDruidDurationGranularity{}
	return &this
}

// GetType returns the Type field value
func (o *TelemetryDruidDurationGranularity) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidDurationGranularity) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TelemetryDruidDurationGranularity) SetType(v string) {
	o.Type = v
}

// GetDuration returns the Duration field value
func (o *TelemetryDruidDurationGranularity) GetDuration() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidDurationGranularity) GetDurationOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *TelemetryDruidDurationGranularity) SetDuration(v int64) {
	o.Duration = v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *TelemetryDruidDurationGranularity) GetOrigin() time.Time {
	if o == nil || IsNil(o.Origin) {
		var ret time.Time
		return ret
	}
	return *o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidDurationGranularity) GetOriginOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Origin) {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *TelemetryDruidDurationGranularity) HasOrigin() bool {
	if o != nil && !IsNil(o.Origin) {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given time.Time and assigns it to the Origin field.
func (o *TelemetryDruidDurationGranularity) SetOrigin(v time.Time) {
	o.Origin = &v
}

func (o TelemetryDruidDurationGranularity) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryDruidDurationGranularity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["duration"] = o.Duration
	if !IsNil(o.Origin) {
		toSerialize["origin"] = o.Origin
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TelemetryDruidDurationGranularity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"duration",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varTelemetryDruidDurationGranularity := _TelemetryDruidDurationGranularity{}

	err = json.Unmarshal(data, &varTelemetryDruidDurationGranularity)

	if err != nil {
		return err
	}

	*o = TelemetryDruidDurationGranularity(varTelemetryDruidDurationGranularity)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "duration")
		delete(additionalProperties, "origin")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTelemetryDruidDurationGranularity struct {
	value *TelemetryDruidDurationGranularity
	isSet bool
}

func (v NullableTelemetryDruidDurationGranularity) Get() *TelemetryDruidDurationGranularity {
	return v.value
}

func (v *NullableTelemetryDruidDurationGranularity) Set(val *TelemetryDruidDurationGranularity) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidDurationGranularity) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidDurationGranularity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidDurationGranularity(val *TelemetryDruidDurationGranularity) *NullableTelemetryDruidDurationGranularity {
	return &NullableTelemetryDruidDurationGranularity{value: val, isSet: true}
}

func (v NullableTelemetryDruidDurationGranularity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidDurationGranularity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
