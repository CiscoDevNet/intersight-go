/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-18534
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// SoftwareUcsdDistributableResponse - The response body of a HTTP GET request for the 'software.UcsdDistributable' resource. The value may be one of the following types. 1. When 'tag' is specified in the URL query, the response schema     is a summary of the tag usage. 1. When '$apply' is specified in the URL query, the response schema     is dynamically-generated schema based on the $apply value. 1. When '$count' is specified in the URL query, the response is     a simple object providing the count of the resources. 1. In all other cases, the response is a list of 'software.UcsdDistributable' resources.
type SoftwareUcsdDistributableResponse struct {
	MoAggregateTransform          *MoAggregateTransform
	MoDocumentCount               *MoDocumentCount
	MoTagSummary                  *MoTagSummary
	SoftwareUcsdDistributableList *SoftwareUcsdDistributableList
}

// MoAggregateTransformAsSoftwareUcsdDistributableResponse is a convenience function that returns MoAggregateTransform wrapped in SoftwareUcsdDistributableResponse
func MoAggregateTransformAsSoftwareUcsdDistributableResponse(v *MoAggregateTransform) SoftwareUcsdDistributableResponse {
	return SoftwareUcsdDistributableResponse{
		MoAggregateTransform: v,
	}
}

// MoDocumentCountAsSoftwareUcsdDistributableResponse is a convenience function that returns MoDocumentCount wrapped in SoftwareUcsdDistributableResponse
func MoDocumentCountAsSoftwareUcsdDistributableResponse(v *MoDocumentCount) SoftwareUcsdDistributableResponse {
	return SoftwareUcsdDistributableResponse{
		MoDocumentCount: v,
	}
}

// MoTagSummaryAsSoftwareUcsdDistributableResponse is a convenience function that returns MoTagSummary wrapped in SoftwareUcsdDistributableResponse
func MoTagSummaryAsSoftwareUcsdDistributableResponse(v *MoTagSummary) SoftwareUcsdDistributableResponse {
	return SoftwareUcsdDistributableResponse{
		MoTagSummary: v,
	}
}

// SoftwareUcsdDistributableListAsSoftwareUcsdDistributableResponse is a convenience function that returns SoftwareUcsdDistributableList wrapped in SoftwareUcsdDistributableResponse
func SoftwareUcsdDistributableListAsSoftwareUcsdDistributableResponse(v *SoftwareUcsdDistributableList) SoftwareUcsdDistributableResponse {
	return SoftwareUcsdDistributableResponse{
		SoftwareUcsdDistributableList: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SoftwareUcsdDistributableResponse) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'mo.AggregateTransform'
	if jsonDict["ObjectType"] == "mo.AggregateTransform" {
		// try to unmarshal JSON data into MoAggregateTransform
		err = json.Unmarshal(data, &dst.MoAggregateTransform)
		if err == nil {
			return nil // data stored in dst.MoAggregateTransform, return on the first match
		} else {
			dst.MoAggregateTransform = nil
			return fmt.Errorf("failed to unmarshal SoftwareUcsdDistributableResponse as MoAggregateTransform: %s", err.Error())
		}
	}

	// check if the discriminator value is 'mo.DocumentCount'
	if jsonDict["ObjectType"] == "mo.DocumentCount" {
		// try to unmarshal JSON data into MoDocumentCount
		err = json.Unmarshal(data, &dst.MoDocumentCount)
		if err == nil {
			return nil // data stored in dst.MoDocumentCount, return on the first match
		} else {
			dst.MoDocumentCount = nil
			return fmt.Errorf("failed to unmarshal SoftwareUcsdDistributableResponse as MoDocumentCount: %s", err.Error())
		}
	}

	// check if the discriminator value is 'mo.TagSummary'
	if jsonDict["ObjectType"] == "mo.TagSummary" {
		// try to unmarshal JSON data into MoTagSummary
		err = json.Unmarshal(data, &dst.MoTagSummary)
		if err == nil {
			return nil // data stored in dst.MoTagSummary, return on the first match
		} else {
			dst.MoTagSummary = nil
			return fmt.Errorf("failed to unmarshal SoftwareUcsdDistributableResponse as MoTagSummary: %s", err.Error())
		}
	}

	// check if the discriminator value is 'software.UcsdDistributable.List'
	if jsonDict["ObjectType"] == "software.UcsdDistributable.List" {
		// try to unmarshal JSON data into SoftwareUcsdDistributableList
		err = json.Unmarshal(data, &dst.SoftwareUcsdDistributableList)
		if err == nil {
			return nil // data stored in dst.SoftwareUcsdDistributableList, return on the first match
		} else {
			dst.SoftwareUcsdDistributableList = nil
			return fmt.Errorf("failed to unmarshal SoftwareUcsdDistributableResponse as SoftwareUcsdDistributableList: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SoftwareUcsdDistributableResponse) MarshalJSON() ([]byte, error) {
	if src.MoAggregateTransform != nil {
		return json.Marshal(&src.MoAggregateTransform)
	}

	if src.MoDocumentCount != nil {
		return json.Marshal(&src.MoDocumentCount)
	}

	if src.MoTagSummary != nil {
		return json.Marshal(&src.MoTagSummary)
	}

	if src.SoftwareUcsdDistributableList != nil {
		return json.Marshal(&src.SoftwareUcsdDistributableList)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SoftwareUcsdDistributableResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.MoAggregateTransform != nil {
		return obj.MoAggregateTransform
	}

	if obj.MoDocumentCount != nil {
		return obj.MoDocumentCount
	}

	if obj.MoTagSummary != nil {
		return obj.MoTagSummary
	}

	if obj.SoftwareUcsdDistributableList != nil {
		return obj.SoftwareUcsdDistributableList
	}

	// all schemas are nil
	return nil
}

type NullableSoftwareUcsdDistributableResponse struct {
	value *SoftwareUcsdDistributableResponse
	isSet bool
}

func (v NullableSoftwareUcsdDistributableResponse) Get() *SoftwareUcsdDistributableResponse {
	return v.value
}

func (v *NullableSoftwareUcsdDistributableResponse) Set(val *SoftwareUcsdDistributableResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSoftwareUcsdDistributableResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSoftwareUcsdDistributableResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSoftwareUcsdDistributableResponse(val *SoftwareUcsdDistributableResponse) *NullableSoftwareUcsdDistributableResponse {
	return &NullableSoftwareUcsdDistributableResponse{value: val, isSet: true}
}

func (v NullableSoftwareUcsdDistributableResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSoftwareUcsdDistributableResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
