/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-2025071017
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the ResourceHardwareQualifier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceHardwareQualifier{}

// ResourceHardwareQualifier The server is filtered into the pool based on specific conditions. The hardware qualifier serves as the base class for memory qualifier, processor qualifier, GPU qualifier and network adaptor qualifier which can be used for filtering resources based on hardware characteristics.
type ResourceHardwareQualifier struct {
	ResourceResourceQualifier
	AdditionalProperties map[string]interface{}
}

type _ResourceHardwareQualifier ResourceHardwareQualifier

// NewResourceHardwareQualifier instantiates a new ResourceHardwareQualifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceHardwareQualifier(classId string, objectType string) *ResourceHardwareQualifier {
	this := ResourceHardwareQualifier{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewResourceHardwareQualifierWithDefaults instantiates a new ResourceHardwareQualifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceHardwareQualifierWithDefaults() *ResourceHardwareQualifier {
	this := ResourceHardwareQualifier{}
	return &this
}

func (o ResourceHardwareQualifier) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceHardwareQualifier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedResourceResourceQualifier, errResourceResourceQualifier := json.Marshal(o.ResourceResourceQualifier)
	if errResourceResourceQualifier != nil {
		return map[string]interface{}{}, errResourceResourceQualifier
	}
	errResourceResourceQualifier = json.Unmarshal([]byte(serializedResourceResourceQualifier), &toSerialize)
	if errResourceResourceQualifier != nil {
		return map[string]interface{}{}, errResourceResourceQualifier
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResourceHardwareQualifier) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type ResourceHardwareQualifierWithoutEmbeddedStruct struct {
	}

	varResourceHardwareQualifierWithoutEmbeddedStruct := ResourceHardwareQualifierWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varResourceHardwareQualifierWithoutEmbeddedStruct)
	if err == nil {
		varResourceHardwareQualifier := _ResourceHardwareQualifier{}
		*o = ResourceHardwareQualifier(varResourceHardwareQualifier)
	} else {
		return err
	}

	varResourceHardwareQualifier := _ResourceHardwareQualifier{}

	err = json.Unmarshal(data, &varResourceHardwareQualifier)
	if err == nil {
		o.ResourceResourceQualifier = varResourceHardwareQualifier.ResourceResourceQualifier
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {

		// remove fields from embedded structs
		reflectResourceResourceQualifier := reflect.ValueOf(o.ResourceResourceQualifier)
		for i := 0; i < reflectResourceResourceQualifier.Type().NumField(); i++ {
			t := reflectResourceResourceQualifier.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResourceHardwareQualifier struct {
	value *ResourceHardwareQualifier
	isSet bool
}

func (v NullableResourceHardwareQualifier) Get() *ResourceHardwareQualifier {
	return v.value
}

func (v *NullableResourceHardwareQualifier) Set(val *ResourceHardwareQualifier) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceHardwareQualifier) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceHardwareQualifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceHardwareQualifier(val *ResourceHardwareQualifier) *NullableResourceHardwareQualifier {
	return &NullableResourceHardwareQualifier{value: val, isSet: true}
}

func (v NullableResourceHardwareQualifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceHardwareQualifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
