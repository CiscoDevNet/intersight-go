/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// TelemetryDruidDimensionSpec - struct for TelemetryDruidDimensionSpec
type TelemetryDruidDimensionSpec struct {
	TelemetryDruidDefaultDimensionSpec    *TelemetryDruidDefaultDimensionSpec
	TelemetryDruidExtractionDimensionSpec *TelemetryDruidExtractionDimensionSpec
}

// TelemetryDruidDefaultDimensionSpecAsTelemetryDruidDimensionSpec is a convenience function that returns TelemetryDruidDefaultDimensionSpec wrapped in TelemetryDruidDimensionSpec
func TelemetryDruidDefaultDimensionSpecAsTelemetryDruidDimensionSpec(v *TelemetryDruidDefaultDimensionSpec) TelemetryDruidDimensionSpec {
	return TelemetryDruidDimensionSpec{
		TelemetryDruidDefaultDimensionSpec: v,
	}
}

// TelemetryDruidExtractionDimensionSpecAsTelemetryDruidDimensionSpec is a convenience function that returns TelemetryDruidExtractionDimensionSpec wrapped in TelemetryDruidDimensionSpec
func TelemetryDruidExtractionDimensionSpecAsTelemetryDruidDimensionSpec(v *TelemetryDruidExtractionDimensionSpec) TelemetryDruidDimensionSpec {
	return TelemetryDruidDimensionSpec{
		TelemetryDruidExtractionDimensionSpec: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *TelemetryDruidDimensionSpec) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'default'
	if jsonDict["type"] == "default" {
		// try to unmarshal JSON data into TelemetryDruidDefaultDimensionSpec
		err = json.Unmarshal(data, &dst.TelemetryDruidDefaultDimensionSpec)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidDefaultDimensionSpec, return on the first match
		} else {
			dst.TelemetryDruidDefaultDimensionSpec = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidDimensionSpec as TelemetryDruidDefaultDimensionSpec: %s", err.Error())
		}
	}

	// check if the discriminator value is 'extraction'
	if jsonDict["type"] == "extraction" {
		// try to unmarshal JSON data into TelemetryDruidExtractionDimensionSpec
		err = json.Unmarshal(data, &dst.TelemetryDruidExtractionDimensionSpec)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExtractionDimensionSpec, return on the first match
		} else {
			dst.TelemetryDruidExtractionDimensionSpec = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidDimensionSpec as TelemetryDruidExtractionDimensionSpec: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.DruidDefaultDimensionSpec'
	if jsonDict["type"] == "telemetry.DruidDefaultDimensionSpec" {
		// try to unmarshal JSON data into TelemetryDruidDefaultDimensionSpec
		err = json.Unmarshal(data, &dst.TelemetryDruidDefaultDimensionSpec)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidDefaultDimensionSpec, return on the first match
		} else {
			dst.TelemetryDruidDefaultDimensionSpec = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidDimensionSpec as TelemetryDruidDefaultDimensionSpec: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.DruidExtractionDimensionSpec'
	if jsonDict["type"] == "telemetry.DruidExtractionDimensionSpec" {
		// try to unmarshal JSON data into TelemetryDruidExtractionDimensionSpec
		err = json.Unmarshal(data, &dst.TelemetryDruidExtractionDimensionSpec)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExtractionDimensionSpec, return on the first match
		} else {
			dst.TelemetryDruidExtractionDimensionSpec = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidDimensionSpec as TelemetryDruidExtractionDimensionSpec: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TelemetryDruidDimensionSpec) MarshalJSON() ([]byte, error) {
	if src.TelemetryDruidDefaultDimensionSpec != nil {
		return json.Marshal(&src.TelemetryDruidDefaultDimensionSpec)
	}

	if src.TelemetryDruidExtractionDimensionSpec != nil {
		return json.Marshal(&src.TelemetryDruidExtractionDimensionSpec)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TelemetryDruidDimensionSpec) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.TelemetryDruidDefaultDimensionSpec != nil {
		return obj.TelemetryDruidDefaultDimensionSpec
	}

	if obj.TelemetryDruidExtractionDimensionSpec != nil {
		return obj.TelemetryDruidExtractionDimensionSpec
	}

	// all schemas are nil
	return nil
}

type NullableTelemetryDruidDimensionSpec struct {
	value *TelemetryDruidDimensionSpec
	isSet bool
}

func (v NullableTelemetryDruidDimensionSpec) Get() *TelemetryDruidDimensionSpec {
	return v.value
}

func (v *NullableTelemetryDruidDimensionSpec) Set(val *TelemetryDruidDimensionSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidDimensionSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidDimensionSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidDimensionSpec(val *TelemetryDruidDimensionSpec) *NullableTelemetryDruidDimensionSpec {
	return &NullableTelemetryDruidDimensionSpec{value: val, isSet: true}
}

func (v NullableTelemetryDruidDimensionSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidDimensionSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
