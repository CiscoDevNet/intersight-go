/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-15473
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the StoragePureReplicationBlackout type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoragePureReplicationBlackout{}

// StoragePureReplicationBlackout Range of time at which to suspend replication. System disables replication during this interval.
type StoragePureReplicationBlackout struct {
	StorageBaseReplicationBlackout
	AdditionalProperties map[string]interface{}
}

type _StoragePureReplicationBlackout StoragePureReplicationBlackout

// NewStoragePureReplicationBlackout instantiates a new StoragePureReplicationBlackout object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoragePureReplicationBlackout(classId string, objectType string) *StoragePureReplicationBlackout {
	this := StoragePureReplicationBlackout{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewStoragePureReplicationBlackoutWithDefaults instantiates a new StoragePureReplicationBlackout object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoragePureReplicationBlackoutWithDefaults() *StoragePureReplicationBlackout {
	this := StoragePureReplicationBlackout{}
	return &this
}

func (o StoragePureReplicationBlackout) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoragePureReplicationBlackout) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedStorageBaseReplicationBlackout, errStorageBaseReplicationBlackout := json.Marshal(o.StorageBaseReplicationBlackout)
	if errStorageBaseReplicationBlackout != nil {
		return map[string]interface{}{}, errStorageBaseReplicationBlackout
	}
	errStorageBaseReplicationBlackout = json.Unmarshal([]byte(serializedStorageBaseReplicationBlackout), &toSerialize)
	if errStorageBaseReplicationBlackout != nil {
		return map[string]interface{}{}, errStorageBaseReplicationBlackout
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StoragePureReplicationBlackout) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	type StoragePureReplicationBlackoutWithoutEmbeddedStruct struct {
	}

	varStoragePureReplicationBlackoutWithoutEmbeddedStruct := StoragePureReplicationBlackoutWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varStoragePureReplicationBlackoutWithoutEmbeddedStruct)
	if err == nil {
		varStoragePureReplicationBlackout := _StoragePureReplicationBlackout{}
		*o = StoragePureReplicationBlackout(varStoragePureReplicationBlackout)
	} else {
		return err
	}

	varStoragePureReplicationBlackout := _StoragePureReplicationBlackout{}

	err = json.Unmarshal(data, &varStoragePureReplicationBlackout)
	if err == nil {
		o.StorageBaseReplicationBlackout = varStoragePureReplicationBlackout.StorageBaseReplicationBlackout
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {

		// remove fields from embedded structs
		reflectStorageBaseReplicationBlackout := reflect.ValueOf(o.StorageBaseReplicationBlackout)
		for i := 0; i < reflectStorageBaseReplicationBlackout.Type().NumField(); i++ {
			t := reflectStorageBaseReplicationBlackout.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStoragePureReplicationBlackout struct {
	value *StoragePureReplicationBlackout
	isSet bool
}

func (v NullableStoragePureReplicationBlackout) Get() *StoragePureReplicationBlackout {
	return v.value
}

func (v *NullableStoragePureReplicationBlackout) Set(val *StoragePureReplicationBlackout) {
	v.value = val
	v.isSet = true
}

func (v NullableStoragePureReplicationBlackout) IsSet() bool {
	return v.isSet
}

func (v *NullableStoragePureReplicationBlackout) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoragePureReplicationBlackout(val *StoragePureReplicationBlackout) *NullableStoragePureReplicationBlackout {
	return &NullableStoragePureReplicationBlackout{value: val, isSet: true}
}

func (v NullableStoragePureReplicationBlackout) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoragePureReplicationBlackout) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
