/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-14968
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the IamResourceLimits type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IamResourceLimits{}

// IamResourceLimits The resource limits used to limit resources such as User accounts.
type IamResourceLimits struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The maximum number of users allowed in an account. The default value is 200.
	PerAccountUserLimit  *int64                         `json:"PerAccountUserLimit,omitempty"`
	Account              NullableIamAccountRelationship `json:"Account,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IamResourceLimits IamResourceLimits

// NewIamResourceLimits instantiates a new IamResourceLimits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIamResourceLimits(classId string, objectType string) *IamResourceLimits {
	this := IamResourceLimits{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewIamResourceLimitsWithDefaults instantiates a new IamResourceLimits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIamResourceLimitsWithDefaults() *IamResourceLimits {
	this := IamResourceLimits{}
	var classId string = "iam.ResourceLimits"
	this.ClassId = classId
	var objectType string = "iam.ResourceLimits"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *IamResourceLimits) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *IamResourceLimits) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *IamResourceLimits) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *IamResourceLimits) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *IamResourceLimits) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *IamResourceLimits) SetObjectType(v string) {
	o.ObjectType = v
}

// GetPerAccountUserLimit returns the PerAccountUserLimit field value if set, zero value otherwise.
func (o *IamResourceLimits) GetPerAccountUserLimit() int64 {
	if o == nil || IsNil(o.PerAccountUserLimit) {
		var ret int64
		return ret
	}
	return *o.PerAccountUserLimit
}

// GetPerAccountUserLimitOk returns a tuple with the PerAccountUserLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamResourceLimits) GetPerAccountUserLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.PerAccountUserLimit) {
		return nil, false
	}
	return o.PerAccountUserLimit, true
}

// HasPerAccountUserLimit returns a boolean if a field has been set.
func (o *IamResourceLimits) HasPerAccountUserLimit() bool {
	if o != nil && !IsNil(o.PerAccountUserLimit) {
		return true
	}

	return false
}

// SetPerAccountUserLimit gets a reference to the given int64 and assigns it to the PerAccountUserLimit field.
func (o *IamResourceLimits) SetPerAccountUserLimit(v int64) {
	o.PerAccountUserLimit = &v
}

// GetAccount returns the Account field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamResourceLimits) GetAccount() IamAccountRelationship {
	if o == nil || IsNil(o.Account.Get()) {
		var ret IamAccountRelationship
		return ret
	}
	return *o.Account.Get()
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamResourceLimits) GetAccountOk() (*IamAccountRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Account.Get(), o.Account.IsSet()
}

// HasAccount returns a boolean if a field has been set.
func (o *IamResourceLimits) HasAccount() bool {
	if o != nil && o.Account.IsSet() {
		return true
	}

	return false
}

// SetAccount gets a reference to the given NullableIamAccountRelationship and assigns it to the Account field.
func (o *IamResourceLimits) SetAccount(v IamAccountRelationship) {
	o.Account.Set(&v)
}

// SetAccountNil sets the value for Account to be an explicit nil
func (o *IamResourceLimits) SetAccountNil() {
	o.Account.Set(nil)
}

// UnsetAccount ensures that no value is present for Account, not even an explicit nil
func (o *IamResourceLimits) UnsetAccount() {
	o.Account.Unset()
}

func (o IamResourceLimits) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IamResourceLimits) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	toSerialize["ClassId"] = o.ClassId
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.PerAccountUserLimit) {
		toSerialize["PerAccountUserLimit"] = o.PerAccountUserLimit
	}
	if o.Account.IsSet() {
		toSerialize["Account"] = o.Account.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IamResourceLimits) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	type IamResourceLimitsWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The maximum number of users allowed in an account. The default value is 200.
		PerAccountUserLimit *int64                         `json:"PerAccountUserLimit,omitempty"`
		Account             NullableIamAccountRelationship `json:"Account,omitempty"`
	}

	varIamResourceLimitsWithoutEmbeddedStruct := IamResourceLimitsWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varIamResourceLimitsWithoutEmbeddedStruct)
	if err == nil {
		varIamResourceLimits := _IamResourceLimits{}
		varIamResourceLimits.ClassId = varIamResourceLimitsWithoutEmbeddedStruct.ClassId
		varIamResourceLimits.ObjectType = varIamResourceLimitsWithoutEmbeddedStruct.ObjectType
		varIamResourceLimits.PerAccountUserLimit = varIamResourceLimitsWithoutEmbeddedStruct.PerAccountUserLimit
		varIamResourceLimits.Account = varIamResourceLimitsWithoutEmbeddedStruct.Account
		*o = IamResourceLimits(varIamResourceLimits)
	} else {
		return err
	}

	varIamResourceLimits := _IamResourceLimits{}

	err = json.Unmarshal(data, &varIamResourceLimits)
	if err == nil {
		o.MoBaseMo = varIamResourceLimits.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "PerAccountUserLimit")
		delete(additionalProperties, "Account")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIamResourceLimits struct {
	value *IamResourceLimits
	isSet bool
}

func (v NullableIamResourceLimits) Get() *IamResourceLimits {
	return v.value
}

func (v *NullableIamResourceLimits) Set(val *IamResourceLimits) {
	v.value = val
	v.isSet = true
}

func (v NullableIamResourceLimits) IsSet() bool {
	return v.isSet
}

func (v *NullableIamResourceLimits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIamResourceLimits(val *IamResourceLimits) *NullableIamResourceLimits {
	return &NullableIamResourceLimits{value: val, isSet: true}
}

func (v NullableIamResourceLimits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIamResourceLimits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
