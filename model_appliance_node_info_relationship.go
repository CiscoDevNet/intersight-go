/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// ApplianceNodeInfoRelationship - A relationship to the 'appliance.NodeInfo' resource, or the expanded 'appliance.NodeInfo' resource, or the 'null' value.
type ApplianceNodeInfoRelationship struct {
	ApplianceNodeInfo *ApplianceNodeInfo
	MoMoRef           *MoMoRef
}

// ApplianceNodeInfoAsApplianceNodeInfoRelationship is a convenience function that returns ApplianceNodeInfo wrapped in ApplianceNodeInfoRelationship
func ApplianceNodeInfoAsApplianceNodeInfoRelationship(v *ApplianceNodeInfo) ApplianceNodeInfoRelationship {
	return ApplianceNodeInfoRelationship{
		ApplianceNodeInfo: v,
	}
}

// MoMoRefAsApplianceNodeInfoRelationship is a convenience function that returns MoMoRef wrapped in ApplianceNodeInfoRelationship
func MoMoRefAsApplianceNodeInfoRelationship(v *MoMoRef) ApplianceNodeInfoRelationship {
	return ApplianceNodeInfoRelationship{
		MoMoRef: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ApplianceNodeInfoRelationship) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'appliance.NodeInfo'
	if jsonDict["ClassId"] == "appliance.NodeInfo" {
		// try to unmarshal JSON data into ApplianceNodeInfo
		err = json.Unmarshal(data, &dst.ApplianceNodeInfo)
		if err == nil {
			return nil // data stored in dst.ApplianceNodeInfo, return on the first match
		} else {
			dst.ApplianceNodeInfo = nil
			return fmt.Errorf("failed to unmarshal ApplianceNodeInfoRelationship as ApplianceNodeInfo: %s", err.Error())
		}
	}

	// check if the discriminator value is 'mo.MoRef'
	if jsonDict["ClassId"] == "mo.MoRef" {
		// try to unmarshal JSON data into MoMoRef
		err = json.Unmarshal(data, &dst.MoMoRef)
		if err == nil {
			return nil // data stored in dst.MoMoRef, return on the first match
		} else {
			dst.MoMoRef = nil
			return fmt.Errorf("failed to unmarshal ApplianceNodeInfoRelationship as MoMoRef: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ApplianceNodeInfoRelationship) MarshalJSON() ([]byte, error) {
	if src.ApplianceNodeInfo != nil {
		return json.Marshal(&src.ApplianceNodeInfo)
	}

	if src.MoMoRef != nil {
		return json.Marshal(&src.MoMoRef)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ApplianceNodeInfoRelationship) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ApplianceNodeInfo != nil {
		return obj.ApplianceNodeInfo
	}

	if obj.MoMoRef != nil {
		return obj.MoMoRef
	}

	// all schemas are nil
	return nil
}

type NullableApplianceNodeInfoRelationship struct {
	value *ApplianceNodeInfoRelationship
	isSet bool
}

func (v NullableApplianceNodeInfoRelationship) Get() *ApplianceNodeInfoRelationship {
	return v.value
}

func (v *NullableApplianceNodeInfoRelationship) Set(val *ApplianceNodeInfoRelationship) {
	v.value = val
	v.isSet = true
}

func (v NullableApplianceNodeInfoRelationship) IsSet() bool {
	return v.isSet
}

func (v *NullableApplianceNodeInfoRelationship) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplianceNodeInfoRelationship(val *ApplianceNodeInfoRelationship) *NullableApplianceNodeInfoRelationship {
	return &NullableApplianceNodeInfoRelationship{value: val, isSet: true}
}

func (v NullableApplianceNodeInfoRelationship) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplianceNodeInfoRelationship) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
