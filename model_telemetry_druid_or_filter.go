/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-2025020308
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// checks if the TelemetryDruidOrFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryDruidOrFilter{}

// TelemetryDruidOrFilter A logical OR expression filter.
type TelemetryDruidOrFilter struct {
	Type                 string                 `json:"type"`
	Fields               []TelemetryDruidFilter `json:"fields"`
	AdditionalProperties map[string]interface{}
}

type _TelemetryDruidOrFilter TelemetryDruidOrFilter

// NewTelemetryDruidOrFilter instantiates a new TelemetryDruidOrFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryDruidOrFilter(type_ string, fields []TelemetryDruidFilter) *TelemetryDruidOrFilter {
	this := TelemetryDruidOrFilter{}
	this.Type = type_
	this.Fields = fields
	return &this
}

// NewTelemetryDruidOrFilterWithDefaults instantiates a new TelemetryDruidOrFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryDruidOrFilterWithDefaults() *TelemetryDruidOrFilter {
	this := TelemetryDruidOrFilter{}
	return &this
}

// GetType returns the Type field value
func (o *TelemetryDruidOrFilter) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidOrFilter) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TelemetryDruidOrFilter) SetType(v string) {
	o.Type = v
}

// GetFields returns the Fields field value
func (o *TelemetryDruidOrFilter) GetFields() []TelemetryDruidFilter {
	if o == nil {
		var ret []TelemetryDruidFilter
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidOrFilter) GetFieldsOk() ([]TelemetryDruidFilter, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fields, true
}

// SetFields sets field value
func (o *TelemetryDruidOrFilter) SetFields(v []TelemetryDruidFilter) {
	o.Fields = v
}

func (o TelemetryDruidOrFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryDruidOrFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["fields"] = o.Fields

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TelemetryDruidOrFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"fields",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varTelemetryDruidOrFilter := _TelemetryDruidOrFilter{}

	err = json.Unmarshal(data, &varTelemetryDruidOrFilter)

	if err != nil {
		return err
	}

	*o = TelemetryDruidOrFilter(varTelemetryDruidOrFilter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "fields")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTelemetryDruidOrFilter struct {
	value *TelemetryDruidOrFilter
	isSet bool
}

func (v NullableTelemetryDruidOrFilter) Get() *TelemetryDruidOrFilter {
	return v.value
}

func (v *NullableTelemetryDruidOrFilter) Set(val *TelemetryDruidOrFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidOrFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidOrFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidOrFilter(val *TelemetryDruidOrFilter) *NullableTelemetryDruidOrFilter {
	return &NullableTelemetryDruidOrFilter{value: val, isSet: true}
}

func (v NullableTelemetryDruidOrFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidOrFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
