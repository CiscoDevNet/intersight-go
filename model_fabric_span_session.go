/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-17769
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the FabricSpanSession type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FabricSpanSession{}

// FabricSpanSession Configures an Ethernet SPAN session per Fabric Interconnect.
type FabricSpanSession struct {
	FabricAbstractSpanSession
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// An array of relationships to fabricAbstractSpanDestPort resources.
	DestPorts []FabricAbstractSpanDestPortRelationship `json:"DestPorts,omitempty"`
	// An array of relationships to fabricAbstractSpanSourcePortChannel resources.
	SourcePortChannels []FabricAbstractSpanSourcePortChannelRelationship `json:"SourcePortChannels,omitempty"`
	// An array of relationships to fabricAbstractSpanSourcePort resources.
	SourcePorts []FabricAbstractSpanSourcePortRelationship `json:"SourcePorts,omitempty"`
	// An array of relationships to fabricAbstractSpanSourceVirtualIf resources.
	SourceVirtualIfs []FabricAbstractSpanSourceVirtualIfRelationship `json:"SourceVirtualIfs,omitempty"`
	// An array of relationships to fabricSpanSourceVlan resources.
	SourceVlans          []FabricSpanSourceVlanRelationship `json:"SourceVlans,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FabricSpanSession FabricSpanSession

// NewFabricSpanSession instantiates a new FabricSpanSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFabricSpanSession(classId string, objectType string) *FabricSpanSession {
	this := FabricSpanSession{}
	this.ClassId = classId
	this.ObjectType = objectType
	var adminState string = "Disabled"
	this.AdminState = &adminState
	var spanControlPackets string = "Disabled"
	this.SpanControlPackets = &spanControlPackets
	return &this
}

// NewFabricSpanSessionWithDefaults instantiates a new FabricSpanSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFabricSpanSessionWithDefaults() *FabricSpanSession {
	this := FabricSpanSession{}
	var classId string = "fabric.SpanSession"
	this.ClassId = classId
	var objectType string = "fabric.SpanSession"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *FabricSpanSession) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *FabricSpanSession) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *FabricSpanSession) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *FabricSpanSession) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *FabricSpanSession) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *FabricSpanSession) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDestPorts returns the DestPorts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FabricSpanSession) GetDestPorts() []FabricAbstractSpanDestPortRelationship {
	if o == nil {
		var ret []FabricAbstractSpanDestPortRelationship
		return ret
	}
	return o.DestPorts
}

// GetDestPortsOk returns a tuple with the DestPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FabricSpanSession) GetDestPortsOk() ([]FabricAbstractSpanDestPortRelationship, bool) {
	if o == nil || IsNil(o.DestPorts) {
		return nil, false
	}
	return o.DestPorts, true
}

// HasDestPorts returns a boolean if a field has been set.
func (o *FabricSpanSession) HasDestPorts() bool {
	if o != nil && IsNil(o.DestPorts) {
		return true
	}

	return false
}

// SetDestPorts gets a reference to the given []FabricAbstractSpanDestPortRelationship and assigns it to the DestPorts field.
func (o *FabricSpanSession) SetDestPorts(v []FabricAbstractSpanDestPortRelationship) {
	o.DestPorts = v
}

// GetSourcePortChannels returns the SourcePortChannels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FabricSpanSession) GetSourcePortChannels() []FabricAbstractSpanSourcePortChannelRelationship {
	if o == nil {
		var ret []FabricAbstractSpanSourcePortChannelRelationship
		return ret
	}
	return o.SourcePortChannels
}

// GetSourcePortChannelsOk returns a tuple with the SourcePortChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FabricSpanSession) GetSourcePortChannelsOk() ([]FabricAbstractSpanSourcePortChannelRelationship, bool) {
	if o == nil || IsNil(o.SourcePortChannels) {
		return nil, false
	}
	return o.SourcePortChannels, true
}

// HasSourcePortChannels returns a boolean if a field has been set.
func (o *FabricSpanSession) HasSourcePortChannels() bool {
	if o != nil && IsNil(o.SourcePortChannels) {
		return true
	}

	return false
}

// SetSourcePortChannels gets a reference to the given []FabricAbstractSpanSourcePortChannelRelationship and assigns it to the SourcePortChannels field.
func (o *FabricSpanSession) SetSourcePortChannels(v []FabricAbstractSpanSourcePortChannelRelationship) {
	o.SourcePortChannels = v
}

// GetSourcePorts returns the SourcePorts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FabricSpanSession) GetSourcePorts() []FabricAbstractSpanSourcePortRelationship {
	if o == nil {
		var ret []FabricAbstractSpanSourcePortRelationship
		return ret
	}
	return o.SourcePorts
}

// GetSourcePortsOk returns a tuple with the SourcePorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FabricSpanSession) GetSourcePortsOk() ([]FabricAbstractSpanSourcePortRelationship, bool) {
	if o == nil || IsNil(o.SourcePorts) {
		return nil, false
	}
	return o.SourcePorts, true
}

// HasSourcePorts returns a boolean if a field has been set.
func (o *FabricSpanSession) HasSourcePorts() bool {
	if o != nil && IsNil(o.SourcePorts) {
		return true
	}

	return false
}

// SetSourcePorts gets a reference to the given []FabricAbstractSpanSourcePortRelationship and assigns it to the SourcePorts field.
func (o *FabricSpanSession) SetSourcePorts(v []FabricAbstractSpanSourcePortRelationship) {
	o.SourcePorts = v
}

// GetSourceVirtualIfs returns the SourceVirtualIfs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FabricSpanSession) GetSourceVirtualIfs() []FabricAbstractSpanSourceVirtualIfRelationship {
	if o == nil {
		var ret []FabricAbstractSpanSourceVirtualIfRelationship
		return ret
	}
	return o.SourceVirtualIfs
}

// GetSourceVirtualIfsOk returns a tuple with the SourceVirtualIfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FabricSpanSession) GetSourceVirtualIfsOk() ([]FabricAbstractSpanSourceVirtualIfRelationship, bool) {
	if o == nil || IsNil(o.SourceVirtualIfs) {
		return nil, false
	}
	return o.SourceVirtualIfs, true
}

// HasSourceVirtualIfs returns a boolean if a field has been set.
func (o *FabricSpanSession) HasSourceVirtualIfs() bool {
	if o != nil && IsNil(o.SourceVirtualIfs) {
		return true
	}

	return false
}

// SetSourceVirtualIfs gets a reference to the given []FabricAbstractSpanSourceVirtualIfRelationship and assigns it to the SourceVirtualIfs field.
func (o *FabricSpanSession) SetSourceVirtualIfs(v []FabricAbstractSpanSourceVirtualIfRelationship) {
	o.SourceVirtualIfs = v
}

// GetSourceVlans returns the SourceVlans field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FabricSpanSession) GetSourceVlans() []FabricSpanSourceVlanRelationship {
	if o == nil {
		var ret []FabricSpanSourceVlanRelationship
		return ret
	}
	return o.SourceVlans
}

// GetSourceVlansOk returns a tuple with the SourceVlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FabricSpanSession) GetSourceVlansOk() ([]FabricSpanSourceVlanRelationship, bool) {
	if o == nil || IsNil(o.SourceVlans) {
		return nil, false
	}
	return o.SourceVlans, true
}

// HasSourceVlans returns a boolean if a field has been set.
func (o *FabricSpanSession) HasSourceVlans() bool {
	if o != nil && IsNil(o.SourceVlans) {
		return true
	}

	return false
}

// SetSourceVlans gets a reference to the given []FabricSpanSourceVlanRelationship and assigns it to the SourceVlans field.
func (o *FabricSpanSession) SetSourceVlans(v []FabricSpanSourceVlanRelationship) {
	o.SourceVlans = v
}

func (o FabricSpanSession) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FabricSpanSession) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedFabricAbstractSpanSession, errFabricAbstractSpanSession := json.Marshal(o.FabricAbstractSpanSession)
	if errFabricAbstractSpanSession != nil {
		return map[string]interface{}{}, errFabricAbstractSpanSession
	}
	errFabricAbstractSpanSession = json.Unmarshal([]byte(serializedFabricAbstractSpanSession), &toSerialize)
	if errFabricAbstractSpanSession != nil {
		return map[string]interface{}{}, errFabricAbstractSpanSession
	}
	toSerialize["ClassId"] = o.ClassId
	toSerialize["ObjectType"] = o.ObjectType
	if o.DestPorts != nil {
		toSerialize["DestPorts"] = o.DestPorts
	}
	if o.SourcePortChannels != nil {
		toSerialize["SourcePortChannels"] = o.SourcePortChannels
	}
	if o.SourcePorts != nil {
		toSerialize["SourcePorts"] = o.SourcePorts
	}
	if o.SourceVirtualIfs != nil {
		toSerialize["SourceVirtualIfs"] = o.SourceVirtualIfs
	}
	if o.SourceVlans != nil {
		toSerialize["SourceVlans"] = o.SourceVlans
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FabricSpanSession) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	type FabricSpanSessionWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// An array of relationships to fabricAbstractSpanDestPort resources.
		DestPorts []FabricAbstractSpanDestPortRelationship `json:"DestPorts,omitempty"`
		// An array of relationships to fabricAbstractSpanSourcePortChannel resources.
		SourcePortChannels []FabricAbstractSpanSourcePortChannelRelationship `json:"SourcePortChannels,omitempty"`
		// An array of relationships to fabricAbstractSpanSourcePort resources.
		SourcePorts []FabricAbstractSpanSourcePortRelationship `json:"SourcePorts,omitempty"`
		// An array of relationships to fabricAbstractSpanSourceVirtualIf resources.
		SourceVirtualIfs []FabricAbstractSpanSourceVirtualIfRelationship `json:"SourceVirtualIfs,omitempty"`
		// An array of relationships to fabricSpanSourceVlan resources.
		SourceVlans []FabricSpanSourceVlanRelationship `json:"SourceVlans,omitempty"`
	}

	varFabricSpanSessionWithoutEmbeddedStruct := FabricSpanSessionWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varFabricSpanSessionWithoutEmbeddedStruct)
	if err == nil {
		varFabricSpanSession := _FabricSpanSession{}
		varFabricSpanSession.ClassId = varFabricSpanSessionWithoutEmbeddedStruct.ClassId
		varFabricSpanSession.ObjectType = varFabricSpanSessionWithoutEmbeddedStruct.ObjectType
		varFabricSpanSession.DestPorts = varFabricSpanSessionWithoutEmbeddedStruct.DestPorts
		varFabricSpanSession.SourcePortChannels = varFabricSpanSessionWithoutEmbeddedStruct.SourcePortChannels
		varFabricSpanSession.SourcePorts = varFabricSpanSessionWithoutEmbeddedStruct.SourcePorts
		varFabricSpanSession.SourceVirtualIfs = varFabricSpanSessionWithoutEmbeddedStruct.SourceVirtualIfs
		varFabricSpanSession.SourceVlans = varFabricSpanSessionWithoutEmbeddedStruct.SourceVlans
		*o = FabricSpanSession(varFabricSpanSession)
	} else {
		return err
	}

	varFabricSpanSession := _FabricSpanSession{}

	err = json.Unmarshal(data, &varFabricSpanSession)
	if err == nil {
		o.FabricAbstractSpanSession = varFabricSpanSession.FabricAbstractSpanSession
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "DestPorts")
		delete(additionalProperties, "SourcePortChannels")
		delete(additionalProperties, "SourcePorts")
		delete(additionalProperties, "SourceVirtualIfs")
		delete(additionalProperties, "SourceVlans")

		// remove fields from embedded structs
		reflectFabricAbstractSpanSession := reflect.ValueOf(o.FabricAbstractSpanSession)
		for i := 0; i < reflectFabricAbstractSpanSession.Type().NumField(); i++ {
			t := reflectFabricAbstractSpanSession.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFabricSpanSession struct {
	value *FabricSpanSession
	isSet bool
}

func (v NullableFabricSpanSession) Get() *FabricSpanSession {
	return v.value
}

func (v *NullableFabricSpanSession) Set(val *FabricSpanSession) {
	v.value = val
	v.isSet = true
}

func (v NullableFabricSpanSession) IsSet() bool {
	return v.isSet
}

func (v *NullableFabricSpanSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFabricSpanSession(val *FabricSpanSession) *NullableFabricSpanSession {
	return &NullableFabricSpanSession{value: val, isSet: true}
}

func (v NullableFabricSpanSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFabricSpanSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
