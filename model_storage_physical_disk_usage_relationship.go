/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-17956
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// StoragePhysicalDiskUsageRelationship - A relationship to the 'storage.PhysicalDiskUsage' resource, or the expanded 'storage.PhysicalDiskUsage' resource, or the 'null' value.
type StoragePhysicalDiskUsageRelationship struct {
	MoMoRef                  *MoMoRef
	StoragePhysicalDiskUsage *StoragePhysicalDiskUsage
}

// MoMoRefAsStoragePhysicalDiskUsageRelationship is a convenience function that returns MoMoRef wrapped in StoragePhysicalDiskUsageRelationship
func MoMoRefAsStoragePhysicalDiskUsageRelationship(v *MoMoRef) StoragePhysicalDiskUsageRelationship {
	return StoragePhysicalDiskUsageRelationship{
		MoMoRef: v,
	}
}

// StoragePhysicalDiskUsageAsStoragePhysicalDiskUsageRelationship is a convenience function that returns StoragePhysicalDiskUsage wrapped in StoragePhysicalDiskUsageRelationship
func StoragePhysicalDiskUsageAsStoragePhysicalDiskUsageRelationship(v *StoragePhysicalDiskUsage) StoragePhysicalDiskUsageRelationship {
	return StoragePhysicalDiskUsageRelationship{
		StoragePhysicalDiskUsage: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *StoragePhysicalDiskUsageRelationship) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'mo.MoRef'
	if jsonDict["ClassId"] == "mo.MoRef" {
		// try to unmarshal JSON data into MoMoRef
		err = json.Unmarshal(data, &dst.MoMoRef)
		if err == nil {
			return nil // data stored in dst.MoMoRef, return on the first match
		} else {
			dst.MoMoRef = nil
			return fmt.Errorf("failed to unmarshal StoragePhysicalDiskUsageRelationship as MoMoRef: %s", err.Error())
		}
	}

	// check if the discriminator value is 'storage.PhysicalDiskUsage'
	if jsonDict["ClassId"] == "storage.PhysicalDiskUsage" {
		// try to unmarshal JSON data into StoragePhysicalDiskUsage
		err = json.Unmarshal(data, &dst.StoragePhysicalDiskUsage)
		if err == nil {
			return nil // data stored in dst.StoragePhysicalDiskUsage, return on the first match
		} else {
			dst.StoragePhysicalDiskUsage = nil
			return fmt.Errorf("failed to unmarshal StoragePhysicalDiskUsageRelationship as StoragePhysicalDiskUsage: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src StoragePhysicalDiskUsageRelationship) MarshalJSON() ([]byte, error) {
	if src.MoMoRef != nil {
		return json.Marshal(&src.MoMoRef)
	}

	if src.StoragePhysicalDiskUsage != nil {
		return json.Marshal(&src.StoragePhysicalDiskUsage)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *StoragePhysicalDiskUsageRelationship) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.MoMoRef != nil {
		return obj.MoMoRef
	}

	if obj.StoragePhysicalDiskUsage != nil {
		return obj.StoragePhysicalDiskUsage
	}

	// all schemas are nil
	return nil
}

type NullableStoragePhysicalDiskUsageRelationship struct {
	value *StoragePhysicalDiskUsageRelationship
	isSet bool
}

func (v NullableStoragePhysicalDiskUsageRelationship) Get() *StoragePhysicalDiskUsageRelationship {
	return v.value
}

func (v *NullableStoragePhysicalDiskUsageRelationship) Set(val *StoragePhysicalDiskUsageRelationship) {
	v.value = val
	v.isSet = true
}

func (v NullableStoragePhysicalDiskUsageRelationship) IsSet() bool {
	return v.isSet
}

func (v *NullableStoragePhysicalDiskUsageRelationship) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoragePhysicalDiskUsageRelationship(val *StoragePhysicalDiskUsageRelationship) *NullableStoragePhysicalDiskUsageRelationship {
	return &NullableStoragePhysicalDiskUsageRelationship{value: val, isSet: true}
}

func (v NullableStoragePhysicalDiskUsageRelationship) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoragePhysicalDiskUsageRelationship) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
