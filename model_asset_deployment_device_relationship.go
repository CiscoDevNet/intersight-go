/*
Cisco Intersight

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.11-16342
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// AssetDeploymentDeviceRelationship - A relationship to the 'asset.DeploymentDevice' resource, or the expanded 'asset.DeploymentDevice' resource, or the 'null' value.
type AssetDeploymentDeviceRelationship struct {
	AssetDeploymentDevice *AssetDeploymentDevice
	MoMoRef               *MoMoRef
}

// AssetDeploymentDeviceAsAssetDeploymentDeviceRelationship is a convenience function that returns AssetDeploymentDevice wrapped in AssetDeploymentDeviceRelationship
func AssetDeploymentDeviceAsAssetDeploymentDeviceRelationship(v *AssetDeploymentDevice) AssetDeploymentDeviceRelationship {
	return AssetDeploymentDeviceRelationship{
		AssetDeploymentDevice: v,
	}
}

// MoMoRefAsAssetDeploymentDeviceRelationship is a convenience function that returns MoMoRef wrapped in AssetDeploymentDeviceRelationship
func MoMoRefAsAssetDeploymentDeviceRelationship(v *MoMoRef) AssetDeploymentDeviceRelationship {
	return AssetDeploymentDeviceRelationship{
		MoMoRef: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AssetDeploymentDeviceRelationship) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'asset.DeploymentDevice'
	if jsonDict["ClassId"] == "asset.DeploymentDevice" {
		// try to unmarshal JSON data into AssetDeploymentDevice
		err = json.Unmarshal(data, &dst.AssetDeploymentDevice)
		if err == nil {
			return nil // data stored in dst.AssetDeploymentDevice, return on the first match
		} else {
			dst.AssetDeploymentDevice = nil
			return fmt.Errorf("failed to unmarshal AssetDeploymentDeviceRelationship as AssetDeploymentDevice: %s", err.Error())
		}
	}

	// check if the discriminator value is 'mo.MoRef'
	if jsonDict["ClassId"] == "mo.MoRef" {
		// try to unmarshal JSON data into MoMoRef
		err = json.Unmarshal(data, &dst.MoMoRef)
		if err == nil {
			return nil // data stored in dst.MoMoRef, return on the first match
		} else {
			dst.MoMoRef = nil
			return fmt.Errorf("failed to unmarshal AssetDeploymentDeviceRelationship as MoMoRef: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AssetDeploymentDeviceRelationship) MarshalJSON() ([]byte, error) {
	if src.AssetDeploymentDevice != nil {
		return json.Marshal(&src.AssetDeploymentDevice)
	}

	if src.MoMoRef != nil {
		return json.Marshal(&src.MoMoRef)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AssetDeploymentDeviceRelationship) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AssetDeploymentDevice != nil {
		return obj.AssetDeploymentDevice
	}

	if obj.MoMoRef != nil {
		return obj.MoMoRef
	}

	// all schemas are nil
	return nil
}

type NullableAssetDeploymentDeviceRelationship struct {
	value *AssetDeploymentDeviceRelationship
	isSet bool
}

func (v NullableAssetDeploymentDeviceRelationship) Get() *AssetDeploymentDeviceRelationship {
	return v.value
}

func (v *NullableAssetDeploymentDeviceRelationship) Set(val *AssetDeploymentDeviceRelationship) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetDeploymentDeviceRelationship) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetDeploymentDeviceRelationship) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetDeploymentDeviceRelationship(val *AssetDeploymentDeviceRelationship) *NullableAssetDeploymentDeviceRelationship {
	return &NullableAssetDeploymentDeviceRelationship{value: val, isSet: true}
}

func (v NullableAssetDeploymentDeviceRelationship) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetDeploymentDeviceRelationship) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
